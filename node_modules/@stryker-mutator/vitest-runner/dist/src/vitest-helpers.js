import path from 'path';
import { TestStatus } from '@stryker-mutator/api/test-runner';
import { collectTestName, toRawTestId } from './test-helpers.js';
function convertTaskStateToTestStatus(taskState, testMode) {
    if (testMode === 'skip') {
        return TestStatus.Skipped;
    }
    switch (taskState) {
        case 'pass':
            return TestStatus.Success;
        case 'fail':
            return TestStatus.Failed;
        case 'skip':
        case 'todo':
            return TestStatus.Skipped;
        default: // taskState is undefined | "run" | "only". This should not happen
    }
    return TestStatus.Failed;
}
export function convertTestToTestResult(test) {
    const status = convertTaskStateToTestStatus(test.result?.state, test.mode);
    const baseTestResult = {
        id: normalizeTestId(toRawTestId(test)),
        name: collectTestName(test),
        timeSpentMs: test.result?.duration ?? 0,
        fileName: test.file?.filepath && path.resolve(test.file.filepath),
    };
    if (status === TestStatus.Failed) {
        return {
            ...baseTestResult,
            status,
            failureMessage: test.result?.errors?.[0]?.message ?? 'StrykerJS: Unknown test failure',
        };
    }
    else {
        return {
            ...baseTestResult,
            status,
        };
    }
}
export function fromTestId(id) {
    const [file, ...name] = id.split('#');
    return { file, test: name.join('#') };
}
export function normalizeTestId(id) {
    const { file, test } = fromTestId(id);
    return `${path.relative(process.cwd(), file).replace(/\\/g, '/')}#${test}`;
}
export function normalizeCoverage(rawCoverage) {
    return {
        perTest: Object.fromEntries(Object.entries(rawCoverage.perTest).map(([rawTestId, coverageData]) => [normalizeTestId(rawTestId), coverageData])),
        static: rawCoverage.static,
    };
}
export function collectTestsFromSuite(suite) {
    return suite.tasks.flatMap((task) => {
        if (task.type === 'suite') {
            return collectTestsFromSuite(task);
        }
        else if (task.type === 'test') {
            return task;
        }
        else {
            return [];
        }
    });
}
//# sourceMappingURL=vitest-helpers.js.map