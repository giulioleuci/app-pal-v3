{
  "version": 3,
  "sources": ["../../@nozbe/watermelondb/Collection/RecordCache.js", "../../@nozbe/watermelondb/Collection/index.js", "../../@nozbe/watermelondb/adapters/compat.js", "../../@nozbe/watermelondb/Database/CollectionMap/index.js", "../../@nozbe/watermelondb/Database/WorkQueue.js", "../../@nozbe/watermelondb/adapters/error.js", "../../@nozbe/watermelondb/Database/LocalStorage/index.js", "../../@nozbe/watermelondb/Database/index.js", "../../@nozbe/watermelondb/sync/helpers.js", "../../@nozbe/watermelondb/Model/helpers.js", "../../@nozbe/watermelondb/Model/index.js", "../../@nozbe/watermelondb/index.js"],
  "sourcesContent": ["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _logger = _interopRequireDefault(require(\"../utils/common/logger\"));\nvar RecordCache = exports.default = /*#__PURE__*/function () {\n  function RecordCache(tableName, recordInsantiator, collection) {\n    this.map = new Map();\n    this.tableName = tableName;\n    this.recordInsantiator = recordInsantiator;\n    this._debugCollection = collection;\n  }\n  var _proto = RecordCache.prototype;\n  _proto.get = function (id) {\n    return this.map.get(id);\n  };\n  _proto.add = function (record) {\n    this.map.set(record.id, record);\n  };\n  _proto.delete = function (record) {\n    this.map.delete(record.id);\n  };\n  _proto.unsafeClear = function () {\n    this.map = new Map();\n  };\n  _proto.recordsFromQueryResult = function (result) {\n    var _this = this;\n    return result.map(function (res) {\n      return _this.recordFromQueryResult(res);\n    });\n  };\n  _proto.recordFromQueryResult = function (result) {\n    if ('string' === typeof result) {\n      return this._cachedModelForId(result);\n    }\n    return this._modelForRaw(result);\n  };\n  _proto.rawRecordsFromQueryResult = function (results) {\n    var _this2 = this;\n    return results.map(function (res) {\n      if ('string' === typeof res) {\n        return _this2._cachedModelForId(res)._raw;\n      }\n      var cachedRecord = _this2.map.get(res.id);\n      return cachedRecord ? cachedRecord._raw : res;\n    });\n  };\n  _proto._cachedModelForId = function (id) {\n    var record = this.map.get(id);\n    if (!record) {\n      var message = \"Record ID \".concat(this.tableName, \"#\").concat(id, \" was sent over the bridge, but it's not cached\");\n      _logger.default.error(message);\n\n      // Reaching this branch indicates a WatermelonDB/adapter bug. We should never get a record ID\n      // if we don't have it in our cache. This probably means that something crashed when adding to\n      // adapter-side cached record ID set. NozbeTeams telemetry indicates that this bug *does*\n      // nonetheless occur, so when it does, print out useful diagnostics and attempt to recover by\n      // resetting adapter-side cached set\n      try {\n        var adapter = this._debugCollection.database.adapter.underlyingAdapter;\n\n        // $FlowFixMe\n        if (adapter._clearCachedRecords) {\n          // $FlowFixMe\n          adapter._clearCachedRecords();\n        }\n\n        // $FlowFixMe\n        if (adapter._debugDignoseMissingRecord) {\n          // $FlowFixMe\n          adapter._debugDignoseMissingRecord(this.tableName, id);\n        }\n      } catch (error) {\n        _logger.default.warn(\"Ran into an error while running diagnostics:\");\n        _logger.default.warn(error);\n      }\n      throw new Error(message);\n    }\n    return record;\n  };\n  _proto._modelForRaw = function (raw, warnIfCached = true) {\n    // Sanity check: is this already cached?\n    var cachedRecord = this.map.get(raw.id);\n    if (cachedRecord) {\n      // This may legitimately happen if we previously got ID without a record and we cleared\n      // adapter-side cached record ID maps to recover\n      warnIfCached && _logger.default.warn(\"Record \".concat(this.tableName, \"#\").concat(cachedRecord.id, \" is cached, but full raw object was sent over the bridge\"));\n      return cachedRecord;\n    }\n\n    // Return new model\n    var newRecord = this.recordInsantiator(raw);\n    this.add(newRecord);\n    return newRecord;\n  };\n  return RecordCache;\n}();", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _rx = require(\"../utils/rx\");\nvar _invariant = _interopRequireDefault(require(\"../utils/common/invariant\"));\nvar _fp = require(\"../utils/fp\");\nvar _Result = require(\"../utils/fp/Result\");\nvar _Query = _interopRequireDefault(require(\"../Query\"));\nvar _RecordCache = _interopRequireDefault(require(\"./RecordCache\"));\nvar Collection = exports.default = /*#__PURE__*/function () {\n  /**\n   * `Model` subclass associated with this Collection\n   */\n\n  /**\n   * An `Rx.Subject` that emits a signal on every change (record creation/update/deletion) in\n   * this Collection.\n   *\n   * The emissions contain information about which record was changed and what the change was.\n   *\n   * Warning: You can easily introduce performance bugs in your application by using this method\n   * inappropriately. You generally should just use the `Query` API.\n   */\n\n  function Collection(database, ModelClass) {\n    var _this = this;\n    this.changes = new _rx.Subject();\n    this._subscribers = [];\n    this.database = database;\n    this.modelClass = ModelClass;\n    this._cache = new _RecordCache.default(ModelClass.table, function (raw) {\n      return new ModelClass(_this, raw);\n    }, this);\n  }\n\n  /**\n   * `Database` associated with this Collection.\n   */\n  var _proto = Collection.prototype;\n  /**\n   * Fetches the record with the given ID.\n   *\n   * If the record is not found, the Promise will reject.\n   */\n  _proto.find = function (id) {\n    return new Promise(function ($return) {\n      var _this2 = this;\n      return $return((0, _Result.toPromise)(function (callback) {\n        return _this2._fetchRecord(id, callback);\n      }));\n    }.bind(this));\n  }\n\n  /**\n   * Fetches the given record and then starts observing it.\n   *\n   * This is a convenience method that's equivalent to\n   * `collection.find(id)`, followed by `record.observe()`.\n   */;\n  _proto.findAndObserve = function (id) {\n    var _this3 = this;\n    return _rx.Observable.create(function (observer) {\n      var unsubscribe = null;\n      var unsubscribed = false;\n      _this3._fetchRecord(id, function (result) {\n        if (result.value) {\n          var record = result.value;\n          observer.next(record);\n          unsubscribe = record.experimentalSubscribe(function (isDeleted) {\n            if (!unsubscribed) {\n              isDeleted ? observer.complete() : observer.next(record);\n            }\n          });\n        } else {\n          // $FlowFixMe\n          observer.error(result.error);\n        }\n      });\n      return function () {\n        unsubscribed = true;\n        unsubscribe && unsubscribe();\n      };\n    });\n  }\n\n  /*:: query: ArrayOrSpreadFn<Clause, Query<Record>>  */\n  /**\n   * Returns a `Query` with conditions given.\n   *\n   * You can pass conditions as multiple arguments or a single array.\n   *\n   * See docs for details about the Query API.\n   */\n  // $FlowFixMe\n  ;\n  _proto.query = function (...args) {\n    var clauses = (0, _fp.fromArrayOrSpread)(args, 'Collection.query', 'Clause');\n    return new _Query.default(this, clauses);\n  }\n\n  /**\n   * Creates a new record.\n   * Pass a function to set attributes of the new record.\n   *\n   * Note: This method must be called within a Writer {@link Database#write}.\n   *\n   * @example\n   * ```js\n   * db.get(Tables.tasks).create(task => {\n   *   task.name = 'Task name'\n   * })\n   * ```\n   */;\n  _proto.create = function (recordBuilder = _fp.noop) {\n    return new Promise(function ($return, $error) {\n      var record;\n      this.database._ensureInWriter(\"Collection.create()\");\n      record = this.prepareCreate(recordBuilder);\n      return Promise.resolve(this.database.batch(record)).then(function () {\n        try {\n          return $return(record);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }, $error);\n    }.bind(this));\n  }\n\n  /**\n   * Prepares a new record to be created\n   *\n   * Use this to batch-execute multiple changes at once.\n   * @see {Collection#create}\n   * @see {Database#batch}\n   */;\n  _proto.prepareCreate = function (recordBuilder = _fp.noop) {\n    // $FlowFixMe\n    return this.modelClass._prepareCreate(this, recordBuilder);\n  }\n\n  /**\n   * Prepares a new record to be created, based on a raw object.\n   *\n   * Don't use this unless you know how RawRecords work in WatermelonDB. See docs for more details.\n   *\n   * This is useful as a performance optimization, when adding online-only features to an otherwise\n   * offline-first app, or if you're implementing your own sync mechanism.\n   */;\n  _proto.prepareCreateFromDirtyRaw = function (dirtyRaw) {\n    // $FlowFixMe\n    return this.modelClass._prepareCreateFromDirtyRaw(this, dirtyRaw);\n  }\n\n  /**\n   * Returns a disposable record, based on a raw object.\n   *\n   * A disposable record is a read-only record that **does not** exist in the actual database. It's\n   * not cached and cannot be saved in the database, updated, deleted, queried, or found by ID. It\n   * only exists for as long as you keep a reference to it.\n   *\n   * Don't use this unless you know how RawRecords work in WatermelonDB. See docs for more details.\n   *\n   * This is useful for adding online-only features to an otherwise offline-first app, or for\n   * temporary objects that are not meant to be persisted (as you can reuse existing Model helpers\n   * and compatible UI components to display a disposable record).\n   */;\n  _proto.disposableFromDirtyRaw = function (dirtyRaw) {\n    // $FlowFixMe\n    return this.modelClass._disposableFromDirtyRaw(this, dirtyRaw);\n  }\n\n  // *** Implementation details ***\n\n  // See: Query.fetch\n  ;\n  _proto._fetchQuery = function (query, callback) {\n    var _this4 = this;\n    this.database.adapter.underlyingAdapter.query(query.serialize(), function (result) {\n      return callback((0, _Result.mapValue)(function (rawRecords) {\n        return _this4._cache.recordsFromQueryResult(rawRecords);\n      }, result));\n    });\n  };\n  _proto._fetchIds = function (query, callback) {\n    this.database.adapter.underlyingAdapter.queryIds(query.serialize(), callback);\n  };\n  _proto._fetchCount = function (query, callback) {\n    this.database.adapter.underlyingAdapter.count(query.serialize(), callback);\n  };\n  _proto._unsafeFetchRaw = function (query, callback) {\n    this.database.adapter.underlyingAdapter.unsafeQueryRaw(query.serialize(), callback);\n  }\n\n  // Fetches exactly one record (See: Collection.find)\n  ;\n  _proto._fetchRecord = function (id, callback) {\n    var _this5 = this;\n    if ('string' !== typeof id) {\n      callback({\n        error: new Error(\"Invalid record ID \".concat(this.table, \"#\").concat(id))\n      });\n      return;\n    }\n    var cachedRecord = this._cache.get(id);\n    if (cachedRecord) {\n      callback({\n        value: cachedRecord\n      });\n      return;\n    }\n    this.database.adapter.underlyingAdapter.find(this.table, id, function (result) {\n      return callback((0, _Result.mapValue)(function (rawRecord) {\n        (0, _invariant.default)(rawRecord, \"Record \".concat(_this5.table, \"#\").concat(id, \" not found\"));\n        return _this5._cache.recordFromQueryResult(rawRecord);\n      }, result));\n    });\n  };\n  _proto._applyChangesToCache = function (operations) {\n    var _this6 = this;\n    operations.forEach(function ({\n      record: record,\n      type: type\n    }) {\n      if ('created' === type) {\n        record._preparedState = null;\n        _this6._cache.add(record);\n      } else if ('destroyed' === type) {\n        _this6._cache.delete(record);\n      }\n    });\n  };\n  _proto._notify = function (operations) {\n    this._subscribers.forEach(function ([subscriber]) {\n      subscriber(operations);\n    });\n    this.changes.next(operations);\n    operations.forEach(function ({\n      record: record,\n      type: type\n    }) {\n      if ('updated' === type) {\n        record._notifyChanged();\n      } else if ('destroyed' === type) {\n        record._notifyDestroyed();\n      }\n    });\n  };\n  /**\n   * Notifies `subscriber` on every change (record creation/update/deletion) in this Collection.\n   *\n   * Notifications contain information about which record was changed and what the change was.\n   * (Currently, subscribers are called before `changes` emissions, but this behavior might change)\n   *\n   * Warning: You can easily introduce performance bugs in your application by using this method\n   * inappropriately. You generally should just use the `Query` API.\n   */\n  _proto.experimentalSubscribe = function (subscriber, debugInfo) {\n    var _this7 = this;\n    var entry = [subscriber, debugInfo];\n    this._subscribers.push(entry);\n    return function () {\n      var idx = _this7._subscribers.indexOf(entry);\n      -1 !== idx && _this7._subscribers.splice(idx, 1);\n    };\n  };\n  return (0, _createClass2.default)(Collection, [{\n    key: \"db\",\n    get: function get() {\n      return this.database;\n    }\n\n    /**\n     * Table name associated with this Collection\n     */\n  }, {\n    key: \"table\",\n    get: function get() {\n      // $FlowFixMe\n      return this.modelClass.table;\n    }\n\n    /**\n     * Table schema associated with this Collection\n     */\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this.database.schema.tables[this.table];\n    }\n  }]);\n}();", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _Result = require(\"../utils/fp/Result\");\nvar DatabaseAdapterCompat = exports.default = /*#__PURE__*/function () {\n  function DatabaseAdapterCompat(adapter) {\n    this.underlyingAdapter = adapter;\n  }\n  var _proto = DatabaseAdapterCompat.prototype;\n  _proto.find = function (table, id) {\n    var _this = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this.underlyingAdapter.find(table, id, callback);\n    });\n  };\n  _proto.query = function (_query) {\n    var _this2 = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this2.underlyingAdapter.query(_query, callback);\n    });\n  };\n  _proto.queryIds = function (query) {\n    var _this3 = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this3.underlyingAdapter.queryIds(query, callback);\n    });\n  };\n  _proto.unsafeQueryRaw = function (query) {\n    var _this4 = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this4.underlyingAdapter.unsafeQueryRaw(query, callback);\n    });\n  };\n  _proto.count = function (query) {\n    var _this5 = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this5.underlyingAdapter.count(query, callback);\n    });\n  };\n  _proto.batch = function (operations) {\n    var _this6 = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this6.underlyingAdapter.batch(operations, callback);\n    });\n  };\n  _proto.getDeletedRecords = function (tableName) {\n    var _this7 = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this7.underlyingAdapter.getDeletedRecords(tableName, callback);\n    });\n  };\n  _proto.destroyDeletedRecords = function (tableName, recordIds) {\n    var _this8 = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this8.underlyingAdapter.destroyDeletedRecords(tableName, recordIds, callback);\n    });\n  };\n  _proto.unsafeLoadFromSync = function (jsonId) {\n    var _this9 = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this9.underlyingAdapter.unsafeLoadFromSync(jsonId, callback);\n    });\n  };\n  _proto.provideSyncJson = function (id, syncPullResultJson) {\n    var _this10 = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this10.underlyingAdapter.provideSyncJson(id, syncPullResultJson, callback);\n    });\n  };\n  _proto.unsafeResetDatabase = function () {\n    var _this11 = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this11.underlyingAdapter.unsafeResetDatabase(callback);\n    });\n  };\n  _proto.unsafeExecute = function (work) {\n    var _this12 = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this12.underlyingAdapter.unsafeExecute(work, callback);\n    });\n  };\n  _proto.getLocal = function (key) {\n    var _this13 = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this13.underlyingAdapter.getLocal(key, callback);\n    });\n  };\n  _proto.setLocal = function (key, value) {\n    var _this14 = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this14.underlyingAdapter.setLocal(key, value, callback);\n    });\n  };\n  _proto.removeLocal = function (key) {\n    var _this15 = this;\n    return (0, _Result.toPromise)(function (callback) {\n      return _this15.underlyingAdapter.removeLocal(key, callback);\n    });\n  }\n\n  // untyped - test-only code\n  ;\n  _proto.testClone = function (options) {\n    return new Promise(function ($return, $error) {\n      return Promise.resolve(this.underlyingAdapter.testClone(options)).then(function ($await_1) {\n        try {\n          // $FlowFixMe\n          return $return(new DatabaseAdapterCompat($await_1));\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }, $error);\n    }.bind(this));\n  };\n  return (0, _createClass2.default)(DatabaseAdapterCompat, [{\n    key: \"schema\",\n    get: function get() {\n      return this.underlyingAdapter.schema;\n    }\n  }, {\n    key: \"dbName\",\n    get: function get() {\n      return this.underlyingAdapter.dbName;\n    }\n  }, {\n    key: \"migrations\",\n    get: function get() {\n      return this.underlyingAdapter.migrations;\n    }\n  }]);\n}();", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _Collection = _interopRequireDefault(require(\"../../Collection\"));\nvar _common = require(\"../../utils/common\");\nvar CollectionMap = exports.default = /*#__PURE__*/function () {\n  function CollectionMap(db, modelClasses) {\n    var _this = this;\n    this.map = Object.create(null);\n    modelClasses.forEach(function (modelClass) {\n      var {\n        table: table\n      } = modelClass;\n      if ('production' !== process.env.NODE_ENV) {\n        // TODO: move these checks to Collection?\n        (0, _common.invariant)('string' === typeof table, \"Model class \".concat(modelClass.name, \" passed to Database constructor is missing \\\"static table = 'table_name'\\\"\"));\n        (0, _common.invariant)(db.schema.tables[table], \"Model class \".concat(modelClass.name, \" has static table defined that is missing in schema known by this database\"));\n      }\n      _this.map[table] = new _Collection.default(db, modelClass);\n    });\n    Object.freeze(this.map);\n  }\n  var _proto = CollectionMap.prototype;\n  _proto.get = function (tableName) {\n    return this.map[tableName] || null;\n  };\n  return CollectionMap;\n}();", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\nvar _common = require(\"../utils/common\");\n/* eslint-disable no-use-before-define */\nvar ReaderInterfaceImpl = /*#__PURE__*/function () {\n  function ReaderInterfaceImpl(queue, item) {\n    this.__workQueue = queue;\n    this.__workItem = item;\n  }\n  var _proto = ReaderInterfaceImpl.prototype;\n  _proto.__validateQueue = function () {\n    (0, _common.invariant)(this.__workQueue._queue[0] === this.__workItem, 'Illegal call on a reader/writer that should no longer be running');\n  };\n  _proto.callReader = function (reader) {\n    this.__validateQueue();\n    return this.__workQueue.subAction(reader);\n  };\n  return ReaderInterfaceImpl;\n}();\nvar WriterInterfaceImpl = /*#__PURE__*/function (_ReaderInterfaceImpl) {\n  function WriterInterfaceImpl() {\n    return _ReaderInterfaceImpl.apply(this, arguments) || this;\n  }\n  (0, _inheritsLoose2.default)(WriterInterfaceImpl, _ReaderInterfaceImpl);\n  var _proto2 = WriterInterfaceImpl.prototype;\n  _proto2.callWriter = function (writer) {\n    this.__validateQueue();\n    return this.__workQueue.subAction(writer);\n  };\n  _proto2.batch = function (...records) {\n    this.__validateQueue();\n    return this.__workQueue._db.batch(records);\n  };\n  return WriterInterfaceImpl;\n}(ReaderInterfaceImpl);\nvar actionInterface = function (queue, item) {\n  return item.isWriter ? new WriterInterfaceImpl(queue, item) : new ReaderInterfaceImpl(queue, item);\n};\nvar WorkQueue = exports.default = /*#__PURE__*/function () {\n  function WorkQueue(db) {\n    this._queue = [];\n    this._subActionIncoming = false;\n    this._db = db;\n  }\n  var _proto3 = WorkQueue.prototype;\n  _proto3.enqueue = function (work, description, isWriter) {\n    var _this = this;\n    // If a subAction was scheduled using subAction(), database.write/read() calls skip the line\n    if (this._subActionIncoming) {\n      this._subActionIncoming = false;\n      var currentWork = this._queue[0];\n      if (!currentWork.isWriter) {\n        (0, _common.invariant)(!isWriter, 'Cannot call a writer block from a reader block');\n      }\n      return work(actionInterface(this, currentWork));\n    }\n    return new Promise(function (resolve, reject) {\n      var workItem = {\n        work: work,\n        isWriter: isWriter,\n        resolve: resolve,\n        reject: reject,\n        description: description\n      };\n      if ('production' !== process.env.NODE_ENV && _this._queue.length) {\n        setTimeout(function () {\n          var queue = _this._queue;\n          var current = queue[0];\n          if (current === workItem || !queue.includes(workItem)) {\n            return;\n          }\n          var enqueuedKind = isWriter ? 'writer' : 'reader';\n          var currentKind = current.isWriter ? 'writer' : 'reader';\n          _common.logger.warn(\"The \".concat(enqueuedKind, \" you're trying to run (\").concat(description || 'unnamed', \") can't be performed yet, because there are \").concat(queue.length, \" other readers/writers in the queue.\\n\\nCurrent \").concat(currentKind, \": \").concat(current.description || 'unnamed', \".\\n\\nIf everything is working fine, you can safely ignore this message (queueing is working as expected). But if your readers/writers are not running, it's because the current \").concat(currentKind, \" is stuck.\\nRemember that if you're calling a reader/writer from another reader/writer, you must use callReader()/callWriter(). See docs for more details.\"));\n          _common.logger.log(\"Enqueued \".concat(enqueuedKind, \":\"), work);\n          _common.logger.log(\"Running \".concat(currentKind, \":\"), current.work);\n        }, 1500);\n      }\n      _this._queue.push(workItem);\n      if (1 === _this._queue.length) {\n        _this._executeNext();\n      }\n    });\n  };\n  _proto3.subAction = function (work) {\n    try {\n      this._subActionIncoming = true;\n      var promise = work();\n      (0, _common.invariant)(!this._subActionIncoming, 'callReader/callWriter call must call a reader/writer synchronously');\n      return promise;\n    } catch (error) {\n      this._subActionIncoming = false;\n      return Promise.reject(error);\n    }\n  };\n  _proto3._executeNext = function () {\n    return new Promise(function ($return, $error) {\n      var _this2, workItem, work, resolve, reject, isWriter, workPromise;\n      _this2 = this;\n      workItem = this._queue[0];\n      ({\n        work: work,\n        resolve: resolve,\n        reject: reject,\n        isWriter: isWriter\n      } = workItem);\n      var $Try_2_Post = function () {\n        try {\n          this._queue.shift();\n          if (this._queue.length) {\n            setTimeout(function () {\n              return _this2._executeNext();\n            }, 0);\n          }\n          return $return();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this);\n      var $Try_2_Catch = function $Try_2_Catch(error) {\n        try {\n          reject(error);\n          return $Try_2_Post();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      };\n      try {\n        workPromise = work(actionInterface(this, workItem));\n        if ('production' !== process.env.NODE_ENV) {\n          (0, _common.invariant)(workPromise instanceof Promise, \"The function passed to database.\".concat(isWriter ? 'write' : 'read', \"() or a method marked as @\").concat(isWriter ? 'writer' : 'reader', \" must be asynchronous (marked as 'async' or always returning a promise) (in: \").concat(workItem.description || 'unnamed', \")\"));\n        }\n        return Promise.resolve(workPromise).then(function ($await_3) {\n          try {\n            resolve($await_3);\n            return $Try_2_Post();\n          } catch ($boundEx) {\n            return $Try_2_Catch($boundEx);\n          }\n        }, $Try_2_Catch);\n      } catch (error) {\n        $Try_2_Catch(error)\n      }\n    }.bind(this));\n  };\n  _proto3._abortPendingWork = function () {\n    (0, _common.invariant)(1 <= this._queue.length, '_abortPendingWork can only be called from a reader/writer');\n    var workToAbort = this._queue.splice(1); // leave only the caller on the queue\n    workToAbort.forEach(function ({\n      reject: reject\n    }) {\n      reject(new Error('Reader/writer has been aborted because the database was reset'));\n    });\n  };\n  return (0, _createClass2.default)(WorkQueue, [{\n    key: \"isWriterRunning\",\n    get: function get() {\n      var [item] = this._queue;\n      return Boolean(item && item.isWriter);\n    }\n  }]);\n}();", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n/* eslint-disable getter-return */\n// Used as a placeholder during reset database to catch illegal\n// adapter calls\nvar throwError = function (name) {\n  throw new Error(\"Cannot call database.adapter.\".concat(name, \" while the database is being reset\"));\n};\nvar ErrorAdapter = exports.default = /*#__PURE__*/function () {\n  function ErrorAdapter() {\n    var _this = this;\n    ['find', 'query', 'queryIds', 'count', 'batch', 'getDeletedRecords', 'destroyDeletedRecords', 'unsafeResetDatabase', 'getLocal', 'setLocal', 'removeLocal', 'testClone'].forEach(function (name) {\n      // $FlowFixMe\n      _this[name] = function () {\n        return throwError(name);\n      };\n    });\n  }\n  return (0, _createClass2.default)(ErrorAdapter, [{\n    key: \"underlyingAdapter\",\n    get: function get() {\n      throwError('underlyingAdapter');\n    }\n  }, {\n    key: \"schema\",\n    get: function get() {\n      throwError('schema');\n    }\n  }, {\n    key: \"migrations\",\n    get: function get() {\n      throwError('migrations');\n    }\n  }]);\n}();", "\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nexports.localStorageKey = localStorageKey;\nvar _common = require(\"../../utils/common\");\nfunction localStorageKey(name) {\n  return name;\n}\nvar LocalStorage = exports.default = /*#__PURE__*/function () {\n  function LocalStorage(database) {\n    this._db = database;\n  }\n\n  // Get value from LocalStorage (returns value deserialized from JSON)\n  // Returns `undefined` if not found\n  var _proto = LocalStorage.prototype;\n  _proto.get = function (key) {\n    return new Promise(function ($return, $error) {\n      var json;\n      return Promise.resolve(this._db.adapter.getLocal(key)).then(function ($await_1) {\n        try {\n          json = $await_1;\n          return $return(null == json ? undefined : JSON.parse(json));\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }, $error);\n    }.bind(this));\n  }\n\n  // Experimental: Same as get(), but can be called synchronously\n  ;\n  _proto._getSync = function (key, callback) {\n    this._db.adapter.underlyingAdapter.getLocal(key, function (result) {\n      var json = result.value ? result.value : undefined;\n      var value = null == json ? undefined : JSON.parse(json);\n      callback(value);\n    });\n  }\n\n  // Set value to LocalStorage\n  // Only JSON-serializable values are allowed and well-behaved:\n  // strings, numbers, booleans, and null; as well as arrays and objects only containing those\n  //\n  // Serializing other values will either throw an error (e.g. function passed) or be serialized\n  // such that deserializing it won't yield an equal value (e.g. NaN to null, Dates to a string)\n  // See details:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#description\n  ;\n  _proto.set = function (key, value) {\n    return new Promise(function ($return) {\n      var json = JSON.stringify(value);\n      (0, _common.invariant)('string' === typeof json, 'Value not JSON-serializable');\n      return $return(this._db.adapter.setLocal(key, json));\n    }.bind(this));\n  };\n  _proto.remove = function (key) {\n    return new Promise(function ($return) {\n      return $return(this._db.adapter.removeLocal(key));\n    }.bind(this));\n  };\n  return LocalStorage;\n}();", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nexports.setExperimentalAllowsFatalError = setExperimentalAllowsFatalError;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _rx = require(\"../utils/rx\");\nvar _common = require(\"../utils/common\");\nvar _fp = require(\"../utils/fp\");\nvar _compat = _interopRequireDefault(require(\"../adapters/compat\"));\nvar _CollectionMap = _interopRequireDefault(require(\"./CollectionMap\"));\nvar _WorkQueue = _interopRequireDefault(require(\"./WorkQueue\"));\nvar experimentalAllowsFatalError = false;\nfunction setExperimentalAllowsFatalError() {\n  experimentalAllowsFatalError = true;\n}\nvar Database = exports.default = /*#__PURE__*/function () {\n  /**\n   * Database's adapter - the low-level connection with the underlying database (e.g. SQLite)\n   *\n   * Unless you understand WatermelonDB's internals, you SHOULD NOT use adapter directly.\n   * Running queries, or updating/deleting records on the adapter will corrupt the in-memory cache\n   * if special care is not taken\n   */\n\n  // (experimental) if true, Database is in a broken state and should not be used anymore\n\n  function Database(options) {\n    this._workQueue = new _WorkQueue.default(this);\n    this._isBroken = false;\n    this._pendingNotificationBatches = 0;\n    this._pendingNotificationChanges = [];\n    this._subscribers = [];\n    this._resetCount = 0;\n    this._isBeingReset = false;\n    this.experimentalIsVerbose = false;\n    var {\n      adapter: adapter,\n      modelClasses: modelClasses\n    } = options;\n    if ('production' !== process.env.NODE_ENV) {\n      (0, _common.invariant)(adapter, \"Missing adapter parameter for new Database()\");\n      (0, _common.invariant)(modelClasses && Array.isArray(modelClasses), \"Missing modelClasses parameter for new Database()\");\n    }\n    this.adapter = new _compat.default(adapter);\n    this.schema = adapter.schema;\n    this.collections = new _CollectionMap.default(this, modelClasses);\n  }\n\n  /**\n   * Returns a `Collection` for a given table name\n   */\n  var _proto = Database.prototype;\n  _proto.get = function (tableName) {\n    return this.collections.get(tableName);\n  }\n\n  /**\n   * Returns a `LocalStorage` (WatermelonDB-based localStorage/AsyncStorage alternative)\n   */;\n  /*:: batch: ArrayOrSpreadFn<?Model | false, Promise<void>>  */\n  /**\n   * Executes multiple prepared operations\n   *\n   * Pass a list (or array) of operations like so:\n   * - `collection.prepareCreate(...)`\n   * - `record.prepareUpdate(...)`\n   * - `record.prepareMarkAsDeleted()` (or `record.prepareDestroyPermanently()`)\n   *\n   * Note that falsy values (null, undefined, false) passed to batch are simply ignored\n   * so you can use patterns like `.batch(condition && record.prepareUpdate(...))` for convenience.\n   *\n   * Note: This method must be called within a Writer {@link Database#write}.\n   */\n  // $FlowFixMe\n  _proto.batch = function (...records) {\n    return new Promise(function ($return, $error) {\n      var _this, actualRecords, batchOperations, changeNotifications, debugInfo, changes;\n      _this = this;\n      actualRecords = (0, _fp.fromArrayOrSpread)(records, 'Database.batch', 'Model');\n      this._ensureInWriter(\"Database.batch()\");\n\n      // performance critical - using mutations\n      batchOperations = [];\n      changeNotifications = {};\n      actualRecords.forEach(function (record) {\n        if (!record) {\n          return;\n        }\n        var preparedState = record._preparedState;\n        if (!preparedState) {\n          (0, _common.invariant)('disposable' !== record._raw._status, \"Cannot batch a disposable record\");\n          throw new Error(\"Cannot batch a record that doesn't have a prepared create/update/delete\");\n        }\n        var raw = record._raw;\n        var {\n          id: id\n        } = raw; // faster than Model.id\n        var {\n          table: table\n        } = record.constructor; // faster than Model.table\n\n        var changeType;\n        if ('update' === preparedState) {\n          batchOperations.push(['update', table, raw]);\n          changeType = 'updated';\n        } else if ('create' === preparedState) {\n          batchOperations.push(['create', table, raw]);\n          changeType = 'created';\n        } else if ('markAsDeleted' === preparedState) {\n          batchOperations.push(['markAsDeleted', table, id]);\n          changeType = 'destroyed';\n        } else if ('destroyPermanently' === preparedState) {\n          batchOperations.push(['destroyPermanently', table, id]);\n          changeType = 'destroyed';\n        } else {\n          (0, _common.invariant)(false, 'bad preparedState');\n        }\n        if ('create' !== preparedState) {\n          // We're (unsafely) assuming that batch will succeed and removing the \"pending\" state so that\n          // subsequent changes to the record don't trip up the invariant\n          // TODO: What if this fails?\n          record._preparedState = null;\n        }\n        if (!changeNotifications[table]) {\n          changeNotifications[table] = [];\n        }\n        changeNotifications[table].push({\n          record: record,\n          type: changeType\n        });\n      });\n      return Promise.resolve(this.adapter.batch(batchOperations)).then(function () {\n        try {\n          // Debug info\n          if (this.experimentalIsVerbose) {\n            debugInfo = batchOperations.map(function ([type, table, rawOrId]) {\n              switch (type) {\n                case 'create':\n                case 'update':\n                  return \"\".concat(type, \" \").concat(table, \"#\").concat(rawOrId.id);\n                case 'markAsDeleted':\n                case 'destroyPermanently':\n                  return \"\".concat(type, \" \").concat(table, \"#\").concat(rawOrId);\n                default:\n                  return \"\".concat(type, \"???\");\n              }\n            }).join(', ');\n            _common.logger.debug(\"batch: \".concat(debugInfo));\n          }\n\n          // NOTE: We must make two passes to ensure all changes to caches are applied before subscribers are called\n          changes = Object.entries(changeNotifications);\n          changes.forEach(function ([table, changeSet]) {\n            _this.collections.get(table)._applyChangesToCache(changeSet);\n          });\n          this._notify(changes);\n          return $return(undefined); // shuts up flow\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  };\n  _proto._notify = function (changes) {\n    var _this2 = this;\n    if (0 < this._pendingNotificationBatches) {\n      this._pendingNotificationChanges.push(changes);\n      return;\n    }\n    var affectedTables = new Set(changes.map(function ([table]) {\n      return table;\n    }));\n    this._subscribers.forEach(function ([tables, subscriber]) {\n      if (tables.some(function (table) {\n        return affectedTables.has(table);\n      })) {\n        subscriber();\n      }\n    });\n    changes.forEach(function ([table, changeSet]) {\n      _this2.collections.get(table)._notify(changeSet);\n    });\n  };\n  _proto.experimentalBatchNotifications = function (work) {\n    return new Promise(function ($return, $error) {\n      var $Try_1_Finally = function ($Try_1_Exit) {\n        return function ($Try_1_Value) {\n          try {\n            this._pendingNotificationBatches -= 1;\n            if (0 === this._pendingNotificationBatches) {\n              changes = this._pendingNotificationChanges;\n              this._pendingNotificationChanges = [];\n              changes.forEach(function (_changes) {\n                return _this3._notify(_changes);\n              });\n            }\n            return $Try_1_Exit && $Try_1_Exit.call(this, $Try_1_Value);\n          } catch ($boundEx) {\n            return $error($boundEx);\n          }\n        }.bind(this);\n      }.bind(this);\n      var _this3, result, changes;\n      _this3 = this;\n      var $Try_1_Catch = function $Try_1_Catch($exception_2) {\n        try {\n          throw $exception_2;\n        } catch ($boundEx) {\n          return $Try_1_Finally($error)($boundEx);\n        }\n      };\n      // TODO: Document & add tests if this proves useful\n      try {\n        this._pendingNotificationBatches += 1;\n        return Promise.resolve(work()).then(function ($await_6) {\n          try {\n            result = $await_6;\n            return $Try_1_Finally($return)(result);\n          } catch ($boundEx) {\n            return $Try_1_Catch($boundEx);\n          }\n        }, $Try_1_Catch);\n      } catch ($exception_2) {\n        $Try_1_Catch($exception_2)\n      }\n    }.bind(this));\n  }\n\n  /**\n   * Schedules a Writer\n   *\n   * Writer is a block of code, inside of which you can modify the database\n   * (call `Collection.create`, `Model.update`, `Database.batch` and so on).\n   *\n   * In a Writer, you're guaranteed that no other Writer is simultaneously executing. Therefore, you\n   * can rely on the results of queries and other asynchronous operations - they won't change for\n   * the duration of this Writer (except if changed by it).\n   *\n   * To call another Writer (or Reader) from this one without deadlocking, use `callWriter`\n   * (or `callReader`).\n   *\n   * See docs for more details and a practical guide.\n   *\n   * @param work - Block of code to execute\n   * @param [description] - Debug description of this Writer\n   */;\n  _proto.write = function (work, description) {\n    return this._workQueue.enqueue(work, description, true);\n  }\n\n  /**\n   * Schedules a Reader\n   *\n   * In a Reader, you're guaranteed that no Writer is running at the same time. Therefore, you can\n   * run many queries or other asynchronous operations, and you can rely on their results - they\n   * won't change for the duration of this Reader. However, other Readers might run concurrently.\n   *\n   * To call another Reader from this one, use `callReader`\n   *\n   * See docs for more details and a practical guide.\n   *\n   * @param work - Block of code to execute\n   * @param [description] - Debug description of this Reader\n   */;\n  _proto.read = function (work, description) {\n    return this._workQueue.enqueue(work, description, false);\n  }\n\n  /**\n   * Returns an `Observable` that emits a signal (`null`) immediately, and on every change in\n   * any of the passed tables.\n   *\n   * A set of changes made is passed with the signal, with an array of changes per-table\n   * (Currently, if changes are made to multiple different tables, multiple signals will be emitted,\n   * even if they're made with a batch. However, this behavior might change. Use Rx to debounce,\n   * throttle, merge as appropriate for your use case.)\n   *\n   * Warning: You can easily introduce performance bugs in your application by using this method\n   * inappropriately.\n   */;\n  _proto.withChangesForTables = function (tables) {\n    var _this4 = this;\n    var changesSignals = tables.map(function (table) {\n      return _this4.collections.get(table).changes;\n    });\n    return _rx.merge.apply(void 0, (0, _toConsumableArray2.default)(changesSignals)).pipe((0, _rx.startWith)(null));\n  };\n  /**\n   * Notifies `subscriber` on change in any of the passed tables.\n   *\n   * A single notification will be sent per `database.batch()` call.\n   * (Currently, no details about the changes made are provided, only a signal, but this behavior\n   * might change. Currently, subscribers are called before `withChangesForTables`).\n   *\n   * Warning: You can easily introduce performance bugs in your application by using this method\n   * inappropriately.\n   */\n  _proto.experimentalSubscribe = function (tables, subscriber, debugInfo) {\n    var _this5 = this;\n    if (!tables.length) {\n      return _fp.noop;\n    }\n    var entry = [tables, subscriber, debugInfo];\n    this._subscribers.push(entry);\n    return function () {\n      var idx = _this5._subscribers.indexOf(entry);\n      -1 !== idx && _this5._subscribers.splice(idx, 1);\n    };\n  };\n  /**\n   * Resets the database\n   *\n   * This permanently deletes the database (all records, metadata, and `LocalStorage`) and sets\n   * up an empty database.\n   *\n   * Special care must be taken to safely reset the database. Ideally, you should reset your app\n   * to an empty / \"logging out\" state while doing this. Specifically:\n   *\n   * - You MUST NOT hold onto Watermelon records other than this `Database`. Do not keep references\n   *   to records, collections, or any other objects from before database reset\n   * - You MUST NOT observe any Watermelon state. All Database, Collection, Query, and Model\n   *   observers/subscribers should be disposed of before resetting\n   * - You SHOULD NOT have any pending (queued) Readers or Writers. Pending work will be aborted\n   *   (rejected with an error)\n   */\n  _proto.unsafeResetDatabase = function () {\n    return new Promise(function ($return, $error) {\n      var $Try_3_Finally = function ($Try_3_Exit) {\n        return function ($Try_3_Value) {\n          try {\n            this._isBeingReset = false;\n            return $Try_3_Exit && $Try_3_Exit.call(this, $Try_3_Value);\n          } catch ($boundEx) {\n            return $error($boundEx);\n          }\n        }.bind(this);\n      }.bind(this);\n      var adapter, ErrorAdapter;\n      this._ensureInWriter(\"Database.unsafeResetDatabase()\");\n      var $Try_3_Post = function $Try_3_Post() {\n        try {\n          return $return();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      };\n      var $Try_3_Catch = function $Try_3_Catch($exception_4) {\n        try {\n          throw $exception_4;\n        } catch ($boundEx) {\n          return $Try_3_Finally($error)($boundEx);\n        }\n      };\n      try {\n        this._isBeingReset = true;\n        // First kill actions, to ensure no more traffic to adapter happens\n        this._workQueue._abortPendingWork();\n\n        // Kill ability to call adapter methods during reset (to catch bugs if someone does this)\n        ({\n          adapter: adapter\n        } = this);\n        ErrorAdapter = require('../adapters/error').default;\n        this.adapter = new ErrorAdapter();\n\n        // Check for illegal subscribers\n        if (this._subscribers.length) {\n          // TODO: This should be an error, not a console.log, but actually useful diagnostics are necessary for this to work, otherwise people will be confused\n          // eslint-disable-next-line no-console\n          console.log(\"Application error! Unexpected \".concat(this._subscribers.length, \" Database subscribers were detected during database.unsafeResetDatabase() call. App should not hold onto subscriptions or Watermelon objects while resetting database.\"));\n          // eslint-disable-next-line no-console\n          console.log(this._subscribers);\n          this._subscribers = [];\n        }\n\n        // Clear the database\n        return Promise.resolve(adapter.unsafeResetDatabase()).then(function () {\n          try {\n            // Only now clear caches, since there may have been queued fetches from DB still bringing in items to cache\n            Object.values(this.collections.map).forEach(function (collection) {\n              // $FlowFixMe\n              collection._cache.unsafeClear();\n            });\n\n            // Restore working Database\n            this._resetCount += 1;\n            this.adapter = adapter;\n            return $Try_3_Finally($Try_3_Post)();\n          } catch ($boundEx) {\n            return $Try_3_Catch($boundEx);\n          }\n        }.bind(this), $Try_3_Catch);\n      } catch ($exception_4) {\n        $Try_3_Catch($exception_4)\n      }\n    }.bind(this));\n  }\n\n  // (experimental) if true, Models will print to console diagnostic information on every\n  // prepareCreate/Update/Delete call, as well as on commit (Database.batch() call). Note that this\n  // has a significant performance impact so should only be enabled when debugging.\n  ;\n  _proto._ensureInWriter = function (debugName) {\n    (0, _common.invariant)(this._workQueue.isWriterRunning, \"\".concat(debugName, \" can only be called from inside of a Writer. See docs for more details.\"));\n  }\n\n  // (experimental) puts Database in a broken state\n  // TODO: Not used anywhere yet\n  ;\n  _proto._fatalError = function (error) {\n    if (!experimentalAllowsFatalError) {\n      _common.logger.warn('Database is now broken, but experimentalAllowsFatalError has not been enabled to do anything about it...');\n      return;\n    }\n    this._isBroken = true;\n    _common.logger.error('Database is broken. App must be reloaded before continuing.');\n\n    // TODO: Passing this to an adapter feels wrong, but it's tricky.\n    // $FlowFixMe\n    if (this.adapter.underlyingAdapter._fatalError) {\n      // $FlowFixMe\n      this.adapter.underlyingAdapter._fatalError(error);\n    }\n  };\n  return (0, _createClass2.default)(Database, [{\n    key: \"localStorage\",\n    get: function get() {\n      if (!this._localStorage) {\n        var LocalStorageClass = require('./LocalStorage').default;\n        this._localStorage = new LocalStorageClass(this);\n      }\n      return this._localStorage;\n    }\n  }]);\n}();", "\"use strict\";\n\nexports.__esModule = true;\nexports.addToRawSet = addToRawSet;\nexports.setRawColumnChange = setRawColumnChange;\nfunction addToRawSet(rawSet, value) {\n  var array = rawSet ? rawSet.split(',') : [];\n  var set = new Set(array);\n  set.add(value);\n  return Array.from(set).join(',');\n}\n\n// Mutates `rawRecord` to mark `columName` as modified for sync purposes\nfunction setRawColumnChange(rawRecord, columnName) {\n  rawRecord._changed = addToRawSet(rawRecord._changed, columnName);\n  if ('created' !== rawRecord._status) {\n    rawRecord._status = 'updated';\n  }\n}", "\"use strict\";\n\nexports.__esModule = true;\nexports.createTimestampsFor = void 0;\nexports.fetchDescendants = fetchDescendants;\nvar _fp = require(\"../utils/fp\");\nvar Q = _interopRequireWildcard(require(\"../QueryDescription\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nvar createTimestampsFor = exports.createTimestampsFor = function (model) {\n  var date = Date.now();\n  var timestamps = {};\n  if ('createdAt' in model) {\n    timestamps.created_at = date;\n  }\n  if ('updatedAt' in model) {\n    timestamps.updated_at = date;\n  }\n  return timestamps;\n};\nfunction getChildrenQueries(model) {\n  var associationsList = Object.entries(model.constructor.associations);\n  var hasManyAssociations = associationsList.filter(function ([, value]) {\n    return 'has_many' === value.type;\n  });\n  var childrenQueries = hasManyAssociations.map(function ([key, value]) {\n    var childCollection = model.collections.get(key);\n    return childCollection.query(Q.where(value.foreignKey, model.id));\n  });\n  return childrenQueries;\n}\nfunction fetchDescendantsInner(model) {\n  return new Promise(function ($return, $error) {\n    var childPromise, childrenQueries, results;\n    childPromise = function (query) {\n      return new Promise(function ($return, $error) {\n        var children, grandchildren;\n        return Promise.resolve(query.fetch()).then(function ($await_1) {\n          try {\n            children = $await_1;\n            return Promise.resolve((0, _fp.allPromises)(fetchDescendantsInner, children)).then(function ($await_2) {\n              try {\n                grandchildren = $await_2;\n                return $return((0, _fp.unnest)(grandchildren).concat(children));\n              } catch ($boundEx) {\n                return $error($boundEx);\n              }\n            }, $error);\n          } catch ($boundEx) {\n            return $error($boundEx);\n          }\n        }, $error);\n      });\n    };\n    childrenQueries = getChildrenQueries(model);\n    return Promise.resolve((0, _fp.allPromises)(childPromise, childrenQueries)).then(function ($await_3) {\n      try {\n        results = $await_3;\n        return $return((0, _fp.unnest)(results));\n      } catch ($boundEx) {\n        return $error($boundEx);\n      }\n    }, $error);\n  });\n}\nfunction fetchDescendants(model) {\n  return new Promise(function ($return, $error) {\n    var descendants;\n    return Promise.resolve(fetchDescendantsInner(model)).then(function ($await_4) {\n      try {\n        descendants = $await_4;\n        // We need to deduplicate because we can have a child accessible through multiple parents\n        // TODO: Use fp/unique after updating it not to suck\n        return $return(Array.from(new Set(descendants)));\n      } catch ($boundEx) {\n        return $error($boundEx);\n      }\n    }, $error);\n  });\n}", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.associations = associations;\nexports.default = void 0;\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _rx = require(\"../utils/rx\");\nvar _logger = _interopRequireDefault(require(\"../utils/common/logger\"));\nvar _invariant = _interopRequireDefault(require(\"../utils/common/invariant\"));\nvar _ensureSync = _interopRequireDefault(require(\"../utils/common/ensureSync\"));\nvar _fromPairs = _interopRequireDefault(require(\"../utils/fp/fromPairs\"));\nvar _noop = _interopRequireDefault(require(\"../utils/fp/noop\"));\nvar _Schema = require(\"../Schema\");\nvar _RawRecord = require(\"../RawRecord\");\nvar _helpers = require(\"../sync/helpers\");\nvar _helpers2 = require(\"./helpers\");\n/**\n * Sync status of this record:\n *\n * - `synced` - up to date as of last sync\n * - `created` - locally created, not yet pushed\n * - `updated` - locally updated, not yet pushed\n * - `deleted` - locally marked as deleted, not yet pushed\n * - `disposable` - read-only, memory-only, not part of sync, MUST NOT appear in a persisted record\n */\n// TODO: Refactor associations API and ideally get rid of this in favor of plain arrays/objects\nfunction associations(...associationList) {\n  return (0, _fromPairs.default)(associationList);\n}\nvar Model = exports.default = /*#__PURE__*/function () {\n  // *** Implementation details ***\n\n  // Don't use this directly! Use `collection.create()`\n  function Model(collection, raw) {\n    this._isEditing = false;\n    this._preparedState = null;\n    this.__changes = null;\n    this._subscribers = [];\n    this.collection = collection;\n    this._raw = raw;\n  }\n  var _proto = Model.prototype;\n  /**\n   * This must be set in Model subclasses to the name of associated database table\n   */\n  /**\n   * This can be set in Model subclasses to define (parent/child) relationships between different\n   * Models.\n   *\n   * See docs for more details.\n   */\n  // Used by withObservables to differentiate between object types\n  _proto._getChanges = function () {\n    if (!this.__changes) {\n      // initializing lazily - it has non-trivial perf impact on very large collections\n      this.__changes = new _rx.BehaviorSubject(this);\n    }\n    return this.__changes;\n  }\n\n  /**\n   * Record's ID\n   */;\n  /**\n   * Modifies the record.\n   * Pass a function to set attributes of the new record.\n   *\n   * Updates `updateAt` field (if available)\n   *\n   * Note: This method must be called within a Writer {@link Database#write}.\n   *\n   * * @example\n   * ```js\n   * someTask.create(task => {\n   *   task.name = 'New name'\n   * })\n   */\n  _proto.update = function (recordUpdater = _noop.default) {\n    return new Promise(function ($return, $error) {\n      var record;\n      this.__ensureInWriter(\"Model.update()\");\n      record = this.prepareUpdate(recordUpdater);\n      return Promise.resolve(this.db.batch(this)).then(function () {\n        try {\n          return $return(record);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }, $error);\n    }.bind(this));\n  }\n\n  /**\n   * Prepares record to be updated\n   *\n   * Use this to batch-execute multiple changes at once.\n   * Note: Prepared changes must be executed by **synchronously** passing them to `database.batch()`\n   * @see {Model#update}\n   * @see {Database#batch}\n   */;\n  _proto.prepareUpdate = function (recordUpdater = _noop.default) {\n    var _this = this;\n    (0, _invariant.default)(!this._preparedState, \"Cannot update a record with pending changes (\".concat(this.__debugName, \")\"));\n    this.__ensureNotDisposable(\"Model.prepareUpdate()\");\n    this._isEditing = true;\n\n    // Touch updatedAt (if available)\n    if ('updatedAt' in this) {\n      this._setRaw((0, _Schema.columnName)('updated_at'), Date.now());\n    }\n\n    // Perform updates\n    (0, _ensureSync.default)(recordUpdater(this));\n    this._isEditing = false;\n    this._preparedState = 'update';\n\n    // TODO: `process.nextTick` doesn't work on React Native\n    // We could polyfill with setImmediate, but it doesn't have the same effect — test and enseure\n    // it would actually work for this purpose\n    // TODO: Also add to other prepared changes\n    if ('production' !== process.env.NODE_ENV && 'undefined' !== typeof process && process && process.nextTick) {\n      process.nextTick(function () {\n        (0, _invariant.default)('update' !== _this._preparedState, \"record.prepareUpdate was called on \".concat(_this.__debugName, \" but wasn't sent to batch() synchronously -- this is bad!\"));\n      });\n    }\n    this.__logVerbose('prepareUpdate');\n    return this;\n  }\n\n  /**\n   * Marks this record as deleted (it will be deleted permanently after sync)\n   *\n   * Note: This method must be called within a Writer {@link Database#write}.\n   */;\n  _proto.markAsDeleted = function () {\n    return new Promise(function ($return, $error) {\n      this.__ensureInWriter(\"Model.markAsDeleted()\");\n      this.__ensureNotDisposable(\"Model.markAsDeleted()\");\n      return Promise.resolve(this.db.batch(this.prepareMarkAsDeleted())).then(function () {\n        try {\n          return $return();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }, $error);\n    }.bind(this));\n  }\n\n  /**\n   * Prepares record to be marked as deleted\n   *\n   * Use this to batch-execute multiple changes at once.\n   * Note: Prepared changes must be executed by **synchronously** passing them to `database.batch()`\n   * @see {Model#markAsDeleted}\n   * @see {Database#batch}\n   */;\n  _proto.prepareMarkAsDeleted = function () {\n    (0, _invariant.default)(!this._preparedState, \"Cannot mark a record with pending changes as deleted (\".concat(this.__debugName, \")\"));\n    this.__ensureNotDisposable(\"Model.prepareMarkAsDeleted()\");\n    this._raw._status = 'deleted';\n    this._preparedState = 'markAsDeleted';\n    this.__logVerbose('prepareMarkAsDeleted');\n    return this;\n  }\n\n  /**\n   * Permanently deletes this record from the database\n   *\n   * Note: Do not use this when using Sync, as deletion will not be synced.\n   *\n   * Note: This method must be called within a Writer {@link Database#write}.\n   */;\n  _proto.destroyPermanently = function () {\n    return new Promise(function ($return, $error) {\n      this.__ensureInWriter(\"Model.destroyPermanently()\");\n      this.__ensureNotDisposable(\"Model.destroyPermanently()\");\n      return Promise.resolve(this.db.batch(this.prepareDestroyPermanently())).then(function () {\n        try {\n          return $return();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }, $error);\n    }.bind(this));\n  }\n\n  /**\n   * Prepares record to be permanently destroyed\n   *\n   * Note: Do not use this when using Sync, as deletion will not be synced.\n   *\n   * Use this to batch-execute multiple changes at once.\n   * Note: Prepared changes must be executed by **synchronously** passing them to `database.batch()`\n   * @see {Model#destroyPermanently}\n   * @see {Database#batch}\n   */;\n  _proto.prepareDestroyPermanently = function () {\n    (0, _invariant.default)(!this._preparedState, \"Cannot destroy permanently record with pending changes (\".concat(this.__debugName, \")\"));\n    this.__ensureNotDisposable(\"Model.prepareDestroyPermanently()\");\n    this._raw._status = 'deleted';\n    this._preparedState = 'destroyPermanently';\n    this.__logVerbose('prepareDestroyPermanently');\n    return this;\n  }\n\n  /**\n   * Marks this records and its descendants as deleted (they will be deleted permenently after sync)\n   *\n   * Descendants are determined by taking Model's `has_many` (children) associations, and then their\n   * children associations recursively.\n   *\n   * Note: This method must be called within a Writer {@link Database#write}.\n   */;\n  _proto.experimentalMarkAsDeleted = function () {\n    return new Promise(function ($return, $error) {\n      var records;\n      this.__ensureInWriter(\"Model.experimentalMarkAsDeleted()\");\n      this.__ensureNotDisposable(\"Model.experimentalMarkAsDeleted()\");\n      return Promise.resolve((0, _helpers2.fetchDescendants)(this)).then(function ($await_4) {\n        try {\n          records = $await_4;\n          records.forEach(function (model) {\n            return model.prepareMarkAsDeleted();\n          });\n          records.push(this.prepareMarkAsDeleted());\n          return Promise.resolve(this.db.batch(records)).then(function () {\n            try {\n              return $return();\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }, $error);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  }\n\n  /**\n   * Permanently deletes this record and its descendants from the database\n   *\n   * Descendants are determined by taking Model's `has_many` (children) associations, and then their\n   * children associations recursively.\n   *\n   * Note: Do not use this when using Sync, as deletion will not be synced.\n   *\n   * Note: This method must be called within a Writer {@link Database#write}.\n   */;\n  _proto.experimentalDestroyPermanently = function () {\n    return new Promise(function ($return, $error) {\n      var records;\n      this.__ensureInWriter(\"Model.experimentalDestroyPermanently()\");\n      this.__ensureNotDisposable(\"Model.experimentalDestroyPermanently()\");\n      return Promise.resolve((0, _helpers2.fetchDescendants)(this)).then(function ($await_6) {\n        try {\n          records = $await_6;\n          records.forEach(function (model) {\n            return model.prepareDestroyPermanently();\n          });\n          records.push(this.prepareDestroyPermanently());\n          return Promise.resolve(this.db.batch(records)).then(function () {\n            try {\n              return $return();\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }, $error);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  }\n\n  // *** Observing changes ***\n\n  /**\n   * Returns an `Rx.Observable` that emits a signal immediately upon subscription and then every time\n   * this record changes.\n   *\n   * Signals contain this record as its value for convenience.\n   *\n   * Emits `complete` signal if this record is deleted (marked as deleted or permanently destroyed)\n   */;\n  _proto.observe = function () {\n    (0, _invariant.default)('create' !== this._preparedState, \"Cannot observe uncommitted record (\".concat(this.__debugName, \")\"));\n    return this._getChanges();\n  }\n\n  /**\n   * Collection associated with this Model\n   */;\n  // TODO: protect batch,callWriter,... from being used outside a @reader/@writer\n  /**\n   * Convenience method that should ONLY be used by Model's `@writer`-decorated methods\n   *\n   * @see {Database#batch}\n   */\n  _proto.batch = function (...records) {\n    return this.db.batch(records);\n  }\n\n  /**\n   * Convenience method that should ONLY be used by Model's `@writer`-decorated methods\n   *\n   * @see {WriterInterface#callWriter}\n   */;\n  _proto.callWriter = function (action) {\n    return this.db._workQueue.subAction(action);\n  }\n\n  /**\n   * Convenience method that should ONLY be used by Model's `@writer`/`@reader`-decorated methods\n   *\n   * @see {ReaderInterface#callReader}\n   */;\n  _proto.callReader = function (action) {\n    return this.db._workQueue.subAction(action);\n  };\n  Model._prepareCreate = function (collection, recordBuilder) {\n    var record = new this(collection,\n    // sanitizedRaw sets id\n    (0, _RawRecord.sanitizedRaw)((0, _helpers2.createTimestampsFor)(this.prototype), collection.schema));\n    record._preparedState = 'create';\n    record._isEditing = true;\n    (0, _ensureSync.default)(recordBuilder(record));\n    record._isEditing = false;\n    record.__logVerbose('prepareCreate');\n    return record;\n  };\n  Model._prepareCreateFromDirtyRaw = function (collection, dirtyRaw) {\n    var record = new this(collection, (0, _RawRecord.sanitizedRaw)(dirtyRaw, collection.schema));\n    record._preparedState = 'create';\n    record.__logVerbose('prepareCreateFromDirtyRaw');\n    return record;\n  };\n  Model._disposableFromDirtyRaw = function (collection, dirtyRaw) {\n    var record = new this(collection, (0, _RawRecord.sanitizedRaw)(dirtyRaw, collection.schema));\n    record._raw._status = 'disposable';\n    record.__logVerbose('disposableFromDirtyRaw');\n    return record;\n  };\n  /**\n   * Notifies `subscriber` on every change (update/delete) of this record\n   *\n   * Notification contains a flag that indicates whether the change is due to deletion\n   * (Currently, subscribers are called after `changes` emissions, but this behavior might change)\n   */\n  _proto.experimentalSubscribe = function (subscriber, debugInfo) {\n    var _this2 = this;\n    var entry = [subscriber, debugInfo];\n    this._subscribers.push(entry);\n    return function () {\n      var idx = _this2._subscribers.indexOf(entry);\n      -1 !== idx && _this2._subscribers.splice(idx, 1);\n    };\n  };\n  _proto._notifyChanged = function () {\n    this._getChanges().next(this);\n    this._subscribers.forEach(function ([subscriber]) {\n      subscriber(false);\n    });\n  };\n  _proto._notifyDestroyed = function () {\n    this._getChanges().complete();\n    this._subscribers.forEach(function ([subscriber]) {\n      subscriber(true);\n    });\n  }\n\n  // TODO: Make this official API\n  ;\n  _proto._getRaw = function (rawFieldName) {\n    return this._raw[rawFieldName];\n  }\n\n  // TODO: Make this official API\n  ;\n  _proto._setRaw = function (rawFieldName, rawValue) {\n    this.__ensureCanSetRaw();\n    var valueBefore = this._raw[rawFieldName];\n    (0, _RawRecord.setRawSanitized)(this._raw, rawFieldName, rawValue, this.collection.schema.columns[rawFieldName]);\n    if (valueBefore !== this._raw[rawFieldName] && 'create' !== this._preparedState) {\n      (0, _helpers.setRawColumnChange)(this._raw, rawFieldName);\n    }\n  }\n\n  // Please don't use this unless you really understand how Watermelon Sync works, and thought long and\n  // hard about risks of inconsistency after sync\n  // TODO: Make this official API\n  ;\n  _proto._dangerouslySetRawWithoutMarkingColumnChange = function (rawFieldName, rawValue) {\n    this.__ensureCanSetRaw();\n    (0, _RawRecord.setRawSanitized)(this._raw, rawFieldName, rawValue, this.collection.schema.columns[rawFieldName]);\n  };\n  _proto.__ensureCanSetRaw = function () {\n    this.__ensureNotDisposable(\"Model._setRaw()\");\n    (0, _invariant.default)(this._isEditing, \"Not allowed to change record \".concat(this.__debugName, \" outside of create/update()\"));\n    (0, _invariant.default)(!this._getChanges().isStopped && 'deleted' !== this._raw._status, \"Not allowed to change deleted record \".concat(this.__debugName));\n  };\n  _proto.__ensureNotDisposable = function (debugName) {\n    (0, _invariant.default)('disposable' !== this._raw._status, \"\".concat(debugName, \" cannot be called on a disposable record \").concat(this.__debugName));\n  };\n  _proto.__ensureInWriter = function (debugName) {\n    this.db._ensureInWriter(\"\".concat(debugName, \" (\").concat(this.__debugName, \")\"));\n  };\n  _proto.__logVerbose = function (debugName) {\n    if (this.db.experimentalIsVerbose) {\n      _logger.default.debug(\"\".concat(debugName, \": \").concat(this.__debugName));\n    }\n  };\n  return (0, _createClass2.default)(Model, [{\n    key: \"id\",\n    get: function get() {\n      return this._raw.id;\n    }\n\n    /**\n     * Record's sync status\n     *\n     * @see SyncStatus\n     */\n  }, {\n    key: \"syncStatus\",\n    get: function get() {\n      return this._raw._status;\n    }\n  }, {\n    key: \"collections\",\n    get:\n    // TODO: Deprecate\n    /**\n     * Collections of other Models in the same database as this record.\n     *\n     * @deprecated\n     */\n    function get() {\n      return this.database.collections;\n    }\n\n    // TODO: Deprecate\n  }, {\n    key: \"database\",\n    get: function get() {\n      return this.collection.database;\n    }\n\n    /**\n     * `Database` this record is associated with\n     */\n  }, {\n    key: \"db\",\n    get: function get() {\n      return this.collection.database;\n    }\n  }, {\n    key: \"asModel\",\n    get: function get() {\n      return this;\n    }\n\n    /**\n     * Table name of this record\n     */\n  }, {\n    key: \"table\",\n    get: function get() {\n      return this.constructor.table;\n    }\n  }, {\n    key: \"__debugName\",\n    get: function get() {\n      return \"\".concat(this.table, \"#\").concat(this.id);\n    }\n  }]);\n}();\nModel.associations = {};\nModel._wmelonTag = 'model';", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.tableSchema = exports.tableName = exports.localStorageKey = exports.columnName = exports.associations = exports.appSchema = exports.Relation = exports.Query = exports.Q = exports.Model = exports.Database = exports.Collection = void 0;\nvar Q = _interopRequireWildcard(require(\"./QueryDescription\"));\nexports.Q = Q;\nvar _Collection = _interopRequireDefault(require(\"./Collection\"));\nexports.Collection = _Collection.default;\nvar _Database = _interopRequireDefault(require(\"./Database\"));\nexports.Database = _Database.default;\nvar _Relation = _interopRequireDefault(require(\"./Relation\"));\nexports.Relation = _Relation.default;\nvar _Model = _interopRequireWildcard(require(\"./Model\"));\nexports.Model = _Model.default;\nexports.associations = _Model.associations;\nvar _Query = _interopRequireDefault(require(\"./Query\"));\nexports.Query = _Query.default;\nvar _Schema = require(\"./Schema\");\nexports.tableName = _Schema.tableName;\nexports.columnName = _Schema.columnName;\nexports.appSchema = _Schema.appSchema;\nexports.tableSchema = _Schema.tableSchema;\nvar _LocalStorage = require(\"./Database/LocalStorage\");\nexports.localStorageKey = _LocalStorage.localStorageKey;\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }"],
  "mappings": "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",
  "names": ["RecordCache", "Collection", "DatabaseAdapterCompat", "CollectionMap", "ReaderInterfaceImpl", "WriterInterfaceImpl", "WorkQueue", "$Try_2_Catch", "ErrorAdapter", "LocalStorage", "Database", "$Try_1_Catch", "$Try_3_Post", "$Try_3_Catch", "require_helpers", "_getRequireWildcardCache", "e", "$return", "$error", "Model", "_getRequireWildcardCache", "e"]
}
