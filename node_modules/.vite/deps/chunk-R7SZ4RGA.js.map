{
  "version": 3,
  "sources": ["../../@nozbe/watermelondb/utils/common/randomId/fallback.js", "../../@nozbe/watermelondb/utils/common/randomId/randomId.js", "../../@nozbe/watermelondb/utils/common/randomId/index.js", "../../@nozbe/watermelondb/RawRecord/index.js", "../../@nozbe/watermelondb/utils/fp/likeToRegexp/index.js"],
  "sourcesContent": ["\"use strict\";\n\nexports.__esModule = true;\nexports.default = fallbackRandomId;\nvar alphabet = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\nfunction fallbackRandomId() {\n  var id = '';\n  var v = 0;\n  for (var i = 0; 16 > i; i += 1) {\n    v = Math.floor(62 * Math.random());\n    id += alphabet[v % 62];\n  }\n  return id;\n}", "\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n/* eslint-disable no-bitwise */\nvar alphabet = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\nvar randomNumbers = new Uint8Array(256);\nvar cur = 9999999;\nfunction cryptoRandomId() {\n  var id = '';\n  var len = 0;\n  var v = 0;\n  while (16 > len) {\n    if (256 > cur) {\n      v = randomNumbers[cur] >> 2;\n      cur++;\n      if (62 > v) {\n        id += alphabet[v];\n        len++;\n      }\n    } else {\n      globalThis.crypto.getRandomValues(randomNumbers);\n      cur = 0;\n    }\n  }\n  return id;\n}\nvar isCryptoAvailable = globalThis.crypto && globalThis.crypto.getRandomValues;\nvar randomId = isCryptoAvailable ? cryptoRandomId : require('./fallback').default;\nvar _default = exports.default = randomId;", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.setGenerator = exports.default = void 0;\nvar _randomId = _interopRequireDefault(require(\"./randomId\"));\nvar generator = _randomId.default;\n\n// NOTE: It's is only safe for the ID to contain [a-zA-Z0-9._]. It must not contain other characters\n// (especially '\"\\/$). Never, ever allow the ID to be set by the user w/o validating - this breaks security!\nvar setGenerator = exports.setGenerator = function (newGenerator) {\n  if ('string' !== typeof newGenerator()) {\n    throw new Error('RandomId generator function needs to return a string type.');\n  }\n  generator = newGenerator;\n};\nvar _default = exports.default = function () {\n  return generator();\n};", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.nullValue = nullValue;\nexports.sanitizedRaw = sanitizedRaw;\nexports.setRawSanitized = setRawSanitized;\nvar _randomId = _interopRequireDefault(require(\"../utils/common/randomId\"));\n/* eslint-disable no-lonely-if */\n/* eslint-disable no-self-compare */\n// Raw object representing a model record, coming from an untrusted source\n// (disk, sync, user data). Before it can be used to create a Model instance\n// it must be sanitized (with `sanitizedRaw`) into a RawRecord\n// These fields are ALWAYS present in records of any collection.\n// Raw object representing a model record. A RawRecord is guaranteed by the type system\n// to be safe to use (sanitied with `sanitizedRaw`):\n// - it has exactly the fields described by TableSchema (+ standard fields)\n// - every field is exactly the type described by ColumnSchema (string, number, or boolean)\n// - … and the same optionality (will not be null unless isOptional: true)\n// a number, but not NaN (NaN !== NaN) or Infinity\nfunction isValidNumber(value) {\n  return 'number' === typeof value && value === value && value !== Infinity && value !== -Infinity;\n}\n\n// Note: This is performance-critical code\nfunction _setRaw(raw, key, value, columnSchema) {\n  var {\n    type: type,\n    isOptional: isOptional\n  } = columnSchema;\n\n  // If the value is wrong type or invalid, it's set to `null` (if optional) or empty value ('', 0, false)\n  if ('string' === type) {\n    if ('string' === typeof value) {\n      raw[key] = value;\n    } else {\n      raw[key] = isOptional ? null : '';\n    }\n  } else if ('boolean' === type) {\n    if ('boolean' === typeof value) {\n      raw[key] = value;\n    } else if (1 === value || 0 === value) {\n      // Exception to the standard rule — because SQLite turns true/false into 1/0\n      raw[key] = Boolean(value);\n    } else {\n      raw[key] = isOptional ? null : false;\n    }\n  } else {\n    // type = number\n    // Treat NaN and Infinity as null\n    if (isValidNumber(value)) {\n      raw[key] = value || 0;\n    } else {\n      raw[key] = isOptional ? null : 0;\n    }\n  }\n}\nfunction isValidStatus(value) {\n  return 'created' === value || 'updated' === value || 'deleted' === value || 'synced' === value;\n}\n\n// Transforms a dirty raw record object into a trusted sanitized RawRecord according to passed TableSchema\n// TODO: Should we make this public API for advanced users?\nfunction sanitizedRaw(dirtyRaw, tableSchema) {\n  var {\n    id: id,\n    _status: _status,\n    _changed: _changed\n  } = dirtyRaw;\n\n  // This is called with `{}` when making a new record, so we need to set a new ID, status\n  // Also: If an existing has one of those fields broken, we're screwed. Safest to treat it as a\n  // new record (so that it gets synced)\n\n  // TODO: Think about whether prototypeless objects are a useful mitigation\n  // const raw = Object.create(null) // create a prototypeless object\n  var raw = {};\n  if ('string' === typeof id) {\n    // TODO: Can we trust IDs passed? Maybe we want to split this implementation, depending on whether\n    // this is used on implicitly-trusted (persisted or Watermelon-created) records, or if this is user input?\n    raw.id = id;\n    raw._status = isValidStatus(_status) ? _status : 'created';\n    raw._changed = 'string' === typeof _changed ? _changed : '';\n  } else {\n    raw.id = (0, _randomId.default)();\n    raw._status = 'created';\n    raw._changed = '';\n  }\n\n  // faster than Object.values on a map\n  var columns = tableSchema.columnArray;\n  for (var i = 0, len = columns.length; i < len; i += 1) {\n    var columnSchema = columns[i];\n    var key = columnSchema.name;\n    // TODO: Check performance\n    // $FlowFixMe\n    var value = Object.prototype.hasOwnProperty.call(dirtyRaw, key) ? dirtyRaw[key] : null;\n    _setRaw(raw, key, value, columnSchema);\n  }\n  return raw;\n}\n\n// Modifies passed rawRecord by setting sanitized `value` to `columnName`\n// Note: Assumes columnName exists and columnSchema matches the name\nfunction setRawSanitized(rawRecord, columnName, value, columnSchema) {\n  _setRaw(rawRecord, columnName, value, columnSchema);\n}\nfunction nullValue(columnSchema) {\n  var {\n    isOptional: isOptional,\n    type: type\n  } = columnSchema;\n  if (isOptional) {\n    return null;\n  } else if ('string' === type) {\n    return '';\n  } else if ('number' === type) {\n    return 0;\n  } else if ('boolean' === type) {\n    return false;\n  }\n  throw new Error(\"Unknown type for column schema \".concat(JSON.stringify(columnSchema)));\n}", "\"use strict\";\n\nexports.__esModule = true;\nexports.default = likeToRegexp;\nfunction likeToRegexp(likeQuery) {\n  var regexp = \"^\".concat(likeQuery, \"$\").replace(/%/g, '.*').replace(/_/g, '.');\n  return new RegExp(regexp, 'is');\n}"],
  "mappings": "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",
  "names": ["require_randomId"]
}
