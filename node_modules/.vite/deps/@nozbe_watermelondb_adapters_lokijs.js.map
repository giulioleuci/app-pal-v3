{
  "version": 3,
  "sources": ["../../lokijs/src/incremental-indexeddb-adapter.js", "../../lokijs/src/loki-indexed-adapter.js", "../../lokijs/src/lokijs.wmelon.js", "../../@nozbe/watermelondb/adapters/lokijs/worker/lokiExtensions.js", "../../@nozbe/watermelondb/adapters/lokijs/worker/encodeQuery/index.js", "../../@nozbe/watermelondb/adapters/lokijs/worker/performJoins/index.js", "../../@nozbe/watermelondb/adapters/lokijs/worker/executeQuery.js", "../../@nozbe/watermelondb/adapters/lokijs/worker/DatabaseDriver.js", "../../@nozbe/watermelondb/adapters/lokijs/worker/DatabaseBridge.js", "../../@nozbe/watermelondb/adapters/lokijs/worker/loki.worker.js", "../../@nozbe/watermelondb/adapters/lokijs/worker/cloneMessage/index.js", "../../@nozbe/watermelondb/adapters/lokijs/worker/synchronousWorker.js", "../../@nozbe/watermelondb/adapters/lokijs/dispatcher.js", "../../@nozbe/watermelondb/adapters/lokijs/index.js"],
  "sourcesContent": ["(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.IncrementalIndexedDBAdapter = factory();\n  }\n})(this, function() {\n  return (function() {\n    \"use strict\";\n\n    /* jshint -W030 */\n    var DEBUG = typeof window !== 'undefined' && !!window.__loki_incremental_idb_debug;\n\n    /**\n     * An improved Loki persistence adapter for IndexedDB (not compatible with LokiIndexedAdapter)\n     *     Unlike LokiIndexedAdapter, the database is saved not as one big JSON blob, but split into\n     *     small chunks with individual collection documents. When saving, only the chunks with changed\n     *     documents (and database metadata) is saved to IndexedDB. This speeds up small incremental\n     *     saves by an order of magnitude on large (tens of thousands of records) databases. It also\n     *     avoids Safari 13 bug that would cause the database to balloon in size to gigabytes\n     *\n     *     The `appname` argument is not provided - to distinguish between multiple app on the same\n     *     domain, simply use a different Loki database name\n     *\n     * @example\n     * var adapter = new IncrementalIndexedDBAdapter();\n     *\n     * @constructor IncrementalIndexedDBAdapter\n     *\n     * @param {object=} options Configuration options for the adapter\n     * @param {function} options.onversionchange Function to call on `IDBDatabase.onversionchange` event\n     *     (most likely database deleted from another browser tab)\n     * @param {function} options.onFetchStart Function to call once IDB load has begun.\n     *     Use this as an opportunity to execute code concurrently while IDB does work on a separate thread\n     * @param {function} options.onDidOverwrite Called when this adapter is forced to overwrite contents\n     *     of IndexedDB. This happens if there's another open tab of the same app that's making changes.\n     *     You might use it as an opportunity to alert user to the potential loss of data\n     * @param {function} options.serializeChunk Called with a chunk (array of Loki documents) before\n     *     it's saved to IndexedDB. You can use it to manually compress on-disk representation\n     *     for faster database loads. Hint: Hand-written conversion of objects to arrays is very\n     *     profitable for performance. If you use this, you must also pass options.deserializeChunk.\n     * @param {function} options.deserializeChunk Called with a chunk serialized with options.serializeChunk\n     *     Expects an array of Loki documents as the return value\n     * @param {number} options.megachunkCount Number of parallel requests for data when loading database.\n     *     Can be tuned for a specific application\n     * @param {array} options.lazyCollections Names of collections that should be deserialized lazily\n     *     Only use this for collections that aren't used at launch\n     */\n    function IncrementalIndexedDBAdapter(options) {\n      this.mode = \"incremental\";\n      this.options = options || {};\n      this.chunkSize = 100;\n      this.megachunkCount = this.options.megachunkCount || 24;\n      this.lazyCollections = this.options.lazyCollections || [];\n      this.idb = null; // will be lazily loaded on first operation that needs it\n      this._prevLokiVersionId = null;\n      this._prevCollectionVersionIds = {};\n\n      if (!(this.megachunkCount >= 4 && this.megachunkCount % 2 === 0)) {\n        throw new Error('megachunkCount must be >=4 and divisible by 2');\n      }\n    }\n\n    // chunkId - index of the data chunk - e.g. chunk 0 will be lokiIds 0-99\n    IncrementalIndexedDBAdapter.prototype._getChunk = function(collection, chunkId) {\n      // 0-99, 100-199, etc.\n      var minId = chunkId * this.chunkSize;\n      var maxId = minId + this.chunkSize - 1;\n\n      // use idIndex to find first collection.data position within the $loki range\n      collection.ensureId();\n      var idIndex = collection.idIndex;\n\n      var firstDataPosition = null;\n\n      var max = idIndex.length - 1,\n        min = 0,\n        mid;\n\n      while (idIndex[min] < idIndex[max]) {\n        mid = (min + max) >> 1;\n\n        if (idIndex[mid] < minId) {\n          min = mid + 1;\n        } else {\n          max = mid;\n        }\n      }\n\n      if (max === min && idIndex[min] >= minId && idIndex[min] <= maxId) {\n        firstDataPosition = min;\n      }\n\n      if (firstDataPosition === null) {\n        // no elements in this chunk\n        return [];\n      }\n\n      // find last position\n      // if loki IDs are contiguous (no removed elements), last position will be first + chunk - 1\n      // (and we look back in case there are missing pieces)\n      // TODO: Binary search (not as important as first position, worst case scanario is only chunkSize steps)\n      var lastDataPosition = null;\n      for (var i = firstDataPosition + this.chunkSize - 1; i >= firstDataPosition; i--) {\n        if (idIndex[i] <= maxId) {\n          lastDataPosition = i;\n          break;\n        }\n      }\n\n      // verify\n      var firstElement = collection.data[firstDataPosition];\n      if (!(firstElement && firstElement.$loki >= minId && firstElement.$loki <= maxId)) {\n        throw new Error(\"broken invariant firstelement\");\n      }\n\n      var lastElement = collection.data[lastDataPosition];\n      if (!(lastElement && lastElement.$loki >= minId && lastElement.$loki <= maxId)) {\n        throw new Error(\"broken invariant lastElement\");\n      }\n\n      // this will have *up to* 'this.chunkSize' elements (might have less, because $loki ids\n      // will have holes when data is deleted)\n      var chunkData = collection.data.slice(firstDataPosition, lastDataPosition + 1);\n\n      if (chunkData.length > this.chunkSize) {\n        throw new Error(\"broken invariant - chunk size\");\n      }\n\n      return chunkData;\n    };\n\n    /**\n     * Incrementally saves the database to IndexedDB\n     *\n     * @example\n     * var idbAdapter = new IncrementalIndexedDBAdapter();\n     * var db = new loki('test', { adapter: idbAdapter });\n     * var coll = db.addCollection('testColl');\n     * coll.insert({test: 'val'});\n     * db.saveDatabase();\n     *\n     * @param {string} dbname - the name to give the serialized database\n     * @param {function} getLokiCopy - returns copy of the Loki database\n     * @param {function} callback - (Optional) callback passed obj.success with true or false\n     * @memberof IncrementalIndexedDBAdapter\n     */\n    IncrementalIndexedDBAdapter.prototype.saveDatabase = function(dbname, getLokiCopy, callback) {\n      var that = this;\n\n      if (!this.idb) {\n        this._initializeIDB(dbname, callback, function() {\n          that.saveDatabase(dbname, getLokiCopy, callback);\n        });\n        return;\n      }\n\n      if (this.operationInProgress) {\n        throw new Error(\"Error while saving to database - another operation is already in progress. Please use throttledSaves=true option on Loki object\");\n      }\n      this.operationInProgress = true;\n\n      DEBUG && console.log(\"saveDatabase - begin\");\n      DEBUG && console.time(\"saveDatabase\");\n      function finish(e) {\n        DEBUG && e && console.error(e);\n        DEBUG && console.timeEnd(\"saveDatabase\");\n        that.operationInProgress = false;\n        callback(e);\n      }\n\n      // try..catch is required, e.g.:\n      // InvalidStateError: Failed to execute 'transaction' on 'IDBDatabase': The database connection is closing.\n      // (this may happen if another tab has called deleteDatabase)\n      try {\n        var updatePrevVersionIds = function () {\n          console.error('Unexpected successful tx - cannot update previous version ids');\n        };\n        var didOverwrite = false;\n\n        var tx = this.idb.transaction(['LokiIncrementalData'], \"readwrite\");\n        tx.oncomplete = function() {\n          updatePrevVersionIds();\n          finish();\n          if (didOverwrite && that.options.onDidOverwrite) {\n            that.options.onDidOverwrite();\n          }\n        };\n\n        tx.onerror = function(e) {\n          finish(e);\n        };\n\n        tx.onabort = function(e) {\n          finish(e);\n        };\n\n        var store = tx.objectStore('LokiIncrementalData');\n\n        var performSave = function (maxChunkIds) {\n          try {\n            var incremental = !maxChunkIds;\n            var chunkInfo = that._putInChunks(store, getLokiCopy(), incremental, maxChunkIds);\n            // Update last seen version IDs, but only after the transaction is successful\n            updatePrevVersionIds = function() {\n              that._prevLokiVersionId = chunkInfo.lokiVersionId;\n              chunkInfo.collectionVersionIds.forEach(function (collectionInfo) {\n                that._prevCollectionVersionIds[collectionInfo.name] = collectionInfo.versionId;\n              });\n            };\n            tx.commit && tx.commit();\n          } catch (error) {\n            console.error('idb performSave failed: ', error);\n            tx.abort();\n          }\n        };\n\n        // Incrementally saving changed chunks breaks down if there is more than one writer to IDB\n        // (multiple tabs of the same web app), leading to data corruption. To fix that, we save all\n        // metadata chunks (loki + collections) with a unique ID on each save and remember it. Before\n        // the subsequent save, we read loki from IDB to check if its version ID changed. If not, we're\n        // guaranteed that persisted DB is consistent with our diff. Otherwise, we fall back to the slow\n        // path and overwrite *all* database chunks with our version. Both reading and writing must\n        // happen in the same IDB transaction for this to work.\n        // TODO: We can optimize the slow path by fetching collection metadata chunks and comparing their\n        // version IDs with those last seen by us. Since any change in collection data requires a metadata\n        // chunk save, we're guaranteed that if the IDs match, we don't need to overwrite chukns of this collection\n        var getAllKeysThenSave = function() {\n          // NOTE: We must fetch all keys to protect against a case where another tab has wrote more\n          // chunks whan we did -- if so, we must delete them.\n          idbReq(store.getAllKeys(), function(e) {\n            var maxChunkIds = getMaxChunkIds(e.target.result);\n            performSave(maxChunkIds);\n          }, function(e) {\n            console.error('Getting all keys failed: ', e);\n            tx.abort();\n          });\n        };\n\n        var getLokiThenSave = function() {\n          idbReq(store.get('loki'), function(e) {\n            if (lokiChunkVersionId(e.target.result) === that._prevLokiVersionId) {\n              performSave();\n            } else {\n              DEBUG && console.warn('Another writer changed Loki IDB, using slow path...');\n              didOverwrite = true;\n              getAllKeysThenSave();\n            }\n          }, function(e) {\n            console.error('Getting loki chunk failed: ', e);\n            tx.abort();\n          });\n        };\n\n        getLokiThenSave();\n      } catch (error) {\n        finish(error);\n      }\n    };\n\n    // gets current largest chunk ID for each collection\n    function getMaxChunkIds(allKeys) {\n      var maxChunkIds = {};\n\n      allKeys.forEach(function (key) {\n        var keySegments = key.split(\".\");\n        // table.chunk.2317\n        if (keySegments.length === 3 && keySegments[1] === \"chunk\") {\n          var collection = keySegments[0];\n          var chunkId = parseInt(keySegments[2]) || 0;\n          var currentMax = maxChunkIds[collection];\n\n          if (!currentMax || chunkId > currentMax) {\n            maxChunkIds[collection] = chunkId;\n          }\n        }\n      });\n      return maxChunkIds;\n    }\n\n    function lokiChunkVersionId(chunk) {\n      try {\n        if (chunk) {\n          var loki = JSON.parse(chunk.value);\n          return loki.idbVersionId || null;\n        } else {\n          return null;\n        }\n      } catch (e) {\n        console.error('Error while parsing loki chunk', e);\n        return null;\n      }\n    }\n\n    IncrementalIndexedDBAdapter.prototype._putInChunks = function(idbStore, loki, incremental, maxChunkIds) {\n      var that = this;\n      var collectionVersionIds = [];\n      var savedSize = 0;\n\n      var prepareCollection = function (collection, i) {\n        // Find dirty chunk ids\n        var dirtyChunks = new Set();\n        incremental && collection.dirtyIds.forEach(function(lokiId) {\n          var chunkId = (lokiId / that.chunkSize) | 0;\n          dirtyChunks.add(chunkId);\n        });\n        collection.dirtyIds = [];\n\n        // Serialize chunks to save\n        var prepareChunk = function (chunkId) {\n          var chunkData = that._getChunk(collection, chunkId);\n          if (that.options.serializeChunk) {\n            chunkData = that.options.serializeChunk(collection.name, chunkData);\n          }\n          // we must stringify now, because IDB is asynchronous, and underlying objects are mutable\n          // In general, it's also faster to stringify, because we need serialization anyway, and\n          // JSON.stringify is much better optimized than IDB's structured clone\n          chunkData = JSON.stringify(chunkData);\n          savedSize += chunkData.length;\n          DEBUG && incremental && console.log('Saving: ' + collection.name + \".chunk.\" + chunkId);\n          idbStore.put({\n            key: collection.name + \".chunk.\" + chunkId,\n            value: chunkData,\n          });\n        };\n        if (incremental) {\n          dirtyChunks.forEach(prepareChunk);\n        } else {\n          // add all chunks\n          var maxChunkId = (collection.maxId / that.chunkSize) | 0;\n          for (var j = 0; j <= maxChunkId; j += 1) {\n            prepareChunk(j);\n          }\n\n          // delete chunks with larger ids than what we have\n          // NOTE: we don't have to delete metadata chunks as they will be absent from loki anyway\n          // NOTE: failures are silently ignored, so we don't have to worry about holes\n          var persistedMaxChunkId = maxChunkIds[collection.name] || 0;\n          for (var k = maxChunkId + 1; k <= persistedMaxChunkId; k += 1) {\n            var deletedChunkName = collection.name + \".chunk.\" + k;\n            idbStore.delete(deletedChunkName);\n            DEBUG && console.warn('Deleted chunk: ' + deletedChunkName);\n          }\n        }\n\n        // save collection metadata as separate chunk (but only if changed)\n        if (collection.dirty || dirtyChunks.size || !incremental) {\n          collection.idIndex = []; // this is recreated lazily\n          collection.data = [];\n          collection.idbVersionId = randomVersionId();\n          collectionVersionIds.push({ name: collection.name, versionId: collection.idbVersionId });\n\n          var metadataChunk = JSON.stringify(collection);\n          savedSize += metadataChunk.length;\n          DEBUG && incremental && console.log('Saving: ' + collection.name + \".metadata\");\n          idbStore.put({\n            key: collection.name + \".metadata\",\n            value: metadataChunk,\n          });\n        }\n\n        // leave only names in the loki chunk\n        loki.collections[i] = { name: collection.name };\n      };\n      loki.collections.forEach(prepareCollection);\n\n      loki.idbVersionId = randomVersionId();\n      var serializedMetadata = JSON.stringify(loki);\n      savedSize += serializedMetadata.length;\n\n      DEBUG && incremental && console.log('Saving: loki');\n      idbStore.put({ key: \"loki\", value: serializedMetadata });\n\n      DEBUG && console.log(\"saved size: \" + savedSize);\n      return {\n        lokiVersionId: loki.idbVersionId,\n        collectionVersionIds: collectionVersionIds,\n      };\n    };\n\n    /**\n     * Retrieves a serialized db string from the catalog.\n     *\n     * @example\n     * // LOAD\n     * var idbAdapter = new IncrementalIndexedDBAdapter();\n     * var db = new loki('test', { adapter: idbAdapter });\n     * db.loadDatabase(function(result) {\n     *   console.log('done');\n     * });\n     *\n     * @param {string} dbname - the name of the database to retrieve.\n     * @param {function} callback - callback should accept string param containing serialized db string.\n     * @memberof IncrementalIndexedDBAdapter\n     */\n    IncrementalIndexedDBAdapter.prototype.loadDatabase = function(dbname, callback) {\n      var that = this;\n\n      if (this.operationInProgress) {\n        throw new Error(\"Error while loading database - another operation is already in progress. Please use throttledSaves=true option on Loki object\");\n      }\n\n      this.operationInProgress = true;\n\n      DEBUG && console.log(\"loadDatabase - begin\");\n      DEBUG && console.time(\"loadDatabase\");\n\n      var finish = function (value) {\n        DEBUG && console.timeEnd(\"loadDatabase\");\n        that.operationInProgress = false;\n        callback(value);\n      };\n\n      this._getAllChunks(dbname, function(chunks) {\n        try {\n          if (!Array.isArray(chunks)) {\n            throw chunks; // we have an error\n          }\n\n          if (!chunks.length) {\n            return finish(null);\n          }\n\n          DEBUG && console.log(\"Found chunks:\", chunks.length);\n\n          // repack chunks into a map\n          chunks = chunksToMap(chunks);\n          var loki = chunks.loki;\n          chunks.loki = null; // gc\n\n          // populate collections with data\n          populateLoki(loki, chunks.chunkMap, that.options.deserializeChunk, that.lazyCollections);\n          chunks = null; // gc\n\n          // remember previous version IDs\n          that._prevLokiVersionId = loki.idbVersionId || null;\n          that._prevCollectionVersionIds = {};\n          loki.collections.forEach(function (collection) {\n            that._prevCollectionVersionIds[collection.name] = collection.idbVersionId || null;\n          });\n\n          return finish(loki);\n        } catch (error) {\n          that._prevLokiVersionId = null;\n          that._prevCollectionVersionIds = {};\n          return finish(error);\n        }\n      });\n    };\n\n    function chunksToMap(chunks) {\n      var loki;\n      var chunkMap = {};\n\n      sortChunksInPlace(chunks);\n\n      chunks.forEach(function(chunk) {\n        var type = chunk.type;\n        var value = chunk.value;\n        var name = chunk.collectionName;\n        if (type === \"loki\") {\n          loki = value;\n        } else if (type === \"data\") {\n          if (chunkMap[name]) {\n            chunkMap[name].dataChunks.push(value);\n          } else {\n            chunkMap[name] = {\n              metadata: null,\n              dataChunks: [value],\n            };\n          }\n        } else if (type === \"metadata\") {\n          if (chunkMap[name]) {\n            chunkMap[name].metadata = value;\n          } else {\n            chunkMap[name] = { metadata: value, dataChunks: [] };\n          }\n        } else {\n          throw new Error(\"unreachable\");\n        }\n      });\n\n      if (!loki) {\n        throw new Error(\"Corrupted database - missing database metadata\");\n      }\n\n      return { loki: loki, chunkMap: chunkMap };\n    }\n\n    function populateLoki(loki, chunkMap, deserializeChunk, lazyCollections) {\n      loki.collections.forEach(function populateCollection(collectionStub, i) {\n        var name = collectionStub.name;\n        var chunkCollection = chunkMap[name];\n        if (chunkCollection) {\n          if (!chunkCollection.metadata) {\n            throw new Error(\"Corrupted database - missing metadata chunk for \" + name);\n          }\n          var collection = chunkCollection.metadata;\n          chunkCollection.metadata = null;\n          loki.collections[i] = collection;\n\n          var isLazy = lazyCollections.includes(name);\n          var lokiDeserializeCollectionChunks = function () {\n            DEBUG && isLazy && console.log(\"lazy loading \" + name);\n            var data = [];\n            var dataChunks = chunkCollection.dataChunks;\n            dataChunks.forEach(function populateChunk(chunk, i) {\n              if (isLazy) {\n                chunk = JSON.parse(chunk);\n                if (deserializeChunk) {\n                  chunk = deserializeChunk(name, chunk);\n                }\n              }\n              chunk.forEach(function(doc) {\n                data.push(doc);\n              });\n              dataChunks[i] = null;\n            });\n            return data;\n          };\n          collection.getData = lokiDeserializeCollectionChunks;\n        }\n      });\n    }\n\n    IncrementalIndexedDBAdapter.prototype._initializeIDB = function(dbname, onError, onSuccess) {\n      var that = this;\n      DEBUG && console.log(\"initializing idb\");\n\n      if (this.idbInitInProgress) {\n        throw new Error(\"Cannot open IndexedDB because open is already in progress\");\n      }\n      this.idbInitInProgress = true;\n\n      var openRequest = indexedDB.open(dbname, 1);\n\n      openRequest.onupgradeneeded = function(e) {\n        var db = e.target.result;\n        DEBUG && console.log('onupgradeneeded, old version: ' + e.oldVersion);\n\n        if (e.oldVersion < 1) {\n          // Version 1 - Initial - Create database\n          db.createObjectStore('LokiIncrementalData', { keyPath: \"key\" });\n        } else {\n          // Unknown version\n          throw new Error(\"Invalid old version \" + e.oldVersion + \" for IndexedDB upgrade\");\n        }\n      };\n\n      openRequest.onsuccess = function(e) {\n        that.idbInitInProgress = false;\n        var db = e.target.result;\n        that.idb = db;\n\n        if (!db.objectStoreNames.contains('LokiIncrementalData')) {\n          onError(new Error(\"Missing LokiIncrementalData\"));\n          // Attempt to recover (after reload) by deleting database, since it's damaged anyway\n          that.deleteDatabase(dbname);\n          return;\n        }\n\n        DEBUG && console.log(\"init success\");\n\n        db.onversionchange = function(versionChangeEvent) {\n          // Ignore if database was deleted and recreated in the meantime\n          if (that.idb !== db) {\n            return;\n          }\n\n          DEBUG && console.log('IDB version change', versionChangeEvent);\n          // This function will be called if another connection changed DB version\n          // (Most likely database was deleted from another browser tab, unless there's a new version\n          // of this adapter, or someone makes a connection to IDB outside of this adapter)\n          // We must close the database to avoid blocking concurrent deletes.\n          // The database will be unusable after this. Be sure to supply `onversionchange` option\n          // to force logout\n          that.idb.close();\n          that.idb = null;\n          if (that.options.onversionchange) {\n            that.options.onversionchange(versionChangeEvent);\n          }\n        };\n\n        onSuccess();\n      };\n\n      openRequest.onblocked = function(e) {\n        console.error(\"IndexedDB open is blocked\", e);\n        onError(new Error(\"IndexedDB open is blocked by open connection\"));\n      };\n\n      openRequest.onerror = function(e) {\n        that.idbInitInProgress = false;\n        console.error(\"IndexedDB open error\", e);\n        onError(e);\n      };\n    };\n\n    IncrementalIndexedDBAdapter.prototype._getAllChunks = function(dbname, callback) {\n      var that = this;\n      if (!this.idb) {\n        this._initializeIDB(dbname, callback, function() {\n          that._getAllChunks(dbname, callback);\n        });\n        return;\n      }\n\n      var tx = this.idb.transaction(['LokiIncrementalData'], \"readonly\");\n      var store = tx.objectStore('LokiIncrementalData');\n\n      var deserializeChunk = this.options.deserializeChunk;\n      var lazyCollections = this.lazyCollections;\n\n      // If there are a lot of chunks (>100), don't request them all in one go, but in multiple\n      // \"megachunks\" (chunks of chunks). This improves concurrency, as main thread is already busy\n      // while IDB process is still fetching data. Details: https://github.com/techfort/LokiJS/pull/874\n      function getMegachunks(keys) {\n        var megachunkCount = that.megachunkCount;\n        var keyRanges = createKeyRanges(keys, megachunkCount);\n\n        var allChunks = [];\n        var megachunksReceived = 0;\n\n        function processMegachunk(e, megachunkIndex, keyRange) {\n          // var debugMsg = 'processing chunk ' + megachunkIndex + ' (' + keyRange.lower + ' -- ' + keyRange.upper + ')'\n          // DEBUG && console.time(debugMsg);\n          var megachunk = e.target.result;\n          megachunk.forEach(function (chunk, i) {\n            parseChunk(chunk, deserializeChunk, lazyCollections);\n            allChunks.push(chunk);\n            megachunk[i] = null; // gc\n          });\n          // DEBUG && console.timeEnd(debugMsg);\n\n          megachunksReceived += 1;\n          if (megachunksReceived === megachunkCount) {\n            callback(allChunks);\n          }\n        }\n\n        // Stagger megachunk requests - first one half, then request the second when first one comes\n        // back. This further improves concurrency.\n        var megachunkWaves = 2;\n        var megachunksPerWave = megachunkCount / megachunkWaves;\n        function requestMegachunk(index, wave) {\n          var keyRange = keyRanges[index];\n          idbReq(store.getAll(keyRange), function(e) {\n            if (wave < megachunkWaves) {\n              requestMegachunk(index + megachunksPerWave, wave + 1);\n            }\n\n            processMegachunk(e, index, keyRange);\n          }, function(e) {\n            callback(e);\n          });\n        }\n\n        for (var i = 0; i < megachunksPerWave; i += 1) {\n          requestMegachunk(i, 1);\n        }\n      }\n\n      function getAllChunks() {\n        idbReq(store.getAll(), function(e) {\n          var allChunks = e.target.result;\n          allChunks.forEach(function (chunk) {\n            parseChunk(chunk, deserializeChunk, lazyCollections);\n          });\n          callback(allChunks);\n        }, function(e) {\n          callback(e);\n        });\n      }\n\n      function getAllKeys() {\n        function onDidGetKeys(keys) {\n          keys.sort();\n          if (keys.length > 100) {\n            getMegachunks(keys);\n          } else {\n            getAllChunks();\n          }\n        }\n\n        idbReq(store.getAllKeys(), function(e) {\n          onDidGetKeys(e.target.result);\n        }, function(e) {\n          callback(e);\n        });\n\n        if (that.options.onFetchStart) {\n          that.options.onFetchStart();\n        }\n      }\n\n      getAllKeys();\n    };\n\n    function classifyChunk(chunk) {\n      var key = chunk.key;\n\n      if (key === 'loki') {\n        chunk.type = 'loki';\n        return;\n      } else if (key.includes('.')) {\n        var keySegments = key.split(\".\");\n        if (keySegments.length === 3 && keySegments[1] === \"chunk\") {\n          chunk.type = 'data';\n          chunk.collectionName = keySegments[0];\n          chunk.index = parseInt(keySegments[2], 10);\n          return;\n        } else if (keySegments.length === 2 && keySegments[1] === \"metadata\") {\n          chunk.type = 'metadata';\n          chunk.collectionName = keySegments[0];\n          return;\n        }\n      }\n\n      console.error(\"Unknown chunk \" + key);\n      throw new Error(\"Corrupted database - unknown chunk found\");\n    }\n\n    function parseChunk(chunk, deserializeChunk, lazyCollections) {\n      classifyChunk(chunk);\n\n      var isData = chunk.type === 'data';\n      var isLazy = lazyCollections.includes(chunk.collectionName);\n\n      if (!(isData && isLazy)) {\n        chunk.value = JSON.parse(chunk.value);\n      }\n      if (deserializeChunk && isData && !isLazy) {\n        chunk.value = deserializeChunk(chunk.collectionName, chunk.value);\n      }\n    }\n\n    /**\n     * Deletes a database from IndexedDB\n     *\n     * @example\n     * // DELETE DATABASE\n     * // delete 'finance'/'test' value from catalog\n     * idbAdapter.deleteDatabase('test', function {\n     *   // database deleted\n     * });\n     *\n     * @param {string} dbname - the name of the database to delete from IDB\n     * @param {function=} callback - (Optional) executed on database delete\n     * @memberof IncrementalIndexedDBAdapter\n     */\n    IncrementalIndexedDBAdapter.prototype.deleteDatabase = function(dbname, callback) {\n      if (this.operationInProgress) {\n        throw new Error(\"Error while deleting database - another operation is already in progress. Please use throttledSaves=true option on Loki object\");\n      }\n\n      this.operationInProgress = true;\n\n      var that = this;\n      DEBUG && console.log(\"deleteDatabase - begin\");\n      DEBUG && console.time(\"deleteDatabase\");\n\n      this._prevLokiVersionId = null;\n      this._prevCollectionVersionIds = {};\n\n      if (this.idb) {\n        this.idb.close();\n        this.idb = null;\n      }\n\n      var request = indexedDB.deleteDatabase(dbname);\n\n      request.onsuccess = function() {\n        that.operationInProgress = false;\n        DEBUG && console.timeEnd(\"deleteDatabase\");\n        callback({ success: true });\n      };\n\n      request.onerror = function(e) {\n        that.operationInProgress = false;\n        console.error(\"Error while deleting database\", e);\n        callback({ success: false });\n      };\n\n      request.onblocked = function(e) {\n        // We can't call callback with failure status, because this will be called even if we\n        // succeed in just a moment\n        console.error(\"Deleting database failed because it's blocked by another connection\", e);\n      };\n    };\n\n    function randomVersionId() {\n      // Appears to have enough entropy for chunk version IDs\n      // (Only has to be different than enough of its own previous versions that there's no writer\n      // that thinks a new version is the same as an earlier one, not globally unique)\n      return Math.random().toString(36).substring(2);\n    }\n\n    function sortChunksInPlace(chunks) {\n      // sort chunks in place to load data in the right order (ascending loki ids)\n      // on both Safari and Chrome, we'll get chunks in order like this: 0, 1, 10, 100...\n      chunks.sort(function(a, b) {\n        return (a.index || 0) - (b.index || 0);\n      });\n    }\n\n    function createKeyRanges(keys, count) {\n      var countPerRange = Math.floor(keys.length / count);\n      var keyRanges = [];\n      var minKey, maxKey;\n      for (var i = 0; i < count; i += 1) {\n        minKey = keys[countPerRange * i];\n        maxKey = keys[countPerRange * (i + 1)];\n        if (i === 0) {\n          // ... < maxKey\n          keyRanges.push(IDBKeyRange.upperBound(maxKey, true));\n        } else if (i === count - 1) {\n          // >= minKey\n          keyRanges.push(IDBKeyRange.lowerBound(minKey));\n        } else {\n          // >= minKey && < maxKey\n          keyRanges.push(IDBKeyRange.bound(minKey, maxKey, false, true));\n        }\n      }\n      return keyRanges;\n    }\n\n    function idbReq(request, onsuccess, onerror) {\n      request.onsuccess = function (e) {\n        try {\n          return onsuccess(e);\n        } catch (error) {\n          onerror(error);\n        }\n      };\n      request.onerror = onerror;\n      return request;\n    }\n\n    return IncrementalIndexedDBAdapter;\n  })();\n});\n", "/*\n  Loki IndexedDb Adapter (need to include this script to use it)\n\n  Console Usage can be used for management/diagnostic, here are a few examples :\n  adapter.getDatabaseList(); // with no callback passed, this method will log results to console\n  adapter.saveDatabase('UserDatabase', JSON.stringify(myDb));\n  adapter.loadDatabase('UserDatabase'); // will log the serialized db to console\n  adapter.deleteDatabase('UserDatabase');\n*/\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        // Node, CommonJS-like\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.LokiIndexedAdapter = factory();\n    }\n}(this, function () {\n  return (function() {\n\n    /**\n     * Loki persistence adapter class for indexedDb.\n     *     This class fulfills abstract adapter interface which can be applied to other storage methods.\n     *     Utilizes the included LokiCatalog app/key/value database for actual database persistence.\n     *     Indexeddb is highly async, but this adapter has been made 'console-friendly' as well.\n     *     Anywhere a callback is omitted, it should return results (if applicable) to console.\n     *     IndexedDb storage is provided per-domain, so we implement app/key/value database to\n     *     allow separate contexts for separate apps within a domain.\n     *\n     * @example\n     * var idbAdapter = new LokiIndexedAdapter('finance');\n     *\n     * @constructor LokiIndexedAdapter\n     *\n     * @param {string} appname - (Optional) Application name context can be used to distinguish subdomains, 'loki' by default\n     * @param {object=} options Configuration options for the adapter\n     * @param {boolean} options.closeAfterSave Whether the indexedDB database should be closed after saving.\n     */\n    function LokiIndexedAdapter(appname, options)\n    {\n      this.app = 'loki';\n      this.options = options || {};\n\n      if (typeof (appname) !== 'undefined')\n      {\n        this.app = appname;\n      }\n\n      // keep reference to catalog class for base AKV operations\n      this.catalog = null;\n\n      if (!this.checkAvailability()) {\n        throw new Error('indexedDB does not seem to be supported for your environment');\n      }\n    }\n\n    /**\n     * Used for closing the indexeddb database.\n     */\n    LokiIndexedAdapter.prototype.closeDatabase = function ()\n    {\n      if (this.catalog && this.catalog.db) {\n        this.catalog.db.close();\n        this.catalog.db = null;\n      }\n    };\n\n    /**\n     * Used to check if adapter is available\n     *\n     * @returns {boolean} true if indexeddb is available, false if not.\n     * @memberof LokiIndexedAdapter\n     */\n    LokiIndexedAdapter.prototype.checkAvailability = function()\n    {\n      if (typeof indexedDB !== 'undefined' && indexedDB) return true;\n\n      return false;\n    };\n\n    /**\n     * Retrieves a serialized db string from the catalog.\n     *\n     * @example\n     * // LOAD\n     * var idbAdapter = new LokiIndexedAdapter('finance');\n     * var db = new loki('test', { adapter: idbAdapter });\n     *   db.loadDatabase(function(result) {\n     *   console.log('done');\n     * });\n     *\n     * @param {string} dbname - the name of the database to retrieve.\n     * @param {function} callback - callback should accept string param containing serialized db string.\n     * @memberof LokiIndexedAdapter\n     */\n    LokiIndexedAdapter.prototype.loadDatabase = function(dbname, callback)\n    {\n      var appName = this.app;\n      var adapter = this;\n\n      // lazy open/create db reference so dont -need- callback in constructor\n      if (this.catalog === null || this.catalog.db === null) {\n        this.catalog = new LokiCatalog(function(cat) {\n          adapter.catalog = cat;\n\n          adapter.loadDatabase(dbname, callback);\n        });\n\n        return;\n      }\n\n      // lookup up db string in AKV db\n      this.catalog.getAppKey(appName, dbname, function(result) {\n        if (typeof (callback) === 'function') {\n          if (result.id === 0) {\n            callback(null);\n            return;\n          }\n          callback(result.val);\n        }\n        else {\n          // support console use of api\n          console.log(result.val);\n        }\n      });\n    };\n\n    // alias\n    LokiIndexedAdapter.prototype.loadKey = LokiIndexedAdapter.prototype.loadDatabase;\n\n    /**\n     * Saves a serialized db to the catalog.\n     *\n     * @example\n     * // SAVE : will save App/Key/Val as 'finance'/'test'/{serializedDb}\n     * var idbAdapter = new LokiIndexedAdapter('finance');\n     * var db = new loki('test', { adapter: idbAdapter });\n     * var coll = db.addCollection('testColl');\n     * coll.insert({test: 'val'});\n     * db.saveDatabase();  // could pass callback if needed for async complete\n     *\n     * @param {string} dbname - the name to give the serialized database within the catalog.\n     * @param {string} dbstring - the serialized db string to save.\n     * @param {function} callback - (Optional) callback passed obj.success with true or false\n     * @memberof LokiIndexedAdapter\n     */\n    LokiIndexedAdapter.prototype.saveDatabase = function(dbname, dbstring, callback)\n    {\n      var appName = this.app;\n      var adapter = this;\n\n      function saveCallback(result) {\n        if (result && result.success === true) {\n          callback(null);\n        }\n        else {\n          callback(new Error(\"Error saving database\"));\n        }\n\n        if (adapter.options.closeAfterSave) {\n          adapter.closeDatabase();\n        }\n      }\n\n      // lazy open/create db reference so dont -need- callback in constructor\n      if (this.catalog === null || this.catalog.db === null) {\n        this.catalog = new LokiCatalog(function(cat) {\n          adapter.saveDatabase(dbname, dbstring, saveCallback);\n        });\n\n        return;\n      }\n\n      // set (add/update) entry to AKV database\n      this.catalog.setAppKey(appName, dbname, dbstring, saveCallback);\n    };\n\n    // alias\n    LokiIndexedAdapter.prototype.saveKey = LokiIndexedAdapter.prototype.saveDatabase;\n\n    /**\n     * Deletes a serialized db from the catalog.\n     *\n     * @example\n     * // DELETE DATABASE\n     * // delete 'finance'/'test' value from catalog\n     * idbAdapter.deleteDatabase('test', function {\n     *   // database deleted\n     * });\n     *\n     * @param {string} dbname - the name of the database to delete from the catalog.\n     * @param {function=} callback - (Optional) executed on database delete\n     * @memberof LokiIndexedAdapter\n     */\n    LokiIndexedAdapter.prototype.deleteDatabase = function(dbname, callback)\n    {\n      var appName = this.app;\n      var adapter = this;\n\n      // lazy open/create db reference and pass callback ahead\n      if (this.catalog === null || this.catalog.db === null) {\n        this.catalog = new LokiCatalog(function(cat) {\n          adapter.catalog = cat;\n\n          adapter.deleteDatabase(dbname, callback);\n        });\n\n        return;\n      }\n\n      // catalog was already initialized, so just lookup object and delete by id\n      this.catalog.getAppKey(appName, dbname, function(result) {\n        var id = result.id;\n\n        if (id !== 0) {\n          adapter.catalog.deleteAppKey(id, callback);\n        } else if (typeof (callback) === 'function') {\n          callback({ success: true });\n        }\n      });\n    };\n\n    // alias\n    LokiIndexedAdapter.prototype.deleteKey = LokiIndexedAdapter.prototype.deleteDatabase;\n\n    /**\n     * Removes all database partitions and pages with the base filename passed in.\n     * This utility method does not (yet) guarantee async deletions will be completed before returning\n     *\n     * @param {string} dbname - the base filename which container, partitions, or pages are derived\n     * @memberof LokiIndexedAdapter\n     */\n    LokiIndexedAdapter.prototype.deleteDatabasePartitions = function(dbname) {\n      var self=this;\n      this.getDatabaseList(function(result) {\n        result.forEach(function(str) {\n          if (str.startsWith(dbname)) {\n            self.deleteDatabase(str);\n          }\n        });\n      });\n    };\n\n    /**\n     * Retrieves object array of catalog entries for current app.\n     *\n     * @example\n     * idbAdapter.getDatabaseList(function(result) {\n     *   // result is array of string names for that appcontext ('finance')\n     *   result.forEach(function(str) {\n     *     console.log(str);\n     *   });\n     * });\n     *\n     * @param {function} callback - should accept array of database names in the catalog for current app.\n     * @memberof LokiIndexedAdapter\n     */\n    LokiIndexedAdapter.prototype.getDatabaseList = function(callback)\n    {\n      var appName = this.app;\n      var adapter = this;\n\n      // lazy open/create db reference so dont -need- callback in constructor\n      if (this.catalog === null || this.catalog.db === null) {\n        this.catalog = new LokiCatalog(function(cat) {\n          adapter.catalog = cat;\n\n          adapter.getDatabaseList(callback);\n        });\n\n        return;\n      }\n\n      // catalog already initialized\n      // get all keys for current appName, and transpose results so just string array\n      this.catalog.getAppKeys(appName, function(results) {\n        var names = [];\n\n        for(var idx = 0; idx < results.length; idx++) {\n          names.push(results[idx].key);\n        }\n\n        if (typeof (callback) === 'function') {\n          callback(names);\n        }\n        else {\n          names.forEach(function(obj) {\n            console.log(obj);\n          });\n        }\n      });\n    };\n\n    // alias\n    LokiIndexedAdapter.prototype.getKeyList = LokiIndexedAdapter.prototype.getDatabaseList;\n\n    /**\n     * Allows retrieval of list of all keys in catalog along with size\n     *\n     * @param {function} callback - (Optional) callback to accept result array.\n     * @memberof LokiIndexedAdapter\n     */\n    LokiIndexedAdapter.prototype.getCatalogSummary = function(callback)\n    {\n      var appName = this.app;\n      var adapter = this;\n\n      // lazy open/create db reference\n      if (this.catalog === null || this.catalog.db === null) {\n        this.catalog = new LokiCatalog(function(cat) {\n          adapter.catalog = cat;\n\n          adapter.getCatalogSummary(callback);\n        });\n\n        return;\n      }\n\n      // catalog already initialized\n      // get all keys for current appName, and transpose results so just string array\n      this.catalog.getAllKeys(function(results) {\n        var entries = [];\n        var obj,\n          size,\n          oapp,\n          okey,\n          oval;\n\n        for(var idx = 0; idx < results.length; idx++) {\n          obj = results[idx];\n          oapp = obj.app || '';\n          okey = obj.key || '';\n          oval = obj.val || '';\n\n          // app and key are composited into an appkey column so we will mult by 2\n          size = oapp.length * 2 + okey.length * 2 + oval.length + 1;\n\n          entries.push({ \"app\": obj.app, \"key\": obj.key, \"size\": size });\n        }\n\n        if (typeof (callback) === 'function') {\n          callback(entries);\n        }\n        else {\n          entries.forEach(function(obj) {\n            console.log(obj);\n          });\n        }\n      });\n    };\n\n    /**\n     * LokiCatalog - underlying App/Key/Value catalog persistence\n     *    This non-interface class implements the actual persistence.\n     *    Used by the IndexedAdapter class.\n     */\n    function LokiCatalog(callback)\n    {\n      this.db = null;\n      this.initializeLokiCatalog(callback);\n    }\n\n    LokiCatalog.prototype.initializeLokiCatalog = function(callback) {\n      var openRequest = indexedDB.open('LokiCatalog', 1);\n      var cat = this;\n\n      // If database doesn't exist yet or its version is lower than our version specified above (2nd param in line above)\n      openRequest.onupgradeneeded = function(e) {\n        var thisDB = e.target.result;\n        if (thisDB.objectStoreNames.contains('LokiAKV')) {\n          thisDB.deleteObjectStore('LokiAKV');\n        }\n\n        if(!thisDB.objectStoreNames.contains('LokiAKV')) {\n          var objectStore = thisDB.createObjectStore('LokiAKV', { keyPath: 'id', autoIncrement:true });\n          objectStore.createIndex('app', 'app', {unique:false});\n          objectStore.createIndex('key', 'key', {unique:false});\n          // hack to simulate composite key since overhead is low (main size should be in val field)\n          // user (me) required to duplicate the app and key into comma delimited appkey field off object\n          // This will allow retrieving single record with that composite key as well as\n          // still supporting opening cursors on app or key alone\n          objectStore.createIndex('appkey', 'appkey', {unique:true});\n        }\n      };\n\n      openRequest.onsuccess = function(e) {\n        cat.db = e.target.result;\n\n        if (typeof (callback) === 'function') callback(cat);\n      };\n\n      openRequest.onerror = function(e) {\n        throw e;\n      };\n    };\n\n    LokiCatalog.prototype.getAppKey = function(app, key, callback) {\n      var transaction = this.db.transaction(['LokiAKV'], 'readonly');\n      var store = transaction.objectStore('LokiAKV');\n      var index = store.index('appkey');\n      var appkey = app + \",\" + key;\n      var request = index.get(appkey);\n\n      request.onsuccess = (function(usercallback) {\n        return function(e) {\n          var lres = e.target.result;\n\n          if (lres === null || typeof(lres) === 'undefined') {\n            lres = {\n              id: 0,\n              success: false\n            };\n          }\n\n          if (typeof(usercallback) === 'function') {\n            usercallback(lres);\n          }\n          else {\n            console.log(lres);\n          }\n        };\n      })(callback);\n\n      request.onerror = (function(usercallback) {\n        return function(e) {\n          if (typeof(usercallback) === 'function') {\n            usercallback({ id: 0, success: false });\n          }\n          else {\n            throw e;\n          }\n        };\n      })(callback);\n    };\n\n    LokiCatalog.prototype.getAppKeyById = function (id, callback, data) {\n      var transaction = this.db.transaction(['LokiAKV'], 'readonly');\n      var store = transaction.objectStore('LokiAKV');\n      var request = store.get(id);\n\n      request.onsuccess = (function(data, usercallback){\n        return function(e) {\n          if (typeof(usercallback) === 'function') {\n            usercallback(e.target.result, data);\n          }\n          else {\n            console.log(e.target.result);\n          }\n        };\n      })(data, callback);\n    };\n\n    LokiCatalog.prototype.setAppKey = function (app, key, val, callback) {\n      var transaction = this.db.transaction(['LokiAKV'], 'readwrite');\n      var store = transaction.objectStore('LokiAKV');\n      var index = store.index('appkey');\n      var appkey = app + \",\" + key;\n      var request = index.get(appkey);\n\n      // first try to retrieve an existing object by that key\n      // need to do this because to update an object you need to have id in object, otherwise it will append id with new autocounter and clash the unique index appkey\n      request.onsuccess = function(e) {\n        var res = e.target.result;\n\n        if (res === null || res === undefined) {\n          res = {\n            app:app,\n            key:key,\n            appkey: app + ',' + key,\n            val:val\n          };\n        }\n        else {\n          res.val = val;\n        }\n\n        var requestPut = store.put(res);\n\n        requestPut.onerror = (function(usercallback) {\n          return function(e) {\n            if (typeof(usercallback) === 'function') {\n              usercallback({ success: false });\n            }\n            else {\n              console.error('LokiCatalog.setAppKey (set) onerror');\n              console.error(request.error);\n            }\n          };\n\n        })(callback);\n\n        requestPut.onsuccess = (function(usercallback) {\n          return function(e) {\n            if (typeof(usercallback) === 'function') {\n              usercallback({ success: true });\n            }\n          };\n        })(callback);\n      };\n\n      request.onerror = (function(usercallback) {\n        return function(e) {\n          if (typeof(usercallback) === 'function') {\n            usercallback({ success: false });\n          }\n          else {\n            console.error('LokiCatalog.setAppKey (get) onerror');\n            console.error(request.error);\n          }\n        };\n      })(callback);\n    };\n\n    LokiCatalog.prototype.deleteAppKey = function (id, callback) {\n      var transaction = this.db.transaction(['LokiAKV'], 'readwrite');\n      var store = transaction.objectStore('LokiAKV');\n      var request = store.delete(id);\n\n      request.onsuccess = (function(usercallback) {\n        return function(evt) {\n          if (typeof(usercallback) === 'function') usercallback({ success: true });\n        };\n      })(callback);\n\n      request.onerror = (function(usercallback) {\n        return function(evt) {\n          if (typeof(usercallback) === 'function') {\n            usercallback({ success: false });\n          }\n          else {\n            console.error('LokiCatalog.deleteAppKey raised onerror');\n            console.error(request.error);\n          }\n        };\n      })(callback);\n    };\n\n    LokiCatalog.prototype.getAppKeys = function(app, callback) {\n      var transaction = this.db.transaction(['LokiAKV'], 'readonly');\n      var store = transaction.objectStore('LokiAKV');\n      var index = store.index('app');\n\n      // We want cursor to all values matching our (single) app param\n      var singleKeyRange = IDBKeyRange.only(app);\n\n      // To use one of the key ranges, pass it in as the first argument of openCursor()/openKeyCursor()\n      var cursor = index.openCursor(singleKeyRange);\n\n      // cursor internally, pushing results into this.data[] and return\n      // this.data[] when done (similar to service)\n      var localdata = [];\n\n      cursor.onsuccess = (function(data, callback) {\n        return function(e) {\n          var cursor = e.target.result;\n          if (cursor) {\n            var currObject = cursor.value;\n\n            data.push(currObject);\n\n            cursor.continue();\n          }\n          else {\n            if (typeof(callback) === 'function') {\n              callback(data);\n            }\n            else {\n              console.log(data);\n            }\n          }\n        };\n      })(localdata, callback);\n\n      cursor.onerror = (function(usercallback) {\n        return function(e) {\n          if (typeof(usercallback) === 'function') {\n            usercallback(null);\n          }\n          else {\n            console.error('LokiCatalog.getAppKeys raised onerror');\n            console.error(e);\n          }\n        };\n      })(callback);\n\n    };\n\n    // Hide 'cursoring' and return array of { id: id, key: key }\n    LokiCatalog.prototype.getAllKeys = function (callback) {\n      var transaction = this.db.transaction(['LokiAKV'], 'readonly');\n      var store = transaction.objectStore('LokiAKV');\n      var cursor = store.openCursor();\n\n      var localdata = [];\n\n      cursor.onsuccess = (function(data, callback) {\n        return function(e) {\n          var cursor = e.target.result;\n          if (cursor) {\n            var currObject = cursor.value;\n\n            data.push(currObject);\n\n            cursor.continue();\n          }\n          else {\n            if (typeof(callback) === 'function') {\n              callback(data);\n            }\n            else {\n              console.log(data);\n            }\n          }\n        };\n      })(localdata, callback);\n\n      cursor.onerror = (function(usercallback) {\n        return function(e) {\n          if (typeof(usercallback) === 'function') usercallback(null);\n        };\n      })(callback);\n\n    };\n\n    return LokiIndexedAdapter;\n\n  }());\n}));\n", "/**\n * LokiJS\n * @author Joe Minichino <joe.minichino@gmail.com>\n *\n * A lightweight document oriented javascript database\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // Browser globals\n    root.loki = factory();\n  }\n}(this, function () {\n\n  return (function () {\n    'use strict';\n\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n    function deepFreeze(obj) {\n      var prop, i;\n      if (Array.isArray(obj)) {\n        for (i = 0; i < obj.length; i++) {\n          deepFreeze(obj[i]);\n        }\n        freeze(obj);\n      } else if (obj !== null && (typeof obj === 'object')) {\n        for (prop in obj) {\n          if (obj.hasOwnProperty(prop)) {\n            deepFreeze(obj[prop]);\n          }\n        }\n        freeze(obj);\n      }\n    }\n\n    function freeze(obj) {\n      if (!Object.isFrozen(obj)) {\n        Object.freeze(obj);\n      }\n    }\n\n    function unFreeze(obj) {\n      if (!Object.isFrozen(obj)) {\n        return obj;\n      }\n      return clone(obj, 'shallow');\n    }\n\n    var Utils = {\n      copyProperties: function (src, dest) {\n        var prop;\n        for (prop in src) {\n          dest[prop] = src[prop];\n        }\n      },\n      \n// (Code skipped for WatermelonDB build)\n\n\n      // By default (if usingDotNotation is false), looks up path in\n      // object via `object[path]`\n      //\n      // If `usingDotNotation` is true, then the path is assumed to\n      // represent a nested path. It can be in the form of an array of\n      // field names, or a period delimited string. The function will\n      // look up the value of object[path[0]], and then call\n      // result[path[1]] on the result, etc etc.\n      //\n      // If `usingDotNotation` is true, this function still supports\n      // non nested fields.\n      //\n      // `usingDotNotation` is a performance optimization. The caller\n      // may know that a path is *not* nested. In which case, this\n      // function avoids a costly string.split('.')\n      //\n      // examples:\n      // getIn({a: 1}, \"a\") => 1\n      // getIn({a: 1}, \"a\", true) => 1\n      // getIn({a: {b: 1}}, [\"a\", \"b\"], true) => 1\n      // getIn({a: {b: 1}}, \"a.b\", true) => 1\n      getIn: function (object, path, usingDotNotation) {\n        if (object == null) {\n          return undefined;\n        }\n        if (!usingDotNotation) {\n          return object[path];\n        }\n\n        if (typeof (path) === \"string\") {\n          path = path.split(\".\");\n        }\n\n        if (!Array.isArray(path)) {\n          throw new Error(\"path must be a string or array. Found \" + typeof (path));\n        }\n\n        var index = 0,\n          length = path.length;\n\n        while (object != null && index < length) {\n          object = object[path[index++]];\n        }\n        return (index && index == length) ? object : undefined;\n      }\n    };\n\n    // wrapping in object to expose to default export for potential user override.\n    // warning: overriding these methods will override behavior for all loki db instances in memory.\n    // warning: if you use binary indices these comparators should be the same for all inserts/updates/removes.\n    var Comparators = {\n      aeq: aeqHelper,\n      lt: ltHelper,\n      gt: gtHelper\n    };\n\n    /** Helper function for determining 'loki' abstract equality which is a little more abstract than ==\n     *     aeqHelper(5, '5') === true\n     *     aeqHelper(5.0, '5') === true\n     *     aeqHelper(new Date(\"1/1/2011\"), new Date(\"1/1/2011\")) === true\n     *     aeqHelper({a:1}, {z:4}) === true (all objects sorted equally)\n     *     aeqHelper([1, 2, 3], [1, 3]) === false\n     *     aeqHelper([1, 2, 3], [1, 2, 3]) === true\n     *     aeqHelper(undefined, null) === true\n     */\n    function aeqHelper(prop1, prop2) {\n      var cv1, cv2, t1, t2;\n\n      if (prop1 === prop2) return true;\n\n      // 'falsy' and Boolean handling\n      if (!prop1 || !prop2 || prop1 === true || prop2 === true || prop1 !== prop1 || prop2 !== prop2) {\n        // dates and NaN conditions (typed dates before serialization)\n        switch (prop1) {\n          case undefined: t1 = 1; break;\n          case null: t1 = 1; break;\n          case false: t1 = 3; break;\n          case true: t1 = 4; break;\n          case \"\": t1 = 5; break;\n          default: t1 = (prop1 === prop1) ? 9 : 0; break;\n        }\n\n        switch (prop2) {\n          case undefined: t2 = 1; break;\n          case null: t2 = 1; break;\n          case false: t2 = 3; break;\n          case true: t2 = 4; break;\n          case \"\": t2 = 5; break;\n          default: t2 = (prop2 === prop2) ? 9 : 0; break;\n        }\n\n        // one or both is edge case\n        if (t1 !== 9 || t2 !== 9) {\n          return (t1 === t2);\n        }\n      }\n\n      // Handle 'Number-like' comparisons\n      cv1 = Number(prop1);\n      cv2 = Number(prop2);\n\n      // if one or both are 'number-like'...\n      if (cv1 === cv1 || cv2 === cv2) {\n        return (cv1 === cv2);\n      }\n\n      // not strict equal nor less than nor gt so must be mixed types, convert to string and use that to compare\n      cv1 = prop1.toString();\n      cv2 = prop2.toString();\n\n      return (cv1 == cv2);\n    }\n\n    /** Helper function for determining 'less-than' conditions for ops, sorting, and binary indices.\n     *     In the future we might want $lt and $gt ops to use their own functionality/helper.\n     *     Since binary indices on a property might need to index [12, NaN, new Date(), Infinity], we\n     *     need this function (as well as gtHelper) to always ensure one value is LT, GT, or EQ to another.\n     */\n    function ltHelper(prop1, prop2, equal) {\n      var cv1, cv2, t1, t2;\n\n      // if one of the params is falsy or strictly true or not equal to itself\n      // 0, 0.0, \"\", NaN, null, undefined, not defined, false, true\n      if (!prop1 || !prop2 || prop1 === true || prop2 === true || prop1 !== prop1 || prop2 !== prop2) {\n        switch (prop1) {\n          case undefined: t1 = 1; break;\n          case null: t1 = 1; break;\n          case false: t1 = 3; break;\n          case true: t1 = 4; break;\n          case \"\": t1 = 5; break;\n          // if strict equal probably 0 so sort higher, otherwise probably NaN so sort lower than even null\n          default: t1 = (prop1 === prop1) ? 9 : 0; break;\n        }\n\n        switch (prop2) {\n          case undefined: t2 = 1; break;\n          case null: t2 = 1; break;\n          case false: t2 = 3; break;\n          case true: t2 = 4; break;\n          case \"\": t2 = 5; break;\n          default: t2 = (prop2 === prop2) ? 9 : 0; break;\n        }\n\n        // one or both is edge case\n        if (t1 !== 9 || t2 !== 9) {\n          return (t1 === t2) ? equal : (t1 < t2);\n        }\n      }\n\n      // if both are numbers (string encoded or not), compare as numbers\n      cv1 = Number(prop1);\n      cv2 = Number(prop2);\n\n      if (cv1 === cv1 && cv2 === cv2) {\n        if (cv1 < cv2) return true;\n        if (cv1 > cv2) return false;\n        return equal;\n      }\n\n      if (cv1 === cv1 && cv2 !== cv2) {\n        return true;\n      }\n\n      if (cv2 === cv2 && cv1 !== cv1) {\n        return false;\n      }\n\n      if (prop1 < prop2) return true;\n      if (prop1 > prop2) return false;\n      if (prop1 == prop2) return equal;\n\n      // not strict equal nor less than nor gt so must be mixed types, convert to string and use that to compare\n      cv1 = prop1.toString();\n      cv2 = prop2.toString();\n\n      if (cv1 < cv2) {\n        return true;\n      }\n\n      if (cv1 == cv2) {\n        return equal;\n      }\n\n      return false;\n    }\n\n    function gtHelper(prop1, prop2, equal) {\n      var cv1, cv2, t1, t2;\n\n      // 'falsy' and Boolean handling\n      if (!prop1 || !prop2 || prop1 === true || prop2 === true || prop1 !== prop1 || prop2 !== prop2) {\n        switch (prop1) {\n          case undefined: t1 = 1; break;\n          case null: t1 = 1; break;\n          case false: t1 = 3; break;\n          case true: t1 = 4; break;\n          case \"\": t1 = 5; break;\n          // NaN 0\n          default: t1 = (prop1 === prop1) ? 9 : 0; break;\n        }\n\n        switch (prop2) {\n          case undefined: t2 = 1; break;\n          case null: t2 = 1; break;\n          case false: t2 = 3; break;\n          case true: t2 = 4; break;\n          case \"\": t2 = 5; break;\n          default: t2 = (prop2 === prop2) ? 9 : 0; break;\n        }\n\n        // one or both is edge case\n        if (t1 !== 9 || t2 !== 9) {\n          return (t1 === t2) ? equal : (t1 > t2);\n        }\n      }\n\n      // if both are numbers (string encoded or not), compare as numbers\n      cv1 = Number(prop1);\n      cv2 = Number(prop2);\n      if (cv1 === cv1 && cv2 === cv2) {\n        if (cv1 > cv2) return true;\n        if (cv1 < cv2) return false;\n        return equal;\n      }\n\n      if (cv1 === cv1 && cv2 !== cv2) {\n        return false;\n      }\n\n      if (cv2 === cv2 && cv1 !== cv1) {\n        return true;\n      }\n\n      if (prop1 > prop2) return true;\n      if (prop1 < prop2) return false;\n      if (prop1 == prop2) return equal;\n\n      // not strict equal nor less than nor gt so must be dates or mixed types\n      // convert to string and use that to compare\n      cv1 = prop1.toString();\n      cv2 = prop2.toString();\n\n      if (cv1 > cv2) {\n        return true;\n      }\n\n      if (cv1 == cv2) {\n        return equal;\n      }\n\n      return false;\n    }\n\n    function sortHelper(prop1, prop2, desc) {\n      if (Comparators.aeq(prop1, prop2)) return 0;\n\n      if (Comparators.lt(prop1, prop2, false)) {\n        return (desc) ? (1) : (-1);\n      }\n\n      if (Comparators.gt(prop1, prop2, false)) {\n        return (desc) ? (-1) : (1);\n      }\n\n      // not lt, not gt so implied equality-- date compatible\n      return 0;\n    }\n\n    /**\n     * compoundeval() - helper function for compoundsort(), performing individual object comparisons\n     *\n     * @param {array} properties - array of property names, in order, by which to evaluate sort order\n     * @param {object} obj1 - first object to compare\n     * @param {object} obj2 - second object to compare\n     * @returns {integer} 0, -1, or 1 to designate if identical (sortwise) or which should be first\n     */\n    function compoundeval(properties, obj1, obj2) {\n      var res = 0;\n      var prop, field, val1, val2, arr, path;\n      for (var i = 0, len = properties.length; i < len; i++) {\n        prop = properties[i];\n        field = prop[0];\n        if (~field.indexOf('.')) {\n          arr = field.split('.');\n          val1 = Utils.getIn(obj1, arr, true);\n          val2 = Utils.getIn(obj2, arr, true);\n        } else {\n          val1 = obj1[field];\n          val2 = obj2[field];\n        }\n        res = sortHelper(val1, val2, prop[1]);\n        if (res !== 0) {\n          return res;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * dotSubScan - helper function used for dot notation queries.\n     *\n     * @param {object} root - object to traverse\n     * @param {array} paths - array of properties to drill into\n     * @param {function} fun - evaluation function to test with\n     * @param {any} value - comparative value to also pass to (compare) fun\n     * @param {any} extra - extra arg to also pass to compare fun\n     * @param {number} poffset - index of the item in 'paths' to start the sub-scan from\n     */\n    function dotSubScan(root, paths, fun, value, extra, poffset) {\n      var pathOffset = poffset || 0;\n      var path = paths[pathOffset];\n\n      var valueFound = false;\n      var element;\n      if (typeof root === 'object' && path in root) {\n        element = root[path];\n      }\n      if (pathOffset + 1 >= paths.length) {\n        // if we have already expanded out the dot notation,\n        // then just evaluate the test function and value on the element\n        valueFound = fun(element, value, extra);\n      } else if (Array.isArray(element)) {\n        for (var index = 0, len = element.length; index < len; index += 1) {\n          valueFound = dotSubScan(element[index], paths, fun, value, extra, pathOffset + 1);\n          if (valueFound === true) {\n            break;\n          }\n        }\n      } else {\n        valueFound = dotSubScan(element, paths, fun, value, extra, pathOffset + 1);\n      }\n\n      return valueFound;\n    }\n\n    function containsCheckFn(a) {\n      if (typeof a === 'string' || Array.isArray(a)) {\n        return function (b) {\n          return a.indexOf(b) !== -1;\n        };\n      } else if (typeof a === 'object' && a !== null) {\n        return function (b) {\n          return hasOwnProperty.call(a, b);\n        };\n      }\n      return null;\n    }\n\n    function doQueryOp(val, op, record) {\n      for (var p in op) {\n        if (hasOwnProperty.call(op, p)) {\n          return LokiOps[p](val, op[p], record);\n        }\n      }\n      return false;\n    }\n\n    var LokiOps = {\n      // comparison operators\n      // a is the value in the collection\n      // b is the query value\n      $eq: function (a, b) {\n        return a === b;\n      },\n\n      // abstract/loose equality\n      $aeq: function (a, b) {\n        return a == b;\n      },\n\n      $ne: function (a, b) {\n        // ecma 5 safe test for NaN\n        if (b !== b) {\n          // ecma 5 test value is not NaN\n          return (a === a);\n        }\n\n        return a !== b;\n      },\n      // date equality / loki abstract equality test\n      $dteq: function (a, b) {\n        return Comparators.aeq(a, b);\n      },\n\n      // loki comparisons: return identical unindexed results as indexed comparisons\n      $gt: function (a, b) {\n        return Comparators.gt(a, b, false);\n      },\n\n      $gte: function (a, b) {\n        return Comparators.gt(a, b, true);\n      },\n\n      $lt: function (a, b) {\n        return Comparators.lt(a, b, false);\n      },\n\n      $lte: function (a, b) {\n        return Comparators.lt(a, b, true);\n      },\n\n      // lightweight javascript comparisons\n      $jgt: function (a, b) {\n        return a > b;\n      },\n\n      $jgte: function (a, b) {\n        return a >= b;\n      },\n\n      $jlt: function (a, b) {\n        return a < b;\n      },\n\n      $jlte: function (a, b) {\n        return a <= b;\n      },\n\n      // ex : coll.find({'orderCount': {$between: [10, 50]}});\n      $between: function (a, vals) {\n        if (a === undefined || a === null) return false;\n        return (Comparators.gt(a, vals[0], true) && Comparators.lt(a, vals[1], true));\n      },\n\n      $jbetween: function (a, vals) {\n        if (a === undefined || a === null) return false;\n        return (a >= vals[0] && a <= vals[1]);\n      },\n\n      $in: function (a, b) {\n        return b.indexOf(a) !== -1;\n      },\n\n      $inSet: function(a, b) {\n        return b.has(a);\n      },\n\n      $nin: function (a, b) {\n        return b.indexOf(a) === -1;\n      },\n\n      $keyin: function (a, b) {\n        return a in b;\n      },\n\n      $nkeyin: function (a, b) {\n        return !(a in b);\n      },\n\n      $definedin: function (a, b) {\n        return b[a] !== undefined;\n      },\n\n      $undefinedin: function (a, b) {\n        return b[a] === undefined;\n      },\n\n      $regex: function (a, b) {\n        return b.test(a);\n      },\n\n      $containsString: function (a, b) {\n        return (typeof a === 'string') && (a.indexOf(b) !== -1);\n      },\n\n      $containsNone: function (a, b) {\n        return !LokiOps.$containsAny(a, b);\n      },\n\n      $containsAny: function (a, b) {\n        var checkFn = containsCheckFn(a);\n        if (checkFn !== null) {\n          return (Array.isArray(b)) ? (b.some(checkFn)) : (checkFn(b));\n        }\n        return false;\n      },\n\n      $contains: function (a, b) {\n        var checkFn = containsCheckFn(a);\n        if (checkFn !== null) {\n          return (Array.isArray(b)) ? (b.every(checkFn)) : (checkFn(b));\n        }\n        return false;\n      },\n\n      $elemMatch: function (a, b) {\n        if (Array.isArray(a)) {\n          return a.some(function (item) {\n            return Object.keys(b).every(function (property) {\n              var filter = b[property];\n              if (!(typeof filter === 'object' && filter)) {\n                filter = { $eq: filter };\n              }\n\n              if (property.indexOf('.') !== -1) {\n                return dotSubScan(item, property.split('.'), doQueryOp, b[property], item);\n              }\n              return doQueryOp(item[property], filter, item);\n            });\n          });\n        }\n        return false;\n      },\n\n      $type: function (a, b, record) {\n        var type = typeof a;\n        if (type === 'object') {\n          if (Array.isArray(a)) {\n            type = 'array';\n          } else if (a instanceof Date) {\n            type = 'date';\n          }\n        }\n        return (typeof b !== 'object') ? (type === b) : doQueryOp(type, b, record);\n      },\n\n      $finite: function (a, b) {\n        return (b === isFinite(a));\n      },\n\n      $size: function (a, b, record) {\n        if (Array.isArray(a)) {\n          return (typeof b !== 'object') ? (a.length === b) : doQueryOp(a.length, b, record);\n        }\n        return false;\n      },\n\n      $len: function (a, b, record) {\n        if (typeof a === 'string') {\n          return (typeof b !== 'object') ? (a.length === b) : doQueryOp(a.length, b, record);\n        }\n        return false;\n      },\n\n      $where: function (a, b) {\n        return b(a) === true;\n      },\n\n      // field-level logical operators\n      // a is the value in the collection\n      // b is the nested query operation (for '$not')\n      //   or an array of nested query operations (for '$and' and '$or')\n      $not: function (a, b, record) {\n        return !doQueryOp(a, b, record);\n      },\n\n      $and: function (a, b, record) {\n        for (var idx = 0, len = b.length; idx < len; idx += 1) {\n          if (!doQueryOp(a, b[idx], record)) {\n            return false;\n          }\n        }\n        return true;\n      },\n\n      $or: function (a, b, record) {\n        for (var idx = 0, len = b.length; idx < len; idx += 1) {\n          if (doQueryOp(a, b[idx], record)) {\n            return true;\n          }\n        }\n        return false;\n      },\n\n      $exists: function (a, b) {\n        if (b) {\n          return a !== undefined;\n        } else {\n          return a === undefined;\n        }\n      }\n    };\n\n    // ops that can be used with { $$op: 'column-name' } syntax\n    var valueLevelOps = ['$eq', '$aeq', '$ne', '$dteq', '$gt', '$gte', '$lt', '$lte', '$jgt', '$jgte', '$jlt', '$jlte', '$type'];\n    valueLevelOps.forEach(function (op) {\n      var fun = LokiOps[op];\n      LokiOps['$' + op] = function (a, spec, record) {\n        if (typeof spec === 'string') {\n          return fun(a, record[spec]);\n        } else if (typeof spec === 'function') {\n          return fun(a, spec(record));\n        } else {\n          throw new Error('Invalid argument to $$ matcher');\n        }\n      };\n    });\n\n    // if an op is registered in this object, our 'calculateRange' can use it with our binary indices.\n    // if the op is registered to a function, we will run that function/op as a 2nd pass filter on results.\n    // those 2nd pass filter functions should be similar to LokiOps functions, accepting 2 vals to compare.\n    var indexedOps = {\n      $eq: LokiOps.$eq,\n      $aeq: true,\n      $dteq: true,\n      $gt: true,\n      $gte: true,\n      $lt: true,\n      $lte: true,\n      $in: true,\n      $between: true\n    };\n\n    function clone(data, method) {\n      if (data === null || data === undefined) {\n        return null;\n      }\n\n      var cloneMethod = method || 'parse-stringify',\n        cloned;\n\n      switch (cloneMethod) {\n        case \"parse-stringify\":\n          cloned = JSON.parse(JSON.stringify(data));\n          break;\n        \n// (Code skipped for WatermelonDB build)\n\n        default:\n          break;\n      }\n\n      return cloned;\n    }\n\n    function cloneObjectArray(objarray, method) {\n      if (method == \"parse-stringify\") {\n        return clone(objarray, method);\n      }\n      var result = [];\n      for (var i = 0, len = objarray.length; i < len; i++) {\n        result[i] = clone(objarray[i], method);\n      }\n      return result;\n    }\n\n    \n// (Code skipped for WatermelonDB build)\n\n\n    /**\n     * LokiEventEmitter is a minimalist version of EventEmitter. It enables any\n     * constructor that inherits EventEmitter to emit events and trigger\n     * listeners that have been added to the event through the on(event, callback) method\n     *\n     * @constructor LokiEventEmitter\n     */\n    function LokiEventEmitter() { }\n\n    /**\n     * @prop {hashmap} events - a hashmap, with each property being an array of callbacks\n     * @memberof LokiEventEmitter\n     */\n    LokiEventEmitter.prototype.events = {};\n\n    /**\n     * @prop {boolean} asyncListeners - boolean determines whether or not the callbacks associated with each event\n     * should happen in an async fashion or not\n     * Default is false, which means events are synchronous\n     * @memberof LokiEventEmitter\n     */\n    LokiEventEmitter.prototype.asyncListeners = false;\n\n    /**\n     * on(eventName, listener) - adds a listener to the queue of callbacks associated to an event\n     * @param {string|string[]} eventName - the name(s) of the event(s) to listen to\n     * @param {function} listener - callback function of listener to attach\n     * @returns {int} the index of the callback in the array of listeners for a particular event\n     * @memberof LokiEventEmitter\n     */\n    LokiEventEmitter.prototype.on = function (eventName, listener) {\n      var event;\n      var self = this;\n\n      if (Array.isArray(eventName)) {\n        eventName.forEach(function (currentEventName) {\n          self.on(currentEventName, listener);\n        });\n        return listener;\n      }\n\n      event = this.events[eventName];\n      if (!event) {\n        event = this.events[eventName] = [];\n      }\n      event.push(listener);\n      return listener;\n    };\n\n    /**\n     * emit(eventName, data) - emits a particular event\n     * with the option of passing optional parameters which are going to be processed by the callback\n     * provided signatures match (i.e. if passing emit(event, arg0, arg1) the listener should take two parameters)\n     * @param {string} eventName - the name of the event\n     * @param {object=} data - optional object passed with the event\n     * @memberof LokiEventEmitter\n     */\n    LokiEventEmitter.prototype.emit = function (eventName) {\n      var self = this;\n      var selfArgs;\n      if (eventName && this.events[eventName]) {\n        if (this.events[eventName].length) {\n          selfArgs = Array.prototype.slice.call(arguments, 1);\n          this.events[eventName].forEach(function (listener) {\n            if (self.asyncListeners) {\n              setTimeout(function () {\n                listener.apply(self, selfArgs);\n              }, 1);\n            } else {\n              listener.apply(self, selfArgs);\n            }\n          });\n        }\n      } else {\n        throw new Error('No event ' + eventName + ' defined');\n      }\n    };\n\n    /**\n     * Alias of LokiEventEmitter.prototype.on\n     * addListener(eventName, listener) - adds a listener to the queue of callbacks associated to an event\n     * @param {string|string[]} eventName - the name(s) of the event(s) to listen to\n     * @param {function} listener - callback function of listener to attach\n     * @returns {int} the index of the callback in the array of listeners for a particular event\n     * @memberof LokiEventEmitter\n     */\n    LokiEventEmitter.prototype.addListener = LokiEventEmitter.prototype.on;\n\n    /**\n     * removeListener() - removes the listener at position 'index' from the event 'eventName'\n     * @param {string|string[]} eventName - the name(s) of the event(s) which the listener is attached to\n     * @param {function} listener - the listener callback function to remove from emitter\n     * @memberof LokiEventEmitter\n     */\n    LokiEventEmitter.prototype.removeListener = function (eventName, listener) {\n      var self = this;\n\n      if (Array.isArray(eventName)) {\n        eventName.forEach(function (currentEventName) {\n          self.removeListener(currentEventName, listener);\n        });\n\n        return;\n      }\n\n      if (this.events[eventName]) {\n        var listeners = this.events[eventName];\n        listeners.splice(listeners.indexOf(listener), 1);\n      }\n    };\n\n    /**\n     * Loki: The main database class\n     * @constructor Loki\n     * @implements LokiEventEmitter\n     * @param {string} filename - name of the file to be saved to\n     * @param {object=} options - (Optional) config options object\n     * @param {string} options.env - override environment detection as 'NODEJS', 'BROWSER', 'CORDOVA'\n     * @param {boolean} [options.verbose=false] - enable console output\n     * @param {boolean} [options.autosave=false] - enables autosave\n     * @param {int} [options.autosaveInterval=5000] - time interval (in milliseconds) between saves (if dirty)\n     * @param {boolean} [options.autoload=false] - enables autoload on loki instantiation\n     * @param {function} options.autoloadCallback - user callback called after database load\n     * @param {adapter} options.adapter - an instance of a loki persistence adapter\n     * @param {string} [options.serializationMethod='normal'] - ['normal', 'pretty', 'destructured']\n     * @param {string} options.destructureDelimiter - string delimiter used for destructured serialization\n     * @param {boolean} [options.throttledSaves=true] - debounces multiple calls to to saveDatabase reducing number of disk I/O operations\n                                                and guaranteeing proper serialization of the calls.\n     */\n    function Loki(filename, options) {\n      this.filename = filename || 'loki.db';\n      this.collections = [];\n\n      // persist version of code which created the database to the database.\n      // could use for upgrade scenarios\n      this.databaseVersion = 1.5;\n      this.engineVersion = 1.5;\n\n      // autosave support (disabled by default)\n      // pass autosave: true, autosaveInterval: 6000 in options to set 6 second autosave\n      this.autosave = false;\n      this.autosaveInterval = 5000;\n      this.autosaveHandle = null;\n      this.throttledSaves = true;\n\n      this.options = {};\n\n      // currently keeping persistenceMethod and persistenceAdapter as loki level properties that\n      // will not or cannot be deserialized.  You are required to configure persistence every time\n      // you instantiate a loki object (or use default environment detection) in order to load the database anyways.\n\n      // persistenceMethod could be 'fs', 'localStorage', or 'adapter'\n      // this is optional option param, otherwise environment detection will be used\n      // if user passes their own adapter we will force this method to 'adapter' later, so no need to pass method option.\n      this.persistenceMethod = null;\n\n      // retain reference to optional (non-serializable) persistenceAdapter 'instance'\n      this.persistenceAdapter = null;\n\n      // flags used to throttle saves\n      this.throttledSavePending = false;\n      this.throttledCallbacks = [];\n\n      // enable console output if verbose flag is set (disabled by default)\n      this.verbose = options && options.hasOwnProperty('verbose') ? options.verbose : false;\n\n      this.events = {\n        'init': [],\n        'loaded': [],\n        'flushChanges': [],\n        'close': [],\n        'changes': [],\n        'warning': []\n      };\n\n      \n// (Code skipped for WatermelonDB build)\n\n\n      this.configureOptions(options, true);\n\n      \n// (Code skipped for WatermelonDB build)\n\n    }\n\n    // db class is an EventEmitter\n    Loki.prototype = new LokiEventEmitter();\n    Loki.prototype.constructor = Loki;\n\n    // experimental support for browserify's abstract syntax scan to pick up dependency of indexed adapter.\n    // Hopefully, once this hits npm a browserify require of lokijs should scan the main file and detect this indexed adapter reference.\n    \n// (Code skipped for WatermelonDB build)\n\n\n    /**\n     * Allows reconfiguring database options\n     *\n     * @param {object} options - configuration options to apply to loki db object\n     * @param {string} options.env - override environment detection as 'NODEJS', 'BROWSER', 'CORDOVA'\n     * @param {boolean} options.verbose - enable console output (default is 'false')\n     * @param {boolean} options.autosave - enables autosave\n     * @param {int} options.autosaveInterval - time interval (in milliseconds) between saves (if dirty)\n     * @param {boolean} options.autoload - enables autoload on loki instantiation\n     * @param {function} options.autoloadCallback - user callback called after database load\n     * @param {adapter} options.adapter - an instance of a loki persistence adapter\n     * @param {string} options.serializationMethod - ['normal', 'pretty', 'destructured']\n     * @param {string} options.destructureDelimiter - string delimiter used for destructured serialization\n     * @param {boolean} initialConfig - (internal) true is passed when loki ctor is invoking\n     * @memberof Loki\n     */\n    Loki.prototype.configureOptions = function (options, initialConfig) {\n      var defaultPersistence = {\n        'NODEJS': 'fs',\n        'BROWSER': 'localStorage',\n        'CORDOVA': 'localStorage',\n        'MEMORY': 'memory'\n      },\n        persistenceMethods = {\n          \n// (Code skipped for WatermelonDB build)\n\n          'memory': LokiMemoryAdapter\n        };\n\n      this.options = {};\n\n      this.persistenceMethod = null;\n      // retain reference to optional persistence adapter 'instance'\n      // currently keeping outside options because it can't be serialized\n      this.persistenceAdapter = null;\n\n      // process the options\n      if (typeof (options) !== 'undefined') {\n        this.options = options;\n\n        if (this.options.hasOwnProperty('persistenceMethod')) {\n          // check if the specified persistence method is known\n          if (typeof (persistenceMethods[options.persistenceMethod]) == 'function') {\n            this.persistenceMethod = options.persistenceMethod;\n            this.persistenceAdapter = new persistenceMethods[options.persistenceMethod]();\n          }\n          // should be throw an error here, or just fall back to defaults ??\n        }\n\n        // if user passes adapter, set persistence mode to adapter and retain persistence adapter instance\n        if (this.options.hasOwnProperty('adapter')) {\n          this.persistenceMethod = 'adapter';\n          this.persistenceAdapter = options.adapter;\n          this.options.adapter = null;\n\n          // if true, will keep track of dirty ids\n          this.isIncremental = this.persistenceAdapter.mode === 'incremental';\n        }\n\n\n        // if they want to load database on loki instantiation, now is a good time to load... after adapter set and before possible autosave initiation\n        if (options.autoload && initialConfig) {\n          // for autoload, let the constructor complete before firing callback\n          var self = this;\n          setTimeout(function () {\n            self.loadDatabase(options, options.autoloadCallback);\n          }, 1);\n        }\n\n        if (this.options.hasOwnProperty('autosaveInterval')) {\n          this.autosaveDisable();\n          this.autosaveInterval = parseInt(this.options.autosaveInterval, 10);\n        }\n\n        if (this.options.hasOwnProperty('autosave') && this.options.autosave) {\n          this.autosaveDisable();\n          this.autosave = true;\n\n          if (this.options.hasOwnProperty('autosaveCallback')) {\n            this.autosaveEnable(options, options.autosaveCallback);\n          } else {\n            this.autosaveEnable();\n          }\n        }\n\n        if (this.options.hasOwnProperty('throttledSaves')) {\n          this.throttledSaves = this.options.throttledSaves;\n        }\n      } // end of options processing\n\n      // ensure defaults exists for options which were not set\n      if (!this.options.hasOwnProperty('serializationMethod')) {\n        this.options.serializationMethod = 'normal';\n      }\n\n      // ensure passed or default option exists\n      if (!this.options.hasOwnProperty('destructureDelimiter')) {\n        this.options.destructureDelimiter = '$<\\n';\n      }\n\n      // if by now there is no adapter specified by user nor derived from persistenceMethod: use sensible defaults\n      if (this.persistenceAdapter === null) {\n        this.persistenceMethod = defaultPersistence[this.ENV];\n        if (this.persistenceMethod) {\n          this.persistenceAdapter = new persistenceMethods[this.persistenceMethod]();\n        }\n      }\n\n    };\n\n    /**\n     * Copies 'this' database into a new Loki instance. Object references are shared to make lightweight.\n     *\n     * @param {object} options - apply or override collection level settings\n     * @param {bool} options.removeNonSerializable - nulls properties not safe for serialization.\n     * @memberof Loki\n     */\n    Loki.prototype.copy = function (options) {\n      // in case running in an environment without accurate environment detection, pass 'NA'\n      var databaseCopy = new Loki(this.filename, { env: \"NA\" });\n      var clen, idx;\n\n      options = options || {};\n\n      // currently inverting and letting loadJSONObject do most of the work\n      databaseCopy.loadJSONObject(this, { retainDirtyFlags: true });\n\n      // since our JSON serializeReplacer is not invoked for reference database adapters, this will let us mimic\n      if (options.hasOwnProperty(\"removeNonSerializable\") && options.removeNonSerializable === true) {\n        databaseCopy.autosaveHandle = null;\n        databaseCopy.persistenceAdapter = null;\n\n        clen = databaseCopy.collections.length;\n        for (idx = 0; idx < clen; idx++) {\n          databaseCopy.collections[idx].constraints = null;\n          databaseCopy.collections[idx].ttl = null;\n        }\n      }\n\n      return databaseCopy;\n    };\n\n    /**\n     * Adds a collection to the database.\n     * @param {string} name - name of collection to add\n     * @param {object=} options - (optional) options to configure collection with.\n     * @param {array=} [options.unique=[]] - array of property names to define unique constraints for\n     * @param {array=} [options.exact=[]] - array of property names to define exact constraints for\n     * @param {array=} [options.indices=[]] - array property names to define binary indexes for\n     * @param {boolean} [options.asyncListeners=false] - whether listeners are called asynchronously\n     * @param {boolean} [options.disableMeta=false] - set to true to disable meta property on documents\n     * @param {boolean} [options.disableChangesApi=true] - set to false to enable Changes Api\n     * @param {boolean} [options.disableDeltaChangesApi=true] - set to false to enable Delta Changes API (requires Changes API, forces cloning)\n     * @param {boolean} [options.autoupdate=false] - use Object.observe to update objects automatically\n     * @param {boolean} [options.clone=false] - specify whether inserts and queries clone to/from user\n     * @param {string} [options.cloneMethod='parse-stringify'] - 'parse-stringify', 'jquery-extend-deep', 'shallow, 'shallow-assign'\n     * @param {int=} options.ttl - age of document (in ms.) before document is considered aged/stale.\n     * @param {int=} options.ttlInterval - time interval for clearing out 'aged' documents; not set by default.\n     * @returns {Collection} a reference to the collection which was just added\n     * @memberof Loki\n     */\n    Loki.prototype.addCollection = function (name, options) {\n      var i,\n        len = this.collections.length;\n\n      \n// (Code skipped for WatermelonDB build)\n\n\n      for (i = 0; i < len; i += 1) {\n        if (this.collections[i].name === name) {\n          return this.collections[i];\n        }\n      }\n\n      var collection = new Collection(name, options);\n      collection.isIncremental = this.isIncremental;\n      this.collections.push(collection);\n\n      if (this.verbose)\n        collection.lokiConsoleWrapper = console;\n\n      return collection;\n    };\n\n    Loki.prototype.loadCollection = function (collection) {\n      if (!collection.name) {\n        throw new Error('Collection must have a name property to be loaded');\n      }\n      this.collections.push(collection);\n    };\n\n    /**\n     * Retrieves reference to a collection by name.\n     * @param {string} collectionName - name of collection to look up\n     * @returns {Collection} Reference to collection in database by that name, or null if not found\n     * @memberof Loki\n     */\n    Loki.prototype.getCollection = function (collectionName) {\n      var i,\n        len = this.collections.length;\n\n      for (i = 0; i < len; i += 1) {\n        if (this.collections[i].name === collectionName) {\n          return this.collections[i];\n        }\n      }\n\n      // no such collection\n      this.emit('warning', 'collection ' + collectionName + ' not found');\n      return null;\n    };\n\n    /**\n     * Renames an existing loki collection\n     * @param {string} oldName - name of collection to rename\n     * @param {string} newName - new name of collection\n     * @returns {Collection} reference to the newly renamed collection\n     * @memberof Loki\n     */\n    Loki.prototype.renameCollection = function (oldName, newName) {\n      var c = this.getCollection(oldName);\n\n      if (c) {\n        c.name = newName;\n      }\n\n      return c;\n    };\n    \n// (Code skipped for WatermelonDB build)\n\n    /**\n     * Removes a collection from the database.\n     * @param {string} collectionName - name of collection to remove\n     * @memberof Loki\n     */\n    Loki.prototype.removeCollection = function (collectionName) {\n      var i,\n        len = this.collections.length;\n\n      for (i = 0; i < len; i += 1) {\n        if (this.collections[i].name === collectionName) {\n          var tmpcol = new Collection(collectionName, {});\n          var curcol = this.collections[i];\n          for (var prop in curcol) {\n            if (curcol.hasOwnProperty(prop) && tmpcol.hasOwnProperty(prop)) {\n              curcol[prop] = tmpcol[prop];\n            }\n          }\n          this.collections.splice(i, 1);\n          return;\n        }\n      }\n    };\n\n    Loki.prototype.getName = function () {\n      return this.name;\n    };\n\n    /**\n     * serializeReplacer - used to prevent certain properties from being serialized\n     *\n     */\n    Loki.prototype.serializeReplacer = function (key, value) {\n      switch (key) {\n        case 'autosaveHandle':\n        case 'persistenceAdapter':\n        case 'constraints':\n        case 'ttl':\n          return null;\n        case 'throttledSavePending':\n        case 'throttledCallbacks':\n          return undefined;\n        case 'lokiConsoleWrapper':\n          return null;\n        default:\n          return value;\n      }\n    };\n\n    /**\n     * Serialize database to a string which can be loaded via {@link Loki#loadJSON}\n     *\n     * @returns {string} Stringified representation of the loki database.\n     * @memberof Loki\n     */\n    Loki.prototype.serialize = function (options) {\n      options = options || {};\n\n      if (!options.hasOwnProperty(\"serializationMethod\")) {\n        options.serializationMethod = this.options.serializationMethod;\n      }\n\n      switch (options.serializationMethod) {\n        case \"normal\": return JSON.stringify(this, this.serializeReplacer);\n        case \"pretty\": return JSON.stringify(this, this.serializeReplacer, 2);\n        case \"destructured\": return this.serializeDestructured(); // use default options\n        default: return JSON.stringify(this, this.serializeReplacer);\n      }\n    };\n\n    // alias of serialize\n    Loki.prototype.toJson = Loki.prototype.serialize;\n    \n// (Code skipped for WatermelonDB build)\n\n    /**\n     * Inflates a loki database from a serialized JSON string\n     *\n     * @param {string} serializedDb - a serialized loki database string\n     * @param {object=} options - apply or override collection level settings\n     * @param {bool} options.retainDirtyFlags - whether collection dirty flags will be preserved\n     * @memberof Loki\n     */\n    Loki.prototype.loadJSON = function (serializedDb, options) {\n      var dbObject;\n      if (serializedDb.length === 0) {\n        dbObject = {};\n      } else {\n\n        // using option defined in instantiated db not what was in serialized db\n        switch (this.options.serializationMethod) {\n          case \"normal\":\n          case \"pretty\": dbObject = JSON.parse(serializedDb); break;\n          case \"destructured\": dbObject = this.deserializeDestructured(serializedDb); break;\n          default: dbObject = JSON.parse(serializedDb); break;\n        }\n      }\n\n      this.loadJSONObject(dbObject, options);\n    };\n\n    /**\n     * Inflates a loki database from a JS object\n     *\n     * @param {object} dbObject - a serialized loki database string\n     * @param {object=} options - apply or override collection level settings\n     * @param {bool} options.retainDirtyFlags - whether collection dirty flags will be preserved\n     * @memberof Loki\n     */\n    Loki.prototype.loadJSONObject = function (dbObject, options) {\n      var i = 0,\n        len = dbObject.collections ? dbObject.collections.length : 0,\n        coll,\n        copyColl,\n        clen,\n        j,\n        loader,\n        collObj;\n\n      this.name = dbObject.name;\n\n      // restore save throttled boolean only if not defined in options\n      if (dbObject.hasOwnProperty('throttledSaves') && options && !options.hasOwnProperty('throttledSaves')) {\n        this.throttledSaves = dbObject.throttledSaves;\n      }\n\n      this.collections = [];\n\n      function makeLoader(coll) {\n        var collOptions = options[coll.name];\n        var inflater;\n\n        if (collOptions.proto) {\n          inflater = collOptions.inflate || Utils.copyProperties;\n\n          return function (data) {\n            var collObj = new (collOptions.proto)();\n            inflater(data, collObj);\n            return collObj;\n          };\n        }\n\n        return collOptions.inflate;\n      }\n\n      for (i; i < len; i += 1) {\n        coll = dbObject.collections[i];\n\n        copyColl = this.addCollection(coll.name, {\n          disableChangesApi: coll.disableChangesApi,\n          disableDeltaChangesApi: coll.disableDeltaChangesApi,\n          disableMeta: coll.disableMeta,\n          disableFreeze: coll.hasOwnProperty('disableFreeze') ? coll.disableFreeze : true\n        });\n\n        copyColl.adaptiveBinaryIndices = coll.hasOwnProperty('adaptiveBinaryIndices') ? (coll.adaptiveBinaryIndices === true) : false;\n        copyColl.transactional = coll.transactional;\n        copyColl.asyncListeners = coll.asyncListeners;\n        copyColl.cloneObjects = coll.cloneObjects;\n        copyColl.cloneMethod = coll.cloneMethod || \"parse-stringify\";\n        copyColl.autoupdate = coll.autoupdate;\n        copyColl.changes = coll.changes;\n        copyColl.dirtyIds = coll.dirtyIds || [];\n\n        if (options && options.retainDirtyFlags === true) {\n          copyColl.dirty = coll.dirty;\n        }\n        else {\n          copyColl.dirty = false;\n        }\n\n        if (coll.getData) {\n          if ((options && options.hasOwnProperty(coll.name)) || !copyColl.disableFreeze || copyColl.autoupdate) {\n            throw new Error(\"this collection cannot be loaded lazily: \" + coll.name);\n          }\n          copyColl.getData = coll.getData;\n          Object.defineProperty(copyColl, 'data', {\n            /* jshint loopfunc:true */\n            get: function() {\n              var data = this.getData();\n              this.getData = null;\n              Object.defineProperty(this, 'data', { value: data });\n              return data;\n            }\n            /* jshint loopfunc:false */\n          });\n        } else {\n          // load each element individually\n          clen = coll.data.length;\n          j = 0;\n          if (options && options.hasOwnProperty(coll.name)) {\n            loader = makeLoader(coll);\n\n            for (j; j < clen; j++) {\n              collObj = loader(coll.data[j]);\n              copyColl.data[j] = collObj;\n              copyColl.addAutoUpdateObserver(collObj);\n              if (!copyColl.disableFreeze) {\n                deepFreeze(copyColl.data[j]);\n              }\n            }\n          } else {\n            for (j; j < clen; j++) {\n              copyColl.data[j] = coll.data[j];\n              copyColl.addAutoUpdateObserver(copyColl.data[j]);\n              if (!copyColl.disableFreeze) {\n                deepFreeze(copyColl.data[j]);\n              }\n            }\n          }\n        }\n\n        copyColl.maxId = (typeof coll.maxId === 'undefined') ? 0 : coll.maxId;\n        if (typeof (coll.binaryIndices) !== 'undefined') {\n          copyColl.binaryIndices = coll.binaryIndices;\n        }\n        if (typeof coll.transforms !== 'undefined') {\n          copyColl.transforms = coll.transforms;\n        }\n\n        // regenerate unique indexes\n        copyColl.uniqueNames = [];\n        if (coll.hasOwnProperty(\"uniqueNames\")) {\n          copyColl.uniqueNames = coll.uniqueNames;\n        }\n\n        \n// (Code skipped for WatermelonDB build)\n\n\n        // Upgrade Logic for binary index refactoring at version 1.5\n        if (dbObject.databaseVersion < 1.5) {\n          // rebuild all indices\n          copyColl.ensureAllIndexes(true);\n          copyColl.dirty = true;\n        }\n      }\n    };\n\n    /**\n     * Emits the close event. In autosave scenarios, if the database is dirty, this will save and disable timer.\n     * Does not actually destroy the db.\n     *\n     * @param {function=} callback - (Optional) if supplied will be registered with close event before emitting.\n     * @memberof Loki\n     */\n    Loki.prototype.close = function (callback) {\n      // for autosave scenarios, we will let close perform final save (if dirty)\n      // For web use, you might call from window.onbeforeunload to shutdown database, saving pending changes\n      if (this.autosave) {\n        this.autosaveDisable();\n        if (this.autosaveDirty()) {\n          this.saveDatabase(callback);\n          callback = undefined;\n        }\n      }\n\n      if (callback) {\n        this.on('close', callback);\n      }\n      this.emit('close');\n    };\n\n    \n// (Code skipped for WatermelonDB build)\n\n    /*------------------+\n    | PERSISTENCE       |\n    -------------------*/\n\n    /** there are two build in persistence adapters for internal use\n     * fs             for use in Nodejs type environments\n     * localStorage   for use in browser environment\n     * defined as helper classes here so its easy and clean to use\n     */\n\n    /**\n     * In in-memory persistence adapter for an in-memory database.\n     * This simple 'key/value' adapter is intended for unit testing and diagnostics.\n     *\n     * @param {object=} options - memory adapter options\n     * @param {boolean} [options.asyncResponses=false] - whether callbacks are invoked asynchronously\n     * @param {int} [options.asyncTimeout=50] - timeout in ms to queue callbacks\n     * @constructor LokiMemoryAdapter\n     */\n    function LokiMemoryAdapter(options) {\n      this.hashStore = {};\n      this.options = options || {};\n\n      if (!this.options.hasOwnProperty('asyncResponses')) {\n        this.options.asyncResponses = false;\n      }\n\n      if (!this.options.hasOwnProperty('asyncTimeout')) {\n        this.options.asyncTimeout = 50; // 50 ms default\n      }\n    }\n\n    /**\n     * Loads a serialized database from its in-memory store.\n     * (Loki persistence adapter interface function)\n     *\n     * @param {string} dbname - name of the database (filename/keyname)\n     * @param {function} callback - adapter callback to return load result to caller\n     * @memberof LokiMemoryAdapter\n     */\n    LokiMemoryAdapter.prototype.loadDatabase = function (dbname, callback) {\n      var self = this;\n\n      if (this.options.asyncResponses) {\n        setTimeout(function () {\n          if (self.hashStore.hasOwnProperty(dbname)) {\n            callback(self.hashStore[dbname].value);\n          }\n          else {\n            // database doesn't exist, return falsy\n            callback(null);\n          }\n        }, this.options.asyncTimeout);\n      }\n      else {\n        if (this.hashStore.hasOwnProperty(dbname)) {\n          // database doesn't exist, return falsy\n          callback(this.hashStore[dbname].value);\n        }\n        else {\n          callback(null);\n        }\n      }\n    };\n\n    /**\n     * Saves a serialized database to its in-memory store.\n     * (Loki persistence adapter interface function)\n     *\n     * @param {string} dbname - name of the database (filename/keyname)\n     * @param {function} callback - adapter callback to return load result to caller\n     * @memberof LokiMemoryAdapter\n     */\n    LokiMemoryAdapter.prototype.saveDatabase = function (dbname, dbstring, callback) {\n      var self = this;\n      var saveCount;\n\n      if (this.options.asyncResponses) {\n        setTimeout(function () {\n          saveCount = (self.hashStore.hasOwnProperty(dbname) ? self.hashStore[dbname].savecount : 0);\n\n          self.hashStore[dbname] = {\n            savecount: saveCount + 1,\n            lastsave: new Date(),\n            value: dbstring\n          };\n\n          callback();\n        }, this.options.asyncTimeout);\n      }\n      else {\n        saveCount = (this.hashStore.hasOwnProperty(dbname) ? this.hashStore[dbname].savecount : 0);\n\n        this.hashStore[dbname] = {\n          savecount: saveCount + 1,\n          lastsave: new Date(),\n          value: dbstring\n        };\n\n        callback();\n      }\n    };\n\n    /**\n     * Deletes a database from its in-memory store.\n     *\n     * @param {string} dbname - name of the database (filename/keyname)\n     * @param {function} callback - function to call when done\n     * @memberof LokiMemoryAdapter\n     */\n    LokiMemoryAdapter.prototype.deleteDatabase = function (dbname, callback) {\n      if (this.hashStore.hasOwnProperty(dbname)) {\n        delete this.hashStore[dbname];\n      }\n\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    };\n    \n// (Code skipped for WatermelonDB build)\n\n    /**\n     * Wait for throttledSaves to complete and invoke your callback when drained or duration is met.\n     *\n     * @param {function} callback - callback to fire when save queue is drained, it is passed a sucess parameter value\n     * @param {object=} options - configuration options\n     * @param {boolean} options.recursiveWait - (default: true) if after queue is drained, another save was kicked off, wait for it\n     * @param {bool} options.recursiveWaitLimit - (default: false) limit our recursive waiting to a duration\n     * @param {int} options.recursiveWaitLimitDelay - (default: 2000) cutoff in ms to stop recursively re-draining\n     * @memberof Loki\n     */\n    Loki.prototype.throttledSaveDrain = function (callback, options) {\n      var self = this;\n      var now = (new Date()).getTime();\n\n      if (!this.throttledSaves) {\n        callback(true);\n      }\n\n      options = options || {};\n      if (!options.hasOwnProperty('recursiveWait')) {\n        options.recursiveWait = true;\n      }\n      if (!options.hasOwnProperty('recursiveWaitLimit')) {\n        options.recursiveWaitLimit = false;\n      }\n      if (!options.hasOwnProperty('recursiveWaitLimitDuration')) {\n        options.recursiveWaitLimitDuration = 2000;\n      }\n      if (!options.hasOwnProperty('started')) {\n        options.started = (new Date()).getTime();\n      }\n\n      // if save is pending\n      if (this.throttledSaves && this.throttledSavePending) {\n        // if we want to wait until we are in a state where there are no pending saves at all\n        if (options.recursiveWait) {\n          // queue the following meta callback for when it completes\n          this.throttledCallbacks.push(function () {\n            // if there is now another save pending...\n            if (self.throttledSavePending) {\n              // if we wish to wait only so long and we have exceeded limit of our waiting, callback with false success value\n              if (options.recursiveWaitLimit && (now - options.started > options.recursiveWaitLimitDuration)) {\n                callback(false);\n                return;\n              }\n              // it must be ok to wait on next queue drain\n              self.throttledSaveDrain(callback, options);\n              return;\n            }\n            // no pending saves so callback with true success\n            else {\n              callback(true);\n              return;\n            }\n          });\n        }\n        // just notify when current queue is depleted\n        else {\n          this.throttledCallbacks.push(callback);\n          return;\n        }\n      }\n      // no save pending, just callback\n      else {\n        callback(true);\n      }\n    };\n\n    /**\n     * Internal load logic, decoupled from throttling/contention logic\n     *\n     * @param {object} options - not currently used (remove or allow overrides?)\n     * @param {function=} callback - (Optional) user supplied async callback / error handler\n     */\n    Loki.prototype.loadDatabaseInternal = function (options, callback) {\n      var cFun = callback || function (err, data) {\n        if (err) {\n          throw err;\n        }\n      },\n        self = this;\n\n      // the persistenceAdapter should be present if all is ok, but check to be sure.\n      if (this.persistenceAdapter !== null) {\n\n        this.persistenceAdapter.loadDatabase(this.filename, function loadDatabaseCallback(dbString) {\n          if (typeof (dbString) === 'string') {\n            var parseSuccess = false;\n            try {\n              self.loadJSON(dbString, options || {});\n              parseSuccess = true;\n            } catch (err) {\n              cFun(err);\n            }\n            if (parseSuccess) {\n              cFun(null);\n              self.emit('loaded', 'database ' + self.filename + ' loaded');\n            }\n          } else {\n            // falsy result means new database\n            if (!dbString) {\n              cFun(null);\n              self.emit('loaded', 'empty database ' + self.filename + ' loaded');\n              return;\n            }\n\n            // instanceof error means load faulted\n            if (dbString instanceof Error) {\n              cFun(dbString);\n              return;\n            }\n\n            // if adapter has returned an js object (other than null or error) attempt to load from JSON object\n            if (typeof (dbString) === \"object\") {\n              self.loadJSONObject(dbString, options || {});\n              cFun(null); // return null on success\n              self.emit('loaded', 'database ' + self.filename + ' loaded');\n              return;\n            }\n\n            cFun(\"unexpected adapter response : \" + dbString);\n          }\n        });\n\n      } else {\n        cFun(new Error('persistenceAdapter not configured'));\n      }\n    };\n\n    /**\n     * Handles manually loading from file system, local storage, or adapter (such as indexeddb)\n     *    This method utilizes loki configuration options (if provided) to determine which\n     *    persistence method to use, or environment detection (if configuration was not provided).\n     *    To avoid contention with any throttledSaves, we will drain the save queue first.\n     *\n     * If you are configured with autosave, you do not need to call this method yourself.\n     *\n     * @param {object} options - if throttling saves and loads, this controls how we drain save queue before loading\n     * @param {boolean} options.recursiveWait - (default: true) wait recursively until no saves are queued\n     * @param {bool} options.recursiveWaitLimit - (default: false) limit our recursive waiting to a duration\n     * @param {int} options.recursiveWaitLimitDelay - (default: 2000) cutoff in ms to stop recursively re-draining\n     * @param {function=} callback - (Optional) user supplied async callback / error handler\n     * @memberof Loki\n     * @example\n     * db.loadDatabase({}, function(err) {\n     *   if (err) {\n     *     console.log(\"error : \" + err);\n     *   }\n     *   else {\n     *     console.log(\"database loaded.\");\n     *   }\n     * });\n     */\n    Loki.prototype.loadDatabase = function (options, callback) {\n      var self = this;\n\n      // if throttling disabled, just call internal\n      if (!this.throttledSaves) {\n        this.loadDatabaseInternal(options, callback);\n        return;\n      }\n\n      // try to drain any pending saves in the queue to lock it for loading\n      this.throttledSaveDrain(function (success) {\n        if (success) {\n          // pause/throttle saving until loading is done\n          self.throttledSavePending = true;\n\n          self.loadDatabaseInternal(options, function (err) {\n            // now that we are finished loading, if no saves were throttled, disable flag\n            if (self.throttledCallbacks.length === 0) {\n              self.throttledSavePending = false;\n            }\n            // if saves requests came in while loading, kick off new save to kick off resume saves\n            else {\n              self.saveDatabase();\n            }\n\n            if (typeof callback === 'function') {\n              callback(err);\n            }\n          });\n          return;\n        }\n        else {\n          if (typeof callback === 'function') {\n            callback(new Error(\"Unable to pause save throttling long enough to read database\"));\n          }\n        }\n      }, options);\n    };\n\n    /**\n     * Internal save logic, decoupled from save throttling logic\n     */\n    Loki.prototype.saveDatabaseInternal = function (callback) {\n      var cFun = callback || function (err) {\n        if (err) {\n          throw err;\n        }\n        return;\n      };\n      var self = this;\n\n      // the persistenceAdapter should be present if all is ok, but check to be sure.\n      if (!this.persistenceAdapter) {\n        cFun(new Error('persistenceAdapter not configured'));\n        return;\n      }\n\n      // run incremental, reference, or normal mode adapters, depending on what's available\n      if (this.persistenceAdapter.mode === \"incremental\") {\n        var cachedDirty;\n        // ignore autosave until we copy loki (only then we can clear dirty flags,\n        // but if we don't do it now, autosave will be triggered a lot unnecessarily)\n        this.ignoreAutosave = true;\n        this.persistenceAdapter.saveDatabase(\n          this.filename,\n          function getLokiCopy() {\n            self.ignoreAutosave = false;\n            if (cachedDirty) {\n              cFun(new Error('adapter error - getLokiCopy called more than once'));\n              return;\n            }\n            var lokiCopy = self.copy({ removeNonSerializable: true });\n\n            // remember and clear dirty ids -- we must do it before the save so that if\n            // and update occurs between here and callback, it will get saved later\n            cachedDirty = self.collections.map(function (collection) {\n              return [collection.dirty, collection.dirtyIds];\n            });\n            self.collections.forEach(function (col) {\n              col.dirty = false;\n              col.dirtyIds = [];\n            });\n            return lokiCopy;\n          },\n          function exportDatabaseCallback(err) {\n            self.ignoreAutosave = false;\n            if (err && cachedDirty) {\n              // roll back dirty IDs to be saved later\n              self.collections.forEach(function (col, i) {\n                var cached = cachedDirty[i];\n                col.dirty = col.dirty || cached[0];\n                col.dirtyIds = col.dirtyIds.concat(cached[1]);\n              });\n            }\n            cFun(err);\n          });\n      } else if (this.persistenceAdapter.mode === \"reference\" && typeof this.persistenceAdapter.exportDatabase === \"function\") {\n        // TODO: dirty should be cleared here\n        // filename may seem redundant but loadDatabase will need to expect this same filename\n        this.persistenceAdapter.exportDatabase(this.filename, this.copy({ removeNonSerializable: true }), function exportDatabaseCallback(err) {\n          self.autosaveClearFlags();\n          cFun(err);\n        });\n      }\n      // otherwise just pass the serialized database to adapter\n      else {\n        // persistenceAdapter might be asynchronous, so we must clear `dirty` immediately\n        // or autosave won't work if an update occurs between here and the callback\n        // TODO: This should be stored and rolled back in case of DB save failure\n        this.autosaveClearFlags();\n        this.persistenceAdapter.saveDatabase(this.filename, this.serialize(), function saveDatabasecallback(err) {\n          cFun(err);\n        });\n      }\n    };\n\n    /**\n     * Handles manually saving to file system, local storage, or adapter (such as indexeddb)\n     *    This method utilizes loki configuration options (if provided) to determine which\n     *    persistence method to use, or environment detection (if configuration was not provided).\n     *\n     * If you are configured with autosave, you do not need to call this method yourself.\n     *\n     * @param {function=} callback - (Optional) user supplied async callback / error handler\n     * @memberof Loki\n     * @example\n     * db.saveDatabase(function(err) {\n     *   if (err) {\n     *     console.log(\"error : \" + err);\n     *   }\n     *   else {\n     *     console.log(\"database saved.\");\n     *   }\n     * });\n     */\n    Loki.prototype.saveDatabase = function (callback) {\n      if (!this.throttledSaves) {\n        this.saveDatabaseInternal(callback);\n        return;\n      }\n\n      if (this.throttledSavePending) {\n        this.throttledCallbacks.push(callback);\n        return;\n      }\n\n      var localCallbacks = this.throttledCallbacks;\n      this.throttledCallbacks = [];\n      localCallbacks.unshift(callback);\n      this.throttledSavePending = true;\n\n      var self = this;\n      this.saveDatabaseInternal(function (err) {\n        self.throttledSavePending = false;\n        localCallbacks.forEach(function (pcb) {\n          if (typeof pcb === 'function') {\n            // Queue the callbacks so we first finish this method execution\n            setTimeout(function () {\n              pcb(err);\n            }, 1);\n          }\n        });\n\n        // since this is called async, future requests may have come in, if so.. kick off next save\n        if (self.throttledCallbacks.length > 0) {\n          self.saveDatabase();\n        }\n      });\n    };\n\n    // alias\n    Loki.prototype.save = Loki.prototype.saveDatabase;\n\n    /**\n     * Handles deleting a database from file system, local\n     *    storage, or adapter (indexeddb)\n     *    This method utilizes loki configuration options (if provided) to determine which\n     *    persistence method to use, or environment detection (if configuration was not provided).\n     *\n     * @param {function=} callback - (Optional) user supplied async callback / error handler\n     * @memberof Loki\n     */\n    Loki.prototype.deleteDatabase = function (options, callback) {\n      var cFun = callback || function (err, data) {\n        if (err) {\n          throw err;\n        }\n      };\n\n      // we aren't even using options, so we will support syntax where\n      // callback is passed as first and only argument\n      if (typeof options === 'function' && !callback) {\n        cFun = options;\n      }\n\n      // the persistenceAdapter should be present if all is ok, but check to be sure.\n      if (this.persistenceAdapter !== null) {\n        this.persistenceAdapter.deleteDatabase(this.filename, function deleteDatabaseCallback(err) {\n          cFun(err);\n        });\n      } else {\n        cFun(new Error('persistenceAdapter not configured'));\n      }\n    };\n\n    /**\n     * autosaveDirty - check whether any collections are 'dirty' meaning we need to save (entire) database\n     *\n     * @returns {boolean} - true if database has changed since last autosave, false if not.\n     */\n    Loki.prototype.autosaveDirty = function () {\n      for (var idx = 0; idx < this.collections.length; idx++) {\n        if (this.collections[idx].dirty) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    /**\n     * autosaveClearFlags - resets dirty flags on all collections.\n     *    Called from saveDatabase() after db is saved.\n     *\n     */\n    Loki.prototype.autosaveClearFlags = function () {\n      for (var idx = 0; idx < this.collections.length; idx++) {\n        this.collections[idx].dirty = false;\n      }\n    };\n\n    /**\n     * autosaveEnable - begin a javascript interval to periodically save the database.\n     *\n     * @param {object} options - not currently used (remove or allow overrides?)\n     * @param {function=} callback - (Optional) user supplied async callback\n     */\n    Loki.prototype.autosaveEnable = function (options, callback) {\n      this.autosave = true;\n\n      var delay = 5000,\n        self = this;\n\n      if (typeof (this.autosaveInterval) !== 'undefined' && this.autosaveInterval !== null) {\n        delay = this.autosaveInterval;\n      }\n\n      this.autosaveHandle = setInterval(function autosaveHandleInterval() {\n        // use of dirty flag will need to be hierarchical since mods are done at collection level with no visibility of 'db'\n        // so next step will be to implement collection level dirty flags set on insert/update/remove\n        // along with loki level isdirty() function which iterates all collections to see if any are dirty\n\n        if (self.autosaveDirty() && !self.ignoreAutosave) {\n          self.saveDatabase(callback);\n        }\n      }, delay);\n    };\n\n    /**\n     * autosaveDisable - stop the autosave interval timer.\n     *\n     */\n    Loki.prototype.autosaveDisable = function () {\n      if (typeof (this.autosaveHandle) !== 'undefined' && this.autosaveHandle !== null) {\n        clearInterval(this.autosaveHandle);\n        this.autosaveHandle = null;\n      }\n    };\n\n\n    /**\n     * Resultset class allowing chainable queries.  Intended to be instanced internally.\n     *    Collection.find(), Collection.where(), and Collection.chain() instantiate this.\n     *\n     * @example\n     *    mycollection.chain()\n     *      .find({ 'doors' : 4 })\n     *      .where(function(obj) { return obj.name === 'Toyota' })\n     *      .data();\n     *\n     * @constructor Resultset\n     * @param {Collection} collection - The collection which this Resultset will query against.\n     */\n    function Resultset(collection, options) {\n      options = options || {};\n\n      // retain reference to collection we are querying against\n      this.collection = collection;\n      this.filteredrows = [];\n      this.filterInitialized = false;\n\n      return this;\n    }\n\n    /**\n     * reset() - Reset the resultset to its initial state.\n     *\n     * @returns {Resultset} Reference to this resultset, for future chain operations.\n     */\n    Resultset.prototype.reset = function () {\n      if (this.filteredrows.length > 0) {\n        this.filteredrows = [];\n      }\n      this.filterInitialized = false;\n      return this;\n    };\n\n    /**\n     * toJSON() - Override of toJSON to avoid circular references\n     *\n     */\n    Resultset.prototype.toJSON = function () {\n      var copy = this.copy();\n      copy.collection = null;\n      return copy;\n    };\n\n    /**\n     * Allows you to limit the number of documents passed to next chain operation.\n     *    A resultset copy() is made to avoid altering original resultset.\n     *\n     * @param {int} qty - The number of documents to return.\n     * @returns {Resultset} Returns a copy of the resultset, limited by qty, for subsequent chain ops.\n     * @memberof Resultset\n     * // find the two oldest users\n     * var result = users.chain().simplesort(\"age\", true).limit(2).data();\n     */\n    Resultset.prototype.limit = function (qty) {\n      // if this has no filters applied, we need to populate filteredrows first\n      if (!this.filterInitialized && this.filteredrows.length === 0) {\n        this.filteredrows = this.collection.prepareFullDocIndex();\n      }\n\n      var rscopy = new Resultset(this.collection);\n      rscopy.filteredrows = this.filteredrows.slice(0, qty);\n      rscopy.filterInitialized = true;\n      return rscopy;\n    };\n\n    /**\n     * Used for skipping 'pos' number of documents in the resultset.\n     *\n     * @param {int} pos - Number of documents to skip; all preceding documents are filtered out.\n     * @returns {Resultset} Returns a copy of the resultset, containing docs starting at 'pos' for subsequent chain ops.\n     * @memberof Resultset\n     * // find everyone but the two oldest users\n     * var result = users.chain().simplesort(\"age\", true).offset(2).data();\n     */\n    Resultset.prototype.offset = function (pos) {\n      // if this has no filters applied, we need to populate filteredrows first\n      if (!this.filterInitialized && this.filteredrows.length === 0) {\n        this.filteredrows = this.collection.prepareFullDocIndex();\n      }\n\n      var rscopy = new Resultset(this.collection);\n      rscopy.filteredrows = this.filteredrows.slice(pos);\n      rscopy.filterInitialized = true;\n      return rscopy;\n    };\n\n    /**\n     * copy() - To support reuse of resultset in branched query situations.\n     *\n     * @returns {Resultset} Returns a copy of the resultset (set) but the underlying document references will be the same.\n     * @memberof Resultset\n     */\n    Resultset.prototype.copy = function () {\n      var result = new Resultset(this.collection);\n\n      if (this.filteredrows.length > 0) {\n        result.filteredrows = this.filteredrows.slice();\n      }\n      result.filterInitialized = this.filterInitialized;\n\n      return result;\n    };\n\n    /**\n     * Alias of copy()\n     * @memberof Resultset\n     */\n    Resultset.prototype.branch = Resultset.prototype.copy;\n    \n// (Code skipped for WatermelonDB build)\n\n    /**\n     * User supplied compare function is provided two documents to compare. (chainable)\n     * @example\n     *    rslt.sort(function(obj1, obj2) {\n     *      if (obj1.name === obj2.name) return 0;\n     *      if (obj1.name > obj2.name) return 1;\n     *      if (obj1.name < obj2.name) return -1;\n     *    });\n     *\n     * @param {function} comparefun - A javascript compare function used for sorting.\n     * @returns {Resultset} Reference to this resultset, sorted, for future chain operations.\n     * @memberof Resultset\n     */\n    Resultset.prototype.sort = function (comparefun) {\n      // if this has no filters applied, just we need to populate filteredrows first\n      if (!this.filterInitialized && this.filteredrows.length === 0) {\n        this.filteredrows = this.collection.prepareFullDocIndex();\n      }\n\n      var wrappedComparer =\n        (function (userComparer, data) {\n          return function (a, b) {\n            return userComparer(data[a], data[b]);\n          };\n        })(comparefun, this.collection.data);\n\n      this.filteredrows.sort(wrappedComparer);\n\n      return this;\n    };\n\n    /**\n     * Simpler, loose evaluation for user to sort based on a property name. (chainable).\n     *    Sorting based on the same lt/gt helper functions used for binary indices.\n     *\n     * @param {string} propname - name of property to sort by.\n     * @param {object|bool=} options - boolean to specify if isdescending, or options object\n     * @param {boolean} [options.desc=false] - whether to sort descending\n     * @param {boolean} [options.disableIndexIntersect=false] - whether we should explicity not use array intersection.\n     * @param {boolean} [options.forceIndexIntersect=false] - force array intersection (if binary index exists).\n     * @param {boolean} [options.useJavascriptSorting=false] - whether results are sorted via basic javascript sort.\n     * @returns {Resultset} Reference to this resultset, sorted, for future chain operations.\n     * @memberof Resultset\n     * @example\n     * var results = users.chain().simplesort('age').data();\n     */\n    Resultset.prototype.simplesort = function (propname, options) {\n      var eff,\n        targetEff = 10,\n        dc = this.collection.data.length,\n        frl = this.filteredrows.length,\n        hasBinaryIndex = this.collection.binaryIndices.hasOwnProperty(propname);\n\n      if (typeof (options) === 'undefined' || options === false) {\n        options = { desc: false };\n      }\n      if (options === true) {\n        options = { desc: true };\n      }\n\n      // if nothing in filtered rows array...\n      if (frl === 0) {\n        // if the filter is initialized to be empty resultset, do nothing\n        if (this.filterInitialized) {\n          return this;\n        }\n\n        // otherwise no filters applied implies all documents, so we need to populate filteredrows first\n\n        // if we have a binary index, we can just use that instead of sorting (again)\n        if (this.collection.binaryIndices.hasOwnProperty(propname)) {\n          // make sure index is up-to-date\n          this.collection.ensureIndex(propname);\n          // copy index values into filteredrows\n          this.filteredrows = this.collection.binaryIndices[propname].values.slice(0);\n\n          if (options.desc) {\n            this.filteredrows.reverse();\n          }\n\n          // we are done, return this (resultset) for further chain ops\n          return this;\n        }\n        // otherwise initialize array for sort below\n        else {\n          // build full document index (to be sorted subsequently)\n          this.filteredrows = this.collection.prepareFullDocIndex();\n        }\n      }\n      // otherwise we had results to begin with, see if we qualify for index intercept optimization\n      else {\n\n        // If already filtered, but we want to leverage binary index on sort.\n        // This will use custom array intection algorithm.\n        if (!options.disableIndexIntersect && hasBinaryIndex) {\n\n          // calculate filter efficiency\n          eff = dc / frl;\n\n          // when javascript sort fallback is enabled, you generally need more than ~17% of total docs in resultset\n          // before array intersect is determined to be the faster algorithm, otherwise leave at 10% for loki sort.\n          if (options.useJavascriptSorting) {\n            targetEff = 6;\n          }\n\n          // anything more than ratio of 10:1 (total documents/current results) should use old sort code path\n          // So we will only use array intersection if you have more than 10% of total docs in your current resultset.\n          if (eff <= targetEff || options.forceIndexIntersect) {\n            var idx, fr = this.filteredrows;\n            var io = {};\n            // set up hashobject for simple 'inclusion test' with existing (filtered) results\n            for (idx = 0; idx < frl; idx++) {\n              io[fr[idx]] = true;\n            }\n            // grab full sorted binary index array\n            var pv = this.collection.binaryIndices[propname].values;\n\n            // filter by existing results\n            this.filteredrows = pv.filter(function (n) { return io[n]; });\n\n            if (options.desc) {\n              this.filteredrows.reverse();\n            }\n\n            return this;\n          }\n        }\n      }\n\n      // at this point, we will not be able to leverage binary index so we will have to do an array sort\n\n      // if we have opted to use simplified javascript comparison function...\n      if (options.useJavascriptSorting) {\n        return this.sort(function (obj1, obj2) {\n          if (obj1[propname] === obj2[propname]) return 0;\n          if (obj1[propname] > obj2[propname]) return 1;\n          if (obj1[propname] < obj2[propname]) return -1;\n        });\n      }\n\n      // otherwise use loki sort which will return same results if column is indexed or not\n      var wrappedComparer =\n        (function (prop, desc, data) {\n          var val1, val2, arr;\n          return function (a, b) {\n            if (~prop.indexOf('.')) {\n              arr = prop.split('.');\n              val1 = Utils.getIn(data[a], arr, true);\n              val2 = Utils.getIn(data[b], arr, true);\n            } else {\n              val1 = data[a][prop];\n              val2 = data[b][prop];\n            }\n            return sortHelper(val1, val2, desc);\n          };\n        })(propname, options.desc, this.collection.data);\n\n      this.filteredrows.sort(wrappedComparer);\n\n      return this;\n    };\n\n    /**\n     * Allows sorting a resultset based on multiple columns.\n     * @example\n     * // to sort by age and then name (both ascending)\n     * rs.compoundsort(['age', 'name']);\n     * // to sort by age (ascending) and then by name (descending)\n     * rs.compoundsort(['age', ['name', true]]);\n     *\n     * @param {array} properties - array of property names or subarray of [propertyname, isdesc] used evaluate sort order\n     * @returns {Resultset} Reference to this resultset, sorted, for future chain operations.\n     * @memberof Resultset\n     */\n    Resultset.prototype.compoundsort = function (properties) {\n      if (properties.length === 0) {\n        throw new Error(\"Invalid call to compoundsort, need at least one property\");\n      }\n\n      var prop;\n      if (properties.length === 1) {\n        prop = properties[0];\n        if (Array.isArray(prop)) {\n          return this.simplesort(prop[0], prop[1]);\n        }\n        return this.simplesort(prop, false);\n      }\n\n      // unify the structure of 'properties' to avoid checking it repeatedly while sorting\n      for (var i = 0, len = properties.length; i < len; i += 1) {\n        prop = properties[i];\n        if (!Array.isArray(prop)) {\n          properties[i] = [prop, false];\n        }\n      }\n\n      // if this has no filters applied, just we need to populate filteredrows first\n      if (!this.filterInitialized && this.filteredrows.length === 0) {\n        this.filteredrows = this.collection.prepareFullDocIndex();\n      }\n\n      var wrappedComparer =\n        (function (props, data) {\n          return function (a, b) {\n            return compoundeval(props, data[a], data[b]);\n          };\n        })(properties, this.collection.data);\n\n      this.filteredrows.sort(wrappedComparer);\n\n      return this;\n    };\n\n    /**\n     * findOr() - oversee the operation of OR'ed query expressions.\n     *    OR'ed expression evaluation runs each expression individually against the full collection,\n     *    and finally does a set OR on each expression's results.\n     *    Each evaluation can utilize a binary index to prevent multiple linear array scans.\n     *\n     * @param {array} expressionArray - array of expressions\n     * @returns {Resultset} this resultset for further chain ops.\n     */\n    Resultset.prototype.findOr = function (expressionArray) {\n      var fr = null,\n        fri = 0,\n        frlen = 0,\n        docset = [],\n        idxset = [],\n        idx = 0,\n        origCount = this.count();\n\n      // If filter is already initialized, then we query against only those items already in filter.\n      // This means no index utilization for fields, so hopefully its filtered to a smallish filteredrows.\n      for (var ei = 0, elen = expressionArray.length; ei < elen; ei++) {\n        // we need to branch existing query to run each filter separately and combine results\n        fr = this.branch().find(expressionArray[ei]).filteredrows;\n        frlen = fr.length;\n\n        // add any document 'hits'\n        for (fri = 0; fri < frlen; fri++) {\n          idx = fr[fri];\n          if (idxset[idx] === undefined) {\n            idxset[idx] = true;\n            docset.push(idx);\n          }\n        }\n      }\n\n      this.filteredrows = docset;\n      this.filterInitialized = true;\n\n      return this;\n    };\n    Resultset.prototype.$or = Resultset.prototype.findOr;\n\n    // precompile recursively\n    function precompileQuery(operator, value) {\n      // for regex ops, precompile\n      if (operator === '$regex') {\n        if (Array.isArray(value)) {\n          value = new RegExp(value[0], value[1]);\n        } else if (!(value instanceof RegExp)) {\n          value = new RegExp(value);\n        }\n      }\n      else if (typeof value === 'object') {\n        for (var key in value) {\n          if (key === '$regex' || typeof value[key] === 'object') {\n            value[key] = precompileQuery(key, value[key]);\n          }\n        }\n      }\n\n      return value;\n    }\n\n    /**\n     * findAnd() - oversee the operation of AND'ed query expressions.\n     *    AND'ed expression evaluation runs each expression progressively against the full collection,\n     *    internally utilizing existing chained resultset functionality.\n     *    Only the first filter can utilize a binary index.\n     *\n     * @param {array} expressionArray - array of expressions\n     * @returns {Resultset} this resultset for further chain ops.\n     */\n    Resultset.prototype.findAnd = function (expressionArray) {\n      // we have already implementing method chaining in this (our Resultset class)\n      // so lets just progressively apply user supplied and filters\n      for (var i = 0, len = expressionArray.length; i < len; i++) {\n        if (this.count() === 0) {\n          return this;\n        }\n        this.find(expressionArray[i]);\n      }\n      return this;\n    };\n    Resultset.prototype.$and = Resultset.prototype.findAnd;\n\n    /**\n     * Used for querying via a mongo-style query object.\n     *\n     * @param {object} query - A mongo-style query object used for filtering current results.\n     * @param {boolean=} firstOnly - (Optional) Used by collection.findOne()\n     * @returns {Resultset} this resultset for further chain ops.\n     * @memberof Resultset\n     * @example\n     * var over30 = users.chain().find({ age: { $gte: 30 } }).data();\n     */\n    Resultset.prototype.find = function (query, firstOnly) {\n      if (this.collection.data.length === 0) {\n        this.filteredrows = [];\n        this.filterInitialized = true;\n        return this;\n      }\n\n      var queryObject = query || 'getAll',\n        p,\n        property,\n        queryObjectOp,\n        obj,\n        operator,\n        value,\n        key,\n        searchByIndex = false,\n        result = [],\n        filters = [],\n        index = null;\n\n      // flag if this was invoked via findOne()\n      firstOnly = firstOnly || false;\n\n      if (typeof queryObject === 'object') {\n        for (p in queryObject) {\n          obj = {};\n          obj[p] = queryObject[p];\n          filters.push(obj);\n\n          if (hasOwnProperty.call(queryObject, p)) {\n            property = p;\n            queryObjectOp = queryObject[p];\n          }\n        }\n        // if more than one expression in single query object,\n        // convert implicit $and to explicit $and\n        if (filters.length > 1) {\n          return this.find({ '$and': filters }, firstOnly);\n        }\n      }\n\n      // apply no filters if they want all\n      if (!property || queryObject === 'getAll') {\n        if (firstOnly) {\n          if (this.filterInitialized) {\n            this.filteredrows = this.filteredrows.slice(0, 1);\n          } else {\n            this.filteredrows = (this.collection.data.length > 0) ? [0] : [];\n            this.filterInitialized = true;\n          }\n        }\n\n        return this;\n      }\n\n      // injecting $and and $or expression tree evaluation here.\n      if (property === '$and' || property === '$or') {\n        this[property](queryObjectOp);\n\n        // for chained find with firstonly,\n        if (firstOnly && this.filteredrows.length > 1) {\n          this.filteredrows = this.filteredrows.slice(0, 1);\n        }\n\n        return this;\n      }\n\n      // see if query object is in shorthand mode (assuming eq operator)\n      if (queryObjectOp === null || (typeof queryObjectOp !== 'object' || queryObjectOp instanceof Date)) {\n        operator = '$eq';\n        value = queryObjectOp;\n      } else if (typeof queryObjectOp === 'object') {\n        for (key in queryObjectOp) {\n          if (hasOwnProperty.call(queryObjectOp, key)) {\n            operator = key;\n            value = queryObjectOp[key];\n            break;\n          }\n        }\n      } else {\n        throw new Error('Do not know what you want to do.');\n      }\n\n      if (operator === '$regex' || typeof value === 'object') {\n        value = precompileQuery(operator, value);\n      }\n\n      // if user is deep querying the object such as find('name.first': 'odin')\n      var usingDotNotation = (property.indexOf('.') !== -1);\n\n      // if an index exists for the property being queried against, use it\n      // for now only enabling where it is the first filter applied and prop is indexed\n      var doIndexCheck = !this.filterInitialized;\n\n      if (doIndexCheck && this.collection.binaryIndices[property] && indexedOps[operator]) {\n        // this is where our lazy index rebuilding will take place\n        // basically we will leave all indexes dirty until we need them\n        // so here we will rebuild only the index tied to this property\n        // ensureIndex() will only rebuild if flagged as dirty since we are not passing force=true param\n        if (this.collection.adaptiveBinaryIndices !== true) {\n          this.collection.ensureIndex(property);\n        }\n\n        searchByIndex = true;\n        index = this.collection.binaryIndices[property];\n      }\n\n      // opportunistically speed up $in searches from O(n*m) to O(n*log m)\n      if (!searchByIndex && operator === '$in' && Array.isArray(value) && typeof Set !== 'undefined') {\n        value = new Set(value);\n        operator = '$inSet';\n      }\n\n      // the comparison function\n      var fun = LokiOps[operator];\n\n      // \"shortcut\" for collection data\n      var t = this.collection.data;\n      // filter data length\n      var i = 0,\n        len = 0;\n\n      // Query executed differently depending on :\n      //    - whether the property being queried has an index defined\n      //    - if chained, we handle first pass differently for initial filteredrows[] population\n      //\n      // For performance reasons, each case has its own if block to minimize in-loop calculations\n\n      var filter, rowIdx = 0, record;\n\n      // If the filteredrows[] is already initialized, use it\n      if (this.filterInitialized) {\n        filter = this.filteredrows;\n        len = filter.length;\n\n        // currently supporting dot notation for non-indexed conditions only\n        if (usingDotNotation) {\n          property = property.split('.');\n          for (i = 0; i < len; i++) {\n            rowIdx = filter[i];\n            record = t[rowIdx];\n            if (dotSubScan(record, property, fun, value, record)) {\n              result.push(rowIdx);\n              if (firstOnly) {\n                this.filteredrows = result;\n                return this;\n              }\n            }\n          }\n        } else {\n          for (i = 0; i < len; i++) {\n            rowIdx = filter[i];\n            record = t[rowIdx];\n            if (fun(record[property], value, record)) {\n              result.push(rowIdx);\n              if (firstOnly) {\n                this.filteredrows = result;\n                return this;\n              }\n            }\n          }\n        }\n      }\n      // first chained query so work against data[] but put results in filteredrows\n      else {\n        // if not searching by index\n        if (!searchByIndex) {\n          len = t.length;\n\n          if (usingDotNotation) {\n            property = property.split('.');\n            for (i = 0; i < len; i++) {\n              record = t[i];\n              if (dotSubScan(record, property, fun, value, record)) {\n                result.push(i);\n                if (firstOnly) {\n                  this.filteredrows = result;\n                  this.filterInitialized = true;\n                  return this;\n                }\n              }\n            }\n          } else {\n            for (i = 0; i < len; i++) {\n              record = t[i];\n              if (fun(record[property], value, record)) {\n                result.push(i);\n                if (firstOnly) {\n                  this.filteredrows = result;\n                  this.filterInitialized = true;\n                  return this;\n                }\n              }\n            }\n          }\n        } else {\n          // search by index\n          var segm = this.collection.calculateRange(operator, property, value);\n\n          if (operator !== '$in') {\n            for (i = segm[0]; i <= segm[1]; i++) {\n              if (indexedOps[operator] !== true) {\n                // must be a function, implying 2nd phase filtering of results from calculateRange\n                if (indexedOps[operator](Utils.getIn(t[index.values[i]], property, usingDotNotation), value)) {\n                  result.push(index.values[i]);\n                  if (firstOnly) {\n                    this.filteredrows = result;\n                    this.filterInitialized = true;\n                    return this;\n                  }\n                }\n              }\n              else {\n                result.push(index.values[i]);\n                if (firstOnly) {\n                  this.filteredrows = result;\n                  this.filterInitialized = true;\n                  return this;\n                }\n              }\n            }\n          } else {\n            for (i = 0, len = segm.length; i < len; i++) {\n              result.push(index.values[segm[i]]);\n              if (firstOnly) {\n                this.filteredrows = result;\n                this.filterInitialized = true;\n                return this;\n              }\n            }\n          }\n        }\n\n      }\n\n      this.filteredrows = result;\n      this.filterInitialized = true; // next time work against filteredrows[]\n      return this;\n    };\n\n\n    /**\n     * where() - Used for filtering via a javascript filter function.\n     *\n     * @param {function} fun - A javascript function used for filtering current results by.\n     * @returns {Resultset} this resultset for further chain ops.\n     * @memberof Resultset\n     * @example\n     * var over30 = users.chain().where(function(obj) { return obj.age >= 30; }.data();\n     */\n    Resultset.prototype.where = function (fun) {\n      var viewFunction,\n        result = [];\n\n      if ('function' === typeof fun) {\n        viewFunction = fun;\n      } else {\n        throw new TypeError('Argument is not a stored view or a function');\n      }\n      try {\n        // If the filteredrows[] is already initialized, use it\n        if (this.filterInitialized) {\n          var j = this.filteredrows.length;\n\n          while (j--) {\n            if (viewFunction(this.collection.data[this.filteredrows[j]]) === true) {\n              result.push(this.filteredrows[j]);\n            }\n          }\n\n          this.filteredrows = result;\n\n          return this;\n        }\n        // otherwise this is initial chained op, work against data, push into filteredrows[]\n        else {\n          var k = this.collection.data.length;\n\n          while (k--) {\n            if (viewFunction(this.collection.data[k]) === true) {\n              result.push(k);\n            }\n          }\n\n          this.filteredrows = result;\n          this.filterInitialized = true;\n\n          return this;\n        }\n      } catch (err) {\n        throw err;\n      }\n    };\n\n    /**\n     * count() - returns the number of documents in the resultset.\n     *\n     * @returns {number} The number of documents in the resultset.\n     * @memberof Resultset\n     * @example\n     * var over30Count = users.chain().find({ age: { $gte: 30 } }).count();\n     */\n    Resultset.prototype.count = function () {\n      if (this.filterInitialized) {\n        return this.filteredrows.length;\n      }\n      return this.collection.count();\n    };\n\n    /**\n     * Terminates the chain and returns array of filtered documents\n     *\n     * @param {object=} options - allows specifying 'forceClones' and 'forceCloneMethod' options.\n     * @param {boolean} options.forceClones - Allows forcing the return of cloned objects even when\n     *        the collection is not configured for clone object.\n     * @param {string} options.forceCloneMethod - Allows overriding the default or collection specified cloning method.\n     *        Possible values include 'parse-stringify', 'jquery-extend-deep', 'shallow', 'shallow-assign'\n     * @param {bool} options.removeMeta - Will force clones and strip $loki and meta properties from documents\n     *\n     * @returns {array} Array of documents in the resultset\n     * @memberof Resultset\n     * @example\n     * var resutls = users.chain().find({ age: 34 }).data();\n     */\n    Resultset.prototype.data = function (options) {\n      var result = [],\n        data = this.collection.data,\n        obj,\n        len,\n        i,\n        method;\n\n      options = options || {};\n\n      // if user opts to strip meta, then force clones and use 'shallow' if 'force' options are not present\n      if (options.removeMeta && !options.forceClones) {\n        options.forceClones = true;\n        options.forceCloneMethod = options.forceCloneMethod || 'shallow';\n      }\n\n      // if collection has delta changes active, then force clones and use 'parse-stringify' for effective change tracking of nested objects\n      // if collection is immutable freeze and unFreeze takes care of cloning\n      if (!this.collection.disableDeltaChangesApi && this.collection.disableFreeze) {\n        options.forceClones = true;\n        options.forceCloneMethod = 'parse-stringify';\n      }\n\n      // if this has no filters applied, just return collection.data\n      if (!this.filterInitialized) {\n        if (this.filteredrows.length === 0) {\n          // determine whether we need to clone objects or not\n          if (this.collection.cloneObjects || options.forceClones) {\n            len = data.length;\n            method = options.forceCloneMethod || this.collection.cloneMethod;\n            for (i = 0; i < len; i++) {\n              obj = clone(data[i], method);\n              if (options.removeMeta) {\n                delete obj.$loki;\n                delete obj.meta;\n              }\n              result.push(obj);\n            }\n            return result;\n          }\n          // otherwise we are not cloning so return sliced array with same object references\n          else {\n            return data.slice();\n          }\n        } else {\n          // filteredrows must have been set manually, so use it\n          this.filterInitialized = true;\n        }\n      }\n\n      var fr = this.filteredrows;\n      len = fr.length;\n\n      if (this.collection.cloneObjects || options.forceClones) {\n        method = options.forceCloneMethod || this.collection.cloneMethod;\n        for (i = 0; i < len; i++) {\n          obj = clone(data[fr[i]], method);\n          if (options.removeMeta) {\n            delete obj.$loki;\n            delete obj.meta;\n          }\n          result.push(obj);\n        }\n      } else {\n        for (i = 0; i < len; i++) {\n          result.push(data[fr[i]]);\n        }\n      }\n      return result;\n    };\n\n    /**\n     * Used to run an update operation on all documents currently in the resultset.\n     *\n     * @param {function} updateFunction - User supplied updateFunction(obj) will be executed for each document object.\n     * @returns {Resultset} this resultset for further chain ops.\n     * @memberof Resultset\n     * @example\n     * users.chain().find({ country: 'de' }).update(function(user) {\n     *   user.phoneFormat = \"+49 AAAA BBBBBB\";\n     * });\n     */\n    Resultset.prototype.update = function (updateFunction) {\n\n      if (typeof (updateFunction) !== \"function\") {\n        throw new TypeError('Argument is not a function');\n      }\n\n      // if this has no filters applied, we need to populate filteredrows first\n      if (!this.filterInitialized && this.filteredrows.length === 0) {\n        this.filteredrows = this.collection.prepareFullDocIndex();\n      }\n\n      var obj, len = this.filteredrows.length,\n        rcd = this.collection.data;\n\n      // pass in each document object currently in resultset to user supplied updateFunction\n      for (var idx = 0; idx < len; idx++) {\n        // if we have cloning option specified or are doing differential delta changes, clone object first\n        if (!this.disableFreeze || this.collection.cloneObjects || !this.collection.disableDeltaChangesApi) {\n          obj = clone(rcd[this.filteredrows[idx]], this.collection.cloneMethod);\n          updateFunction(obj);\n          this.collection.update(obj);\n        }\n        else {\n          // no need to clone, so just perform update on collection data object instance\n          updateFunction(rcd[this.filteredrows[idx]]);\n          this.collection.update(rcd[this.filteredrows[idx]]);\n        }\n      }\n\n      return this;\n    };\n\n    /**\n     * Removes all document objects which are currently in resultset from collection (as well as resultset)\n     *\n     * @returns {Resultset} this (empty) resultset for further chain ops.\n     * @memberof Resultset\n     * @example\n     * // remove users inactive since 1/1/2001\n     * users.chain().find({ lastActive: { $lte: new Date(\"1/1/2001\").getTime() } }).remove();\n     */\n    Resultset.prototype.remove = function () {\n\n      // if this has no filters applied, we need to populate filteredrows first\n      if (!this.filterInitialized && this.filteredrows.length === 0) {\n        this.filteredrows = this.collection.prepareFullDocIndex();\n      }\n\n      this.collection.removeBatchByPositions(this.filteredrows);\n\n      this.filteredrows = [];\n\n      return this;\n    };\n    \n// (Code skipped for WatermelonDB build)\n\n    /**\n     * Applies a map function into a new collection for further chaining.\n     * @param {function} mapFun - javascript map function\n     * @param {object=} dataOptions - options to data() before input to your map function\n     * @param {bool} dataOptions.removeMeta - allows removing meta before calling mapFun\n     * @param {boolean} dataOptions.forceClones - forcing the return of cloned objects to your map object\n     * @param {string} dataOptions.forceCloneMethod - Allows overriding the default or collection specified cloning method.\n     * @memberof Resultset\n     * @example\n     * var orders.chain().find({ productId: 32 }).map(function(obj) {\n     *   return {\n     *     orderId: $loki,\n     *     productId: productId,\n     *     quantity: qty\n     *   };\n     * });\n     */\n    Resultset.prototype.map = function (mapFun, dataOptions) {\n      var data = this.data(dataOptions).map(mapFun);\n      //return return a new resultset with no filters\n      this.collection = new Collection('mappedData');\n      this.collection.insert(data);\n      this.filteredrows = [];\n      this.filterInitialized = false;\n\n      return this;\n    };\n    \n// (Code skipped for WatermelonDB build)\n\n\n    /**\n     * Collection class that handles documents of same type\n     * @constructor Collection\n     * @implements LokiEventEmitter\n     * @param {string} name - collection name\n     * @param {(array|object)=} options - (optional) array of property names to be indicized OR a configuration object\n     * @param {array=} [options.unique=[]] - array of property names to define unique constraints for\n     * @param {array=} [options.exact=[]] - array of property names to define exact constraints for\n     * @param {array=} [options.indices=[]] - array property names to define binary indexes for\n     * @param {boolean} [options.adaptiveBinaryIndices=true] - collection indices will be actively rebuilt rather than lazily\n     * @param {boolean} [options.asyncListeners=false] - whether listeners are invoked asynchronously\n     * @param {boolean} [options.disableMeta=false] - set to true to disable meta property on documents\n     * @param {boolean} [options.disableChangesApi=true] - set to false to enable Changes API\n     * @param {boolean} [options.disableDeltaChangesApi=true] - set to false to enable Delta Changes API (requires Changes API, forces cloning)\n     * @param {boolean} [options.autoupdate=false] - use Object.observe to update objects automatically\n     * @param {boolean} [options.clone=false] - specify whether inserts and queries clone to/from user\n     * @param {boolean} [options.serializableIndices=true[]] - converts date values on binary indexed properties to epoch time\n     * @param {boolean} [options.disableFreeze=true] - when false all docs are frozen\n     * @param {string} [options.cloneMethod='parse-stringify'] - 'parse-stringify', 'jquery-extend-deep', 'shallow', 'shallow-assign'\n     * @param {int=} options.ttl - age of document (in ms.) before document is considered aged/stale.\n     * @param {int=} options.ttlInterval - time interval for clearing out 'aged' documents; not set by default.\n     * @see {@link Loki#addCollection} for normal creation of collections\n     */\n    function Collection(name, options) {\n      // the name of the collection\n\n      this.name = name;\n      // the data held by the collection\n      this.data = [];\n      this.idIndex = null; // position->$loki index (built lazily)\n      this.binaryIndices = {}; // user defined indexes\n      this.constraints = {\n        unique: {},\n        exact: {}\n      };\n\n      // unique contraints contain duplicate object references, so they are not persisted.\n      // we will keep track of properties which have unique contraint applied here, and regenerate lazily\n      this.uniqueNames = [];\n\n      // transforms will be used to store frequently used query chains as a series of steps\n      // which itself can be stored along with the database.\n      this.transforms = {};\n\n      // the object type of the collection\n      this.objType = name;\n\n      // in autosave scenarios we will use collection level dirty flags to determine whether save is needed.\n      // currently, if any collection is dirty we will autosave the whole database if autosave is configured.\n      // defaulting to true since this is called from addCollection and adding a collection should trigger save\n      this.dirty = true;\n\n      // private holders for cached data\n      this.cachedIndex = null;\n      this.cachedBinaryIndex = null;\n      this.cachedData = null;\n      var self = this;\n\n      /* OPTIONS */\n      options = options || {};\n\n      // exact match and unique constraints\n      if (options.hasOwnProperty('unique')) {\n        if (!Array.isArray(options.unique)) {\n          options.unique = [options.unique];\n        }\n        // save names; actual index is built lazily\n        options.unique.forEach(function (prop) {\n          self.uniqueNames.push(prop);\n        });\n      }\n\n      \n// (Code skipped for WatermelonDB build)\n\n\n      // if set to true we will optimally keep indices 'fresh' during insert/update/remove ops (never dirty/never needs rebuild)\n      // if you frequently intersperse insert/update/remove ops between find ops this will likely be significantly faster option.\n      this.adaptiveBinaryIndices = options.hasOwnProperty('adaptiveBinaryIndices') ? options.adaptiveBinaryIndices : true;\n\n      // is collection transactional\n      this.transactional = options.hasOwnProperty('transactional') ? options.transactional : false;\n\n      // options to clone objects when inserting them\n      this.cloneObjects = options.hasOwnProperty('clone') ? options.clone : false;\n\n      // default clone method (if enabled) is parse-stringify\n      this.cloneMethod = options.hasOwnProperty('cloneMethod') ? options.cloneMethod : \"parse-stringify\";\n\n      // option to make event listeners async, default is sync\n      this.asyncListeners = options.hasOwnProperty('asyncListeners') ? options.asyncListeners : false;\n\n      // if set to true we will not maintain a meta property for a document\n      this.disableMeta = options.hasOwnProperty('disableMeta') ? options.disableMeta : false;\n\n      // disable track changes\n      this.disableChangesApi = options.hasOwnProperty('disableChangesApi') ? options.disableChangesApi : true;\n\n      // disable delta update object style on changes\n      this.disableDeltaChangesApi = options.hasOwnProperty('disableDeltaChangesApi') ? options.disableDeltaChangesApi : true;\n      if (this.disableChangesApi) { this.disableDeltaChangesApi = true; }\n\n      // option to observe objects and update them automatically, ignored if Object.observe is not supported\n      this.autoupdate = options.hasOwnProperty('autoupdate') ? options.autoupdate : false;\n\n      // by default, if you insert a document into a collection with binary indices, if those indexed properties contain\n      // a DateTime we will convert to epoch time format so that (across serializations) its value position will be the\n      // same 'after' serialization as it was 'before'.\n      this.serializableIndices = options.hasOwnProperty('serializableIndices') ? options.serializableIndices : true;\n\n      // option to deep freeze all documents\n      this.disableFreeze = options.hasOwnProperty('disableFreeze') ? options.disableFreeze : true;\n\n      \n// (Code skipped for WatermelonDB build)\n\n\n      // currentMaxId - change manually at your own peril!\n      this.maxId = 0;\n\n      this.DynamicViews = [];\n\n      // events\n      this.events = {\n        'insert': [],\n        'update': [],\n        'pre-insert': [],\n        'pre-update': [],\n        'close': [],\n        'flushbuffer': [],\n        'error': [],\n        'delete': [],\n        'warning': []\n      };\n\n      // changes are tracked by collection and aggregated by the db\n      this.changes = [];\n\n      // lightweight changes tracking (loki IDs only) for optimized db saving\n      this.dirtyIds = [];\n\n      // initialize optional user-supplied indices array ['age', 'lname', 'zip']\n      var indices = [];\n      if (options && options.indices) {\n        if (Object.prototype.toString.call(options.indices) === '[object Array]') {\n          indices = options.indices;\n        } else if (typeof options.indices === 'string') {\n          indices = [options.indices];\n        } else {\n          throw new TypeError('Indices needs to be a string or an array of strings');\n        }\n      }\n\n      for (var idx = 0; idx < indices.length; idx++) {\n        this.ensureIndex(indices[idx]);\n      }\n\n      \n// (Code skipped for WatermelonDB build)\n\n\n      this.on('warning', function (warning) {\n        self.lokiConsoleWrapper.warn(warning);\n      });\n      \n// (Code skipped for WatermelonDB build)\n\n    }\n\n    Collection.prototype = new LokiEventEmitter();\n    Collection.prototype.contructor = Collection;\n    \n// (Code skipped for WatermelonDB build)\n\n    Collection.prototype.lokiConsoleWrapper = {\n      log: function () { },\n      warn: function () { },\n      error: function () { },\n    };\n\n    Collection.prototype.addAutoUpdateObserver = function (object) {\n      \n// (Code skipped for WatermelonDB build)\n\n    };\n\n    Collection.prototype.removeAutoUpdateObserver = function (object) {\n      \n// (Code skipped for WatermelonDB build)\n\n    };\n\n    \n// (Code skipped for WatermelonDB build)\n\n    /*----------------------------+\n    | INDEXING                    |\n    +----------------------------*/\n\n    /**\n     * create a row filter that covers all documents in the collection\n     */\n    Collection.prototype.prepareFullDocIndex = function () {\n      var len = this.data.length;\n      var indexes = new Array(len);\n      for (var i = 0; i < len; i += 1) {\n        indexes[i] = i;\n      }\n      return indexes;\n    };\n\n    /**\n     * Will allow reconfiguring certain collection options.\n     * @param {boolean} options.adaptiveBinaryIndices - collection indices will be actively rebuilt rather than lazily\n     * @memberof Collection\n     */\n    Collection.prototype.configureOptions = function (options) {\n      options = options || {};\n\n      if (options.hasOwnProperty('adaptiveBinaryIndices')) {\n        this.adaptiveBinaryIndices = options.adaptiveBinaryIndices;\n\n        // if switching to adaptive binary indices, make sure none are 'dirty'\n        if (this.adaptiveBinaryIndices) {\n          this.ensureAllIndexes();\n        }\n      }\n    };\n\n    /**\n     * Ensure binary index on a certain field\n     * @param {string} property - name of property to create binary index on\n     * @param {boolean=} force - (Optional) flag indicating whether to construct index immediately\n     * @memberof Collection\n     */\n    Collection.prototype.ensureIndex = function (property, force) {\n      // optional parameter to force rebuild whether flagged as dirty or not\n      if (typeof (force) === 'undefined') {\n        force = false;\n      }\n\n      if (property === null || property === undefined) {\n        throw new Error('Attempting to set index without an associated property');\n      }\n\n      if (this.binaryIndices[property] && !force) {\n        if (!this.binaryIndices[property].dirty) return;\n      }\n\n      // if the index is already defined and we are using adaptiveBinaryIndices and we are not forcing a rebuild, return.\n      if (this.adaptiveBinaryIndices === true && this.binaryIndices.hasOwnProperty(property) && !force) {\n        return;\n      }\n\n      var index = {\n        'name': property,\n        'dirty': true,\n        'values': this.prepareFullDocIndex()\n      };\n      this.binaryIndices[property] = index;\n\n      var wrappedComparer =\n        (function (prop, data) {\n          var val1, val2;\n          var propPath = ~prop.indexOf('.') ? prop.split('.') : false;\n          return function (a, b) {\n            if (propPath) {\n              val1 = Utils.getIn(data[a], propPath, true);\n              val2 = Utils.getIn(data[b], propPath, true);\n            } else {\n              val1 = data[a][prop];\n              val2 = data[b][prop];\n            }\n\n            if (val1 !== val2) {\n              if (Comparators.lt(val1, val2, false)) return -1;\n              if (Comparators.gt(val1, val2, false)) return 1;\n            }\n            return 0;\n          };\n        })(property, this.data);\n\n      index.values.sort(wrappedComparer);\n      index.dirty = false;\n\n      this.dirty = true; // for autosave scenarios\n    };\n\n    /**\n     * Perform checks to determine validity/consistency of all binary indices\n     * @param {object=} options - optional configuration object\n     * @param {boolean} [options.randomSampling=false] - whether (faster) random sampling should be used\n     * @param {number} [options.randomSamplingFactor=0.10] - percentage of total rows to randomly sample\n     * @param {boolean} [options.repair=false] - whether to fix problems if they are encountered\n     * @returns {string[]} array of index names where problems were found.\n     * @memberof Collection\n     * @example\n     * // check all indices on a collection, returns array of invalid index names\n     * var result = coll.checkAllIndexes({ repair: true, randomSampling: true, randomSamplingFactor: 0.15 });\n     * if (result.length > 0) {\n     *   results.forEach(function(name) {\n     *     console.log('problem encountered with index : ' + name);\n     *   });\n     * }\n     */\n    Collection.prototype.checkAllIndexes = function (options) {\n      var key, bIndices = this.binaryIndices;\n      var results = [], result;\n\n      for (key in bIndices) {\n        if (hasOwnProperty.call(bIndices, key)) {\n          result = this.checkIndex(key, options);\n          if (!result) {\n            results.push(key);\n          }\n        }\n      }\n\n      return results;\n    };\n\n    /**\n     * Perform checks to determine validity/consistency of a binary index\n     * @param {string} property - name of the binary-indexed property to check\n     * @param {object=} options - optional configuration object\n     * @param {boolean} [options.randomSampling=false] - whether (faster) random sampling should be used\n     * @param {number} [options.randomSamplingFactor=0.10] - percentage of total rows to randomly sample\n     * @param {boolean} [options.repair=false] - whether to fix problems if they are encountered\n     * @returns {boolean} whether the index was found to be valid (before optional correcting).\n     * @memberof Collection\n     * @example\n     * // full test\n     * var valid = coll.checkIndex('name');\n     * // full test with repair (if issues found)\n     * valid = coll.checkIndex('name', { repair: true });\n     * // random sampling (default is 10% of total document count)\n     * valid = coll.checkIndex('name', { randomSampling: true });\n     * // random sampling (sample 20% of total document count)\n     * valid = coll.checkIndex('name', { randomSampling: true, randomSamplingFactor: 0.20 });\n     * // random sampling (implied boolean)\n     * valid = coll.checkIndex('name', { randomSamplingFactor: 0.20 });\n     * // random sampling with repair (if issues found)\n     * valid = coll.checkIndex('name', { repair: true, randomSampling: true });\n     */\n    Collection.prototype.checkIndex = function (property, options) {\n      options = options || {};\n      // if 'randomSamplingFactor' specified but not 'randomSampling', assume true\n      if (options.randomSamplingFactor && options.randomSampling !== false) {\n        options.randomSampling = true;\n      }\n      options.randomSamplingFactor = options.randomSamplingFactor || 0.1;\n      if (options.randomSamplingFactor < 0 || options.randomSamplingFactor > 1) {\n        options.randomSamplingFactor = 0.1;\n      }\n\n      var valid = true, idx, iter, pos, len, biv;\n\n      // make sure we are passed a valid binary index name\n      if (!this.binaryIndices.hasOwnProperty(property)) {\n        throw new Error(\"called checkIndex on property without an index: \" + property);\n      }\n\n      // if lazy indexing, rebuild only if flagged as dirty\n      if (!this.adaptiveBinaryIndices) {\n        this.ensureIndex(property);\n      }\n\n      biv = this.binaryIndices[property].values;\n      len = biv.length;\n\n      // if the index has an incorrect number of values\n      if (len !== this.data.length) {\n        if (options.repair) {\n          this.ensureIndex(property, true);\n        }\n        return false;\n      }\n\n      if (len === 0) {\n        return true;\n      }\n\n      var usingDotNotation = (property.indexOf('.') !== -1);\n\n      if (len === 1) {\n        valid = (biv[0] === 0);\n      }\n      else {\n        if (options.randomSampling) {\n          // validate first and last\n          if (!LokiOps.$lte(Utils.getIn(this.data[biv[0]], property, usingDotNotation),\n            Utils.getIn(this.data[biv[1]], property, usingDotNotation))) {\n            valid = false;\n          }\n          if (!LokiOps.$lte(Utils.getIn(this.data[biv[len - 2]], property, usingDotNotation),\n            Utils.getIn(this.data[biv[len - 1]], property, usingDotNotation))) {\n            valid = false;\n          }\n\n          // if first and last positions are sorted correctly with their nearest neighbor,\n          // continue onto random sampling phase...\n          if (valid) {\n            // # random samplings = total count * sampling factor\n            iter = Math.floor((len - 1) * options.randomSamplingFactor);\n\n            // for each random sampling, validate that the binary index is sequenced properly\n            // with next higher value.\n            for (idx = 0; idx < iter - 1; idx++) {\n              // calculate random position\n              pos = Math.floor(Math.random() * (len - 1));\n              if (!LokiOps.$lte(Utils.getIn(this.data[biv[pos]], property, usingDotNotation),\n                Utils.getIn(this.data[biv[pos + 1]], property, usingDotNotation))) {\n                valid = false;\n                break;\n              }\n            }\n          }\n        }\n        else {\n          // validate that the binary index is sequenced properly\n          for (idx = 0; idx < len - 1; idx++) {\n            if (!LokiOps.$lte(Utils.getIn(this.data[biv[idx]], property, usingDotNotation),\n              Utils.getIn(this.data[biv[idx + 1]], property, usingDotNotation))) {\n              valid = false;\n              break;\n            }\n          }\n        }\n      }\n\n      // if incorrectly sequenced and we are to fix problems, rebuild index\n      if (!valid && options.repair) {\n        this.ensureIndex(property, true);\n      }\n\n      return valid;\n    };\n\n    Collection.prototype.getBinaryIndexValues = function (property) {\n      var idx, idxvals = this.binaryIndices[property].values;\n      var result = [];\n\n      for (idx = 0; idx < idxvals.length; idx++) {\n        result.push(Utils.getIn(this.data[idxvals[idx]], property, true));\n      }\n\n      return result;\n    };\n\n    /**\n     * Returns a named unique index\n     * @param {string} field - indexed field name\n     * @param {boolean} force - if `true`, will rebuild index; otherwise, function may return null\n     */\n    Collection.prototype.getUniqueIndex = function (field, force) {\n      var index = this.constraints.unique[field];\n      if (!index && force) {\n        return this.ensureUniqueIndex(field);\n      }\n      return index;\n    };\n\n    Collection.prototype.ensureUniqueIndex = function (field) {\n      var index = this.constraints.unique[field];\n      if (!index) {\n        // keep track of new unique index for regenerate after database (re)load.\n        if (this.uniqueNames.indexOf(field) == -1) {\n          this.uniqueNames.push(field);\n        }\n      }\n\n      // if index already existed, (re)loading it will likely cause collisions, rebuild always\n      this.constraints.unique[field] = index = new UniqueIndex(field);\n      this.data.forEach(function (obj) {\n        index.set(obj);\n      });\n      return index;\n    };\n\n    /**\n     * Ensure all binary indices\n     * @param {boolean} force - whether to force rebuild of existing lazy binary indices\n     * @memberof Collection\n     */\n    Collection.prototype.ensureAllIndexes = function (force) {\n      var key, bIndices = this.binaryIndices;\n      for (key in bIndices) {\n        if (hasOwnProperty.call(bIndices, key)) {\n          this.ensureIndex(key, force);\n        }\n      }\n    };\n\n    /**\n     * Internal method used to flag all lazy index as dirty\n     */\n    Collection.prototype.flagBinaryIndexesDirty = function () {\n      var key, bIndices = this.binaryIndices;\n      for (key in bIndices) {\n        if (hasOwnProperty.call(bIndices, key)) {\n          bIndices[key].dirty = true;\n        }\n      }\n    };\n\n    /**\n     * Internal method used to flag a lazy index as dirty\n     */\n    Collection.prototype.flagBinaryIndexDirty = function (index) {\n      if (this.binaryIndices[index])\n        this.binaryIndices[index].dirty = true;\n    };\n\n    /**\n     * Quickly determine number of documents in collection (or query)\n     * @param {object=} query - (optional) query object to count results of\n     * @returns {number} number of documents in the collection\n     * @memberof Collection\n     */\n    Collection.prototype.count = function (query) {\n      if (!query) {\n        return this.data.length;\n      }\n\n      return this.chain().find(query).filteredrows.length;\n    };\n\n    /**\n     * Rebuild idIndex\n     */\n    Collection.prototype.ensureId = function () {\n      if (this.idIndex) {\n        return;\n      }\n      var data = this.data,\n        i = 0;\n      var len = data.length;\n      var index = new Array(len);\n      for (i; i < len; i++) {\n        index[i] = data[i].$loki;\n      }\n      this.idIndex = index;\n    };\n    \n// (Code skipped for WatermelonDB build)\n\n    /**\n     * Applies a 'mongo-like' find query object and passes all results to an update function.\n     * For filter function querying you should migrate to [updateWhere()]{@link Collection#updateWhere}.\n     *\n     * @param {object|function} filterObject - 'mongo-like' query object (or deprecated filterFunction mode)\n     * @param {function} updateFunction - update function to run against filtered documents\n     * @memberof Collection\n     */\n    Collection.prototype.findAndUpdate = function (filterObject, updateFunction) {\n      if (typeof (filterObject) === \"function\") {\n        this.updateWhere(filterObject, updateFunction);\n      }\n      else {\n        this.chain().find(filterObject).update(updateFunction);\n      }\n    };\n\n    /**\n     * Applies a 'mongo-like' find query object removes all documents which match that filter.\n     *\n     * @param {object} filterObject - 'mongo-like' query object\n     * @memberof Collection\n     */\n    Collection.prototype.findAndRemove = function (filterObject) {\n      this.chain().find(filterObject).remove();\n    };\n\n    /**\n     * Adds object(s) to collection, ensure object(s) have meta properties, clone it if necessary, etc.\n     * @param {(object|array)} doc - the document (or array of documents) to be inserted\n     * @param {boolean=} overrideAdaptiveIndices - (optional) if `true`, adaptive indicies will be\n     *   temporarily disabled and then fully rebuilt after batch. This will be faster for\n     *   large inserts, but slower for small/medium inserts in large collections\n     * @returns {(object|array)} document or documents inserted\n     * @memberof Collection\n     * @example\n     * users.insert({\n     *     name: 'Odin',\n     *     age: 50,\n     *     address: 'Asgard'\n     * });\n     *\n     * // alternatively, insert array of documents\n     * users.insert([{ name: 'Thor', age: 35}, { name: 'Loki', age: 30}]);\n     */\n    Collection.prototype.insert = function (doc, overrideAdaptiveIndices) {\n      if (!Array.isArray(doc)) {\n        return this.insertOne(doc);\n      }\n\n      // holder to the clone of the object inserted if collections is set to clone objects\n      var obj;\n      var results = [];\n\n      // if not cloning, disable adaptive binary indices for the duration of the batch insert,\n      // followed by lazy rebuild and re-enabling adaptive indices after batch insert.\n      var adaptiveBatchOverride = overrideAdaptiveIndices && !this.cloneObjects &&\n        this.adaptiveBinaryIndices && Object.keys(this.binaryIndices).length > 0;\n\n      if (adaptiveBatchOverride) {\n        this.adaptiveBinaryIndices = false;\n      }\n\n      try {\n        this.emit('pre-insert', doc);\n        for (var i = 0, len = doc.length; i < len; i++) {\n          obj = this.insertOne(doc[i], true);\n          if (!obj) {\n            return undefined;\n          }\n          results.push(obj);\n        }\n      } finally {\n        if (adaptiveBatchOverride) {\n          this.ensureAllIndexes();\n          this.adaptiveBinaryIndices = true;\n        }\n      }\n\n      // at the 'batch' level, if clone option is true then emitted docs are clones\n      this.emit('insert', results);\n\n      // if clone option is set, clone return values\n      results = this.cloneObjects ? clone(results, this.cloneMethod) : results;\n\n      return results.length === 1 ? results[0] : results;\n    };\n\n    /**\n     * Adds a single object, ensures it has meta properties, clone it if necessary, etc.\n     * @param {object} doc - the document to be inserted\n     * @param {boolean} bulkInsert - quiet pre-insert and insert event emits\n     * @returns {object} document or 'undefined' if there was a problem inserting it\n     */\n    Collection.prototype.insertOne = function (doc, bulkInsert) {\n      var err = null;\n      var returnObj;\n\n      if (typeof doc !== 'object') {\n        err = new TypeError('Document needs to be an object');\n      } else if (doc === null) {\n        err = new TypeError('Object cannot be null');\n      }\n\n      if (err !== null) {\n        this.emit('error', err);\n        throw err;\n      }\n\n      // if configured to clone, do so now... otherwise just use same obj reference\n      var obj = this.cloneObjects ? clone(doc, this.cloneMethod) : doc;\n      if (!this.disableFreeze) {\n        obj = unFreeze(obj);\n      }\n\n      if (!this.disableMeta) {\n        if (typeof obj.meta === 'undefined') {\n          obj.meta = {\n            revision: 0,\n            created: 0\n          };\n        } else if (!this.disableFreeze) {\n          obj.meta = unFreeze(obj.meta);\n        }\n      }\n\n      // both 'pre-insert' and 'insert' events are passed internal data reference even when cloning\n      // insert needs internal reference because that is where loki itself listens to add meta\n      if (!bulkInsert) {\n        this.emit('pre-insert', obj);\n      }\n      if (!this.add(obj)) {\n        return undefined;\n      }\n\n      // update meta and store changes if ChangesAPI is enabled\n      // (moved from \"insert\" event listener to allow internal reference to be used)\n      \n// (Code skipped for WatermelonDB build)\n\n\n      if (!this.disableFreeze) {\n        deepFreeze(obj);\n      }\n\n      // if cloning is enabled, emit insert event with clone of new object\n      returnObj = this.cloneObjects ? clone(obj, this.cloneMethod) : obj;\n\n      if (!bulkInsert) {\n        this.emit('insert', returnObj);\n      }\n\n      this.addAutoUpdateObserver(returnObj);\n\n      return returnObj;\n    };\n\n    /**\n     * Empties the collection.\n     * @param {object=} options - configure clear behavior\n     * @param {bool=} [options.removeIndices=false] - whether to remove indices in addition to data\n     * @memberof Collection\n     */\n    Collection.prototype.clear = function (options) {\n      var self = this;\n\n      options = options || {};\n\n      this.data = [];\n      this.idIndex = null;\n      this.cachedIndex = null;\n      this.cachedBinaryIndex = null;\n      this.cachedData = null;\n      this.maxId = 0;\n      this.DynamicViews = [];\n      this.dirty = true;\n      this.constraints = {\n        unique: {},\n        exact: {}\n      };\n\n      // if removing indices entirely\n      if (options.removeIndices === true) {\n        this.binaryIndices = {};\n        this.uniqueNames = [];\n      }\n      // clear indices but leave definitions in place\n      else {\n        // clear binary indices\n        var keys = Object.keys(this.binaryIndices);\n        keys.forEach(function (biname) {\n          self.binaryIndices[biname].dirty = false;\n          self.binaryIndices[biname].values = [];\n        });\n      }\n    };\n\n    /**\n     * Updates an object and notifies collection that the document has changed.\n     * @param {object} doc - document to update within the collection\n     * @memberof Collection\n     */\n    Collection.prototype.update = function (doc) {\n      var adaptiveBatchOverride, k, len;\n\n      if (Array.isArray(doc)) {\n        len = doc.length;\n\n        // if not cloning, disable adaptive binary indices for the duration of the batch update,\n        // followed by lazy rebuild and re-enabling adaptive indices after batch update.\n        adaptiveBatchOverride = !this.cloneObjects &&\n          this.adaptiveBinaryIndices && Object.keys(this.binaryIndices).length > 0;\n\n        if (adaptiveBatchOverride) {\n          this.adaptiveBinaryIndices = false;\n        }\n\n        try {\n          for (k = 0; k < len; k += 1) {\n            this.update(doc[k]);\n          }\n        }\n        finally {\n          if (adaptiveBatchOverride) {\n            this.ensureAllIndexes();\n            this.adaptiveBinaryIndices = true;\n          }\n        }\n\n        return;\n      }\n\n      // verify object is a properly formed document\n      if (!hasOwnProperty.call(doc, '$loki')) {\n        throw new Error('Trying to update unsynced document. Please save the document first by using insert() or addMany()');\n      }\n      try {\n        this.startTransaction();\n        var arr = this.get(doc.$loki, true),\n          oldInternal,   // ref to existing obj\n          newInternal, // ref to new internal obj\n          position,\n          self = this;\n\n        if (!arr) {\n          throw new Error('Trying to update a document not in collection.');\n        }\n\n        oldInternal = arr[0]; // -internal- obj ref\n        position = arr[1]; // position in data array\n\n        // if configured to clone, do so now... otherwise just use same obj reference\n        newInternal = this.cloneObjects || (!this.disableDeltaChangesApi && this.disableFreeze) ? clone(doc, this.cloneMethod) : doc;\n\n        this.emit('pre-update', doc);\n\n        this.uniqueNames.forEach(function (key) {\n          self.getUniqueIndex(key, true).update(oldInternal, newInternal);\n        });\n\n        // operate the update\n        this.data[position] = newInternal;\n\n        if (newInternal !== doc) {\n          this.addAutoUpdateObserver(doc);\n        }\n\n        // now that we can efficiently determine the data[] position of newly added document,\n        // submit it for all registered DynamicViews to evaluate for inclusion/exclusion\n        for (var idx = 0; idx < this.DynamicViews.length; idx++) {\n          this.DynamicViews[idx].evaluateDocument(position, false);\n        }\n\n        var key;\n        if (this.adaptiveBinaryIndices) {\n          // for each binary index defined in collection, immediately update rather than flag for lazy rebuild\n          var bIndices = this.binaryIndices;\n          for (key in bIndices) {\n            this.adaptiveBinaryIndexUpdate(position, key);\n          }\n        }\n        else {\n          this.flagBinaryIndexesDirty();\n        }\n\n        this.idIndex[position] = newInternal.$loki;\n        //this.flagBinaryIndexesDirty();\n\n        if (this.isIncremental) {\n          this.dirtyIds.push(newInternal.$loki);\n        }\n\n        this.commit();\n        this.dirty = true; // for autosave scenarios\n\n        // update meta and store changes if ChangesAPI is enabled\n        \n// (Code skipped for WatermelonDB build)\n\n\n        if (!this.disableFreeze) {\n          deepFreeze(newInternal);\n        }\n\n        var returnObj;\n\n        // if cloning is enabled, emit 'update' event and return with clone of new object\n        if (this.cloneObjects) {\n          returnObj = clone(newInternal, this.cloneMethod);\n        }\n        else {\n          returnObj = newInternal;\n        }\n\n        this.emit('update', returnObj, oldInternal);\n        return returnObj;\n      } catch (err) {\n        this.rollback();\n        this.lokiConsoleWrapper.error(err.message);\n        this.emit('error', err);\n        throw (err); // re-throw error so user does not think it succeeded\n      }\n    };\n\n    /**\n     * Add object to collection\n     */\n    Collection.prototype.add = function (obj) {\n      // if parameter isn't object exit with throw\n      if ('object' !== typeof obj) {\n        throw new TypeError('Object being added needs to be an object');\n      }\n      // if object you are adding already has id column it is either already in the collection\n      // or the object is carrying its own 'id' property.  If it also has a meta property,\n      // then this is already in collection so throw error, otherwise rename to originalId and continue adding.\n      if (typeof (obj.$loki) !== 'undefined') {\n        throw new Error('Document is already in collection, please use update()');\n      }\n\n      /*\n       * try adding object to collection\n       */\n      try {\n        this.startTransaction();\n        this.maxId++;\n\n        if (isNaN(this.maxId)) {\n          this.maxId = (this.data[this.data.length - 1].$loki + 1);\n        }\n\n        var newId = this.maxId;\n        obj.$loki = newId;\n\n        if (!this.disableMeta) {\n          obj.meta.version = 0;\n        }\n\n        for (var i = 0, len = this.uniqueNames.length; i < len; i ++) {\n          this.getUniqueIndex(this.uniqueNames[i], true).set(obj);\n        }\n\n        if (this.idIndex) {\n          this.idIndex.push(newId);\n        }\n\n        if (this.isIncremental) {\n          this.dirtyIds.push(newId);\n        }\n\n        // add the object\n        this.data.push(obj);\n\n        var addedPos = this.data.length - 1;\n\n        // now that we can efficiently determine the data[] position of newly added document,\n        // submit it for all registered DynamicViews to evaluate for inclusion/exclusion\n        var dvlen = this.DynamicViews.length;\n        for (i = 0; i < dvlen; i++) {\n          this.DynamicViews[i].evaluateDocument(addedPos, true);\n        }\n\n        if (this.adaptiveBinaryIndices) {\n          // for each binary index defined in collection, immediately update rather than flag for lazy rebuild\n          var bIndices = this.binaryIndices;\n          for (var key in bIndices) {\n            this.adaptiveBinaryIndexInsert(addedPos, key);\n          }\n        }\n        else {\n          this.flagBinaryIndexesDirty();\n        }\n\n        this.commit();\n        this.dirty = true; // for autosave scenarios\n\n        return (this.cloneObjects) ? (clone(obj, this.cloneMethod)) : (obj);\n      } catch (err) {\n        this.rollback();\n        this.lokiConsoleWrapper.error(err.message);\n        this.emit('error', err);\n        throw (err); // re-throw error so user does not think it succeeded\n      }\n    };\n\n    /**\n     * Applies a filter function and passes all results to an update function.\n     *\n     * @param {function} filterFunction - filter function whose results will execute update\n     * @param {function} updateFunction - update function to run against filtered documents\n     * @memberof Collection\n     */\n    Collection.prototype.updateWhere = function (filterFunction, updateFunction) {\n      var results = this.where(filterFunction),\n        i = 0,\n        obj;\n      try {\n        for (i; i < results.length; i++) {\n          obj = updateFunction(results[i]);\n          this.update(obj);\n        }\n\n      } catch (err) {\n        this.rollback();\n        this.lokiConsoleWrapper.error(err.message);\n      }\n    };\n\n    /**\n     * Remove all documents matching supplied filter function.\n     * For 'mongo-like' querying you should migrate to [findAndRemove()]{@link Collection#findAndRemove}.\n     * @param {function|object} query - query object to filter on\n     * @memberof Collection\n     */\n    Collection.prototype.removeWhere = function (query) {\n      var list;\n      if (typeof query === 'function') {\n        list = this.data.filter(query);\n        this.remove(list);\n      } else {\n        this.chain().find(query).remove();\n      }\n    };\n\n    Collection.prototype.removeDataOnly = function () {\n      this.remove(this.data.slice());\n    };\n\n    /**\n     * Internal method to remove a batch of documents from the collection.\n     * @param {number[]} positions - data/idIndex positions to remove\n     */\n    Collection.prototype.removeBatchByPositions = function (positions) {\n      var len = positions.length;\n      var xo = {};\n      var dlen, didx, idx;\n      var bic = Object.keys(this.binaryIndices).length;\n      var uic = Object.keys(this.constraints.unique).length;\n      var adaptiveOverride = this.adaptiveBinaryIndices && Object.keys(this.binaryIndices).length > 0;\n      var doc, self = this;\n\n      try {\n        this.startTransaction();\n\n        // create hashobject for positional removal inclusion tests...\n        // all keys defined in this hashobject represent $loki ids of the documents to remove.\n        this.ensureId();\n        for (idx = 0; idx < len; idx++) {\n          xo[this.idIndex[positions[idx]]] = true;\n        }\n\n        // if we will need to notify dynamic views and/or binary indices to update themselves...\n        dlen = this.DynamicViews.length;\n        if ((dlen > 0) || (bic > 0) || (uic > 0)) {\n          if (dlen > 0) {\n            // notify dynamic views to remove relevant documents at data positions\n            for (didx = 0; didx < dlen; didx++) {\n              // notify dv of remove (passing batch/array of positions)\n              this.DynamicViews[didx].removeDocument(positions);\n            }\n          }\n\n          // notify binary indices to update\n          if (this.adaptiveBinaryIndices && !adaptiveOverride) {\n            // for each binary index defined in collection, immediately update rather than flag for lazy rebuild\n            var key, bIndices = this.binaryIndices;\n\n            for (key in bIndices) {\n              this.adaptiveBinaryIndexRemove(positions, key);\n            }\n          }\n          else {\n            this.flagBinaryIndexesDirty();\n          }\n\n          if (uic) {\n            this.uniqueNames.forEach(function (key) {\n              var index = self.getUniqueIndex(key);\n              if (index) {\n                for (idx = 0; idx < len; idx++) {\n                  doc = self.data[positions[idx]];\n                  if (doc[key] !== null && doc[key] !== undefined) {\n                    index.remove(doc[key]);\n                  }\n                }\n              }\n            });\n          }\n        }\n\n        // emit 'delete' events only of listeners are attached.\n        // since data not removed yet, in future we can emit single delete event with array...\n        // for now that might be breaking change to put in potential 1.6 or LokiDB (lokijs2) version\n        if (!this.disableChangesApi || this.events.delete.length > 1) {\n          for (idx = 0; idx < len; idx++) {\n            this.emit('delete', this.data[positions[idx]]);\n          }\n        }\n\n        // remove from data[] :\n        // filter collection data for items not in inclusion hashobject\n        this.data = this.data.filter(function (obj) {\n          return !xo[obj.$loki];\n        });\n\n        if (this.isIncremental) {\n          for(idx=0; idx < len; idx++) {\n            this.dirtyIds.push(this.idIndex[positions[idx]]);\n          }\n        }\n\n        // remove from idIndex[] :\n        // filter idIndex for items not in inclusion hashobject\n        this.idIndex = this.idIndex.filter(function (id) {\n          return !xo[id];\n        });\n\n        if (this.adaptiveBinaryIndices && adaptiveOverride) {\n          this.adaptiveBinaryIndices = false;\n          this.ensureAllIndexes(true);\n          this.adaptiveBinaryIndices = true;\n        }\n\n        this.commit();\n\n        // flag collection as dirty for autosave\n        this.dirty = true;\n      }\n      catch (err) {\n        this.rollback();\n        if (adaptiveOverride) {\n          this.adaptiveBinaryIndices = true;\n        }\n        this.lokiConsoleWrapper.error(err.message);\n        this.emit('error', err);\n        return null;\n      }\n    };\n\n    /**\n     *  Internal method called by remove()\n     * @param {object[]|number[]} batch - array of documents or $loki ids to remove\n     */\n    Collection.prototype.removeBatch = function (batch) {\n      var len = batch.length,\n        dlen = this.data.length,\n        idx;\n      var xlt = {};\n      var posx = [];\n\n      // create lookup hashobject to translate $loki id to position\n      for (idx = 0; idx < dlen; idx++) {\n        xlt[this.data[idx].$loki] = idx;\n      }\n\n      // iterate the batch\n      for (idx = 0; idx < len; idx++) {\n        if (typeof (batch[idx]) === 'object') {\n          posx.push(xlt[batch[idx].$loki]);\n        }\n        else {\n          posx.push(xlt[batch[idx]]);\n        }\n      }\n\n      this.removeBatchByPositions(posx);\n    };\n\n    /**\n     * Remove a document from the collection\n     * @param {object} doc - document to remove from collection\n     * @memberof Collection\n     */\n    Collection.prototype.remove = function (doc) {\n      var frozen;\n\n      if (typeof doc === 'number') {\n        doc = this.get(doc);\n      }\n\n      if ('object' !== typeof doc) {\n        throw new Error('Parameter is not an object');\n      }\n      if (Array.isArray(doc)) {\n        this.removeBatch(doc);\n        return;\n      }\n\n      if (!hasOwnProperty.call(doc, '$loki')) {\n        throw new Error('Object is not a document stored in the collection');\n      }\n\n      try {\n        this.startTransaction();\n        var arr = this.get(doc.$loki, true),\n          // obj = arr[0],\n          position = arr[1];\n        var self = this;\n        this.uniqueNames.forEach(function (key) {\n          if (doc[key] !== null && typeof doc[key] !== 'undefined') {\n            var index = self.getUniqueIndex(key);\n            if (index) {\n              index.remove(doc[key]);\n            }\n          }\n        });\n        // now that we can efficiently determine the data[] position of newly added document,\n        // submit it for all registered DynamicViews to remove\n        for (var idx = 0; idx < this.DynamicViews.length; idx++) {\n          this.DynamicViews[idx].removeDocument(position);\n        }\n\n        if (this.adaptiveBinaryIndices) {\n          // for each binary index defined in collection, immediately update rather than flag for lazy rebuild\n          var key, bIndices = this.binaryIndices;\n          for (key in bIndices) {\n            this.adaptiveBinaryIndexRemove(position, key);\n          }\n        }\n        else {\n          this.flagBinaryIndexesDirty();\n        }\n\n        this.data.splice(position, 1);\n        this.removeAutoUpdateObserver(doc);\n\n        // remove id from idIndex\n        this.idIndex.splice(position, 1);\n\n        if (this.isIncremental) {\n          this.dirtyIds.push(doc.$loki);\n        }\n\n        this.commit();\n        this.dirty = true; // for autosave scenarios\n        this.emit('delete', arr[0]);\n\n        if (!this.disableFreeze) {\n          doc = unFreeze(doc);\n        }\n        delete doc.$loki;\n        delete doc.meta;\n        if (!this.disableFreeze) {\n          freeze(doc);\n        }\n        return doc;\n\n      } catch (err) {\n        this.rollback();\n        this.lokiConsoleWrapper.error(err.message);\n        this.emit('error', err);\n        return null;\n      }\n    };\n\n    /*---------------------+\n    | Finding methods     |\n    +----------------------*/\n\n    /**\n     * Get by Id - faster than other methods because of the searching algorithm\n     * @param {int} id - $loki id of document you want to retrieve\n     * @param {boolean} returnPosition - if 'true' we will return [object, position]\n     * @returns {(object|array|null)} Object reference if document was found, null if not,\n     *     or an array if 'returnPosition' was passed.\n     * @memberof Collection\n     */\n    Collection.prototype.get = function (id, returnPosition) {\n      if (!this.idIndex) {\n        this.ensureId();\n      }\n\n      var retpos = returnPosition || false,\n        data = this.idIndex,\n        max = data.length - 1,\n        min = 0,\n        mid = (min + max) >> 1;\n\n      id = typeof id === 'number' ? id : parseInt(id, 10);\n\n      if (isNaN(id)) {\n        throw new TypeError('Passed id is not an integer');\n      }\n\n      while (data[min] < data[max]) {\n        mid = (min + max) >> 1;\n\n        if (data[mid] < id) {\n          min = mid + 1;\n        } else {\n          max = mid;\n        }\n      }\n\n      if (max === min && data[min] === id) {\n        if (retpos) {\n          return [this.data[min], min];\n        }\n        return this.data[min];\n      }\n      return null;\n\n    };\n\n    /**\n     * Perform binary range lookup for the data[dataPosition][binaryIndexName] property value\n     *    Since multiple documents may contain the same value (which the index is sorted on),\n     *    we hone in on range and then linear scan range to find exact index array position.\n     * @param {int} dataPosition : coll.data array index/position\n     * @param {string} binaryIndexName : index to search for dataPosition in\n     */\n    Collection.prototype.getBinaryIndexPosition = function (dataPosition, binaryIndexName) {\n      var val = Utils.getIn(this.data[dataPosition], binaryIndexName, true);\n      var index = this.binaryIndices[binaryIndexName].values;\n\n      // i think calculateRange can probably be moved to collection\n      // as it doesn't seem to need resultset.  need to verify\n      var range = this.calculateRange(\"$eq\", binaryIndexName, val);\n\n      if (range[0] === 0 && range[1] === -1) {\n        // uhoh didn't find range\n        return null;\n      }\n\n      var min = range[0];\n      var max = range[1];\n\n      // narrow down the sub-segment of index values\n      // where the indexed property value exactly matches our\n      // value and then linear scan to find exact -index- position\n      for (var idx = min; idx <= max; idx++) {\n        if (index[idx] === dataPosition) return idx;\n      }\n\n      // uhoh\n      return null;\n    };\n\n    /**\n     * Adaptively insert a selected item to the index.\n     * @param {int} dataPosition : coll.data array index/position\n     * @param {string} binaryIndexName : index to search for dataPosition in\n     */\n    Collection.prototype.adaptiveBinaryIndexInsert = function (dataPosition, binaryIndexName) {\n      var usingDotNotation = (binaryIndexName.indexOf('.') !== -1);\n      var index = this.binaryIndices[binaryIndexName].values;\n      var val = Utils.getIn(this.data[dataPosition], binaryIndexName, usingDotNotation);\n\n      // If you are inserting a javascript Date value into a binary index, convert to epoch time\n      if (this.serializableIndices === true && val instanceof Date) {\n        this.data[dataPosition][binaryIndexName] = val.getTime();\n        val = Utils.getIn(this.data[dataPosition], binaryIndexName);\n      }\n\n      var idxPos = (index.length === 0) ? 0 : this.calculateRangeStart(binaryIndexName, val, true, usingDotNotation);\n\n      // insert new data index into our binary index at the proper sorted location for relevant property calculated by idxPos.\n      // doing this after adjusting dataPositions so no clash with previous item at that position.\n      this.binaryIndices[binaryIndexName].values.splice(idxPos, 0, dataPosition);\n    };\n\n    /**\n     * Adaptively update a selected item within an index.\n     * @param {int} dataPosition : coll.data array index/position\n     * @param {string} binaryIndexName : index to search for dataPosition in\n     */\n    Collection.prototype.adaptiveBinaryIndexUpdate = function (dataPosition, binaryIndexName) {\n      // linear scan needed to find old position within index unless we optimize for clone scenarios later\n      // within (my) node 5.6.0, the following for() loop with strict compare is -much- faster than indexOf()\n      var idxPos,\n        index = this.binaryIndices[binaryIndexName].values,\n        len = index.length;\n\n      for (idxPos = 0; idxPos < len; idxPos++) {\n        if (index[idxPos] === dataPosition) break;\n      }\n\n      //var idxPos = this.binaryIndices[binaryIndexName].values.indexOf(dataPosition);\n      this.binaryIndices[binaryIndexName].values.splice(idxPos, 1);\n\n      //this.adaptiveBinaryIndexRemove(dataPosition, binaryIndexName, true);\n      this.adaptiveBinaryIndexInsert(dataPosition, binaryIndexName);\n    };\n\n    /**\n     * Adaptively remove a selected item from the index.\n     * @param {number|number[]} dataPosition : coll.data array index/position\n     * @param {string} binaryIndexName : index to search for dataPosition in\n     */\n    Collection.prototype.adaptiveBinaryIndexRemove = function (dataPosition, binaryIndexName, removedFromIndexOnly) {\n      var bi = this.binaryIndices[binaryIndexName];\n      var len, idx, rmidx, rmlen, rxo = {};\n      var curr, shift, idxPos;\n\n      if (Array.isArray(dataPosition)) {\n        // when called from chained remove, and only one document in array,\n        // it will be faster to use old algorithm\n        rmlen = dataPosition.length;\n        if (rmlen === 1) {\n          dataPosition = dataPosition[0];\n        }\n        // we were passed an array (batch) of documents so use this 'batch optimized' algorithm\n        else {\n          for (rmidx = 0; rmidx < rmlen; rmidx++) {\n            rxo[dataPosition[rmidx]] = true;\n          }\n\n          // remove document from index (with filter function)\n          bi.values = bi.values.filter(function (di) { return !rxo[di]; });\n\n          // if we passed this optional flag parameter, we are calling from adaptiveBinaryIndexUpdate,\n          // in which case data positions stay the same.\n          if (removedFromIndexOnly === true) {\n            return;\n          }\n\n          var sortedPositions = dataPosition.slice();\n          sortedPositions.sort(function (a, b) { return a - b; });\n\n          // to remove holes, we need to 'shift down' the index's data array positions\n          // we need to adjust array positions -1 for each index data positions greater than removed positions\n          len = bi.values.length;\n          for (idx = 0; idx < len; idx++) {\n            curr = bi.values[idx];\n            shift = 0;\n            for (rmidx = 0; rmidx < rmlen && curr > sortedPositions[rmidx]; rmidx++) {\n              shift++;\n            }\n            bi.values[idx] -= shift;\n          }\n\n          // batch processed, bail out\n          return;\n        }\n\n        // not a batch so continue...\n      }\n\n      idxPos = this.getBinaryIndexPosition(dataPosition, binaryIndexName);\n\n      if (idxPos === null) {\n        // throw new Error('unable to determine binary index position');\n        return null;\n      }\n\n      // remove document from index (with splice)\n      bi.values.splice(idxPos, 1);\n\n      // if we passed this optional flag parameter, we are calling from adaptiveBinaryIndexUpdate,\n      // in which case data positions stay the same.\n      if (removedFromIndexOnly === true) {\n        return;\n      }\n\n      // since index stores data array positions, if we remove a document\n      // we need to adjust array positions -1 for all document positions greater than removed position\n      len = bi.values.length;\n      for (idx = 0; idx < len; idx++) {\n        if (bi.values[idx] > dataPosition) {\n          bi.values[idx]--;\n        }\n      }\n    };\n\n    /**\n     * Internal method used for index maintenance and indexed searching.\n     * Calculates the beginning of an index range for a given value.\n     * For index maintainance (adaptive:true), we will return a valid index position to insert to.\n     * For querying (adaptive:false/undefined), we will :\n     *    return lower bound/index of range of that value (if found)\n     *    return next lower index position if not found (hole)\n     * If index is empty it is assumed to be handled at higher level, so\n     * this method assumes there is at least 1 document in index.\n     *\n     * @param {string} prop - name of property which has binary index\n     * @param {any} val - value to find within index\n     * @param {bool?} adaptive - if true, we will return insert position\n     */\n    Collection.prototype.calculateRangeStart = function (prop, val, adaptive, usingDotNotation) {\n      var rcd = this.data;\n      var index = this.binaryIndices[prop].values;\n      var min = 0;\n      var max = index.length - 1;\n      var mid = 0;\n\n      if (index.length === 0) {\n        return -1;\n      }\n\n      var minVal = Utils.getIn(rcd[index[min]], prop, usingDotNotation);\n      var maxVal = Utils.getIn(rcd[index[max]], prop, usingDotNotation);\n\n      // hone in on start position of value\n      while (min < max) {\n        mid = (min + max) >> 1;\n\n        if (Comparators.lt(Utils.getIn(rcd[index[mid]], prop, usingDotNotation), val, false)) {\n          min = mid + 1;\n        } else {\n          max = mid;\n        }\n      }\n\n      var lbound = min;\n\n      // found it... return it\n      if (Comparators.aeq(val, Utils.getIn(rcd[index[lbound]], prop, usingDotNotation))) {\n        return lbound;\n      }\n\n      // if not in index and our value is less than the found one\n      if (Comparators.lt(val, Utils.getIn(rcd[index[lbound]], prop, usingDotNotation), false)) {\n        return adaptive ? lbound : lbound - 1;\n      }\n\n      // not in index and our value is greater than the found one\n      return adaptive ? lbound + 1 : lbound;\n    };\n\n    /**\n     * Internal method used for indexed $between.  Given a prop (index name), and a value\n     * (which may or may not yet exist) this will find the final position of that upper range value.\n     */\n    Collection.prototype.calculateRangeEnd = function (prop, val, usingDotNotation) {\n      var rcd = this.data;\n      var index = this.binaryIndices[prop].values;\n      var min = 0;\n      var max = index.length - 1;\n      var mid = 0;\n\n      if (index.length === 0) {\n        return -1;\n      }\n\n      var minVal = Utils.getIn(rcd[index[min]], prop, usingDotNotation);\n      var maxVal = Utils.getIn(rcd[index[max]], prop, usingDotNotation);\n\n      // hone in on start position of value\n      while (min < max) {\n        mid = (min + max) >> 1;\n\n        if (Comparators.lt(val, Utils.getIn(rcd[index[mid]], prop, usingDotNotation), false)) {\n          max = mid;\n        } else {\n          min = mid + 1;\n        }\n      }\n\n      var ubound = max;\n\n      // only eq if last element in array is our val\n      if (Comparators.aeq(val, Utils.getIn(rcd[index[ubound]], prop, usingDotNotation))) {\n        return ubound;\n      }\n\n      // if not in index and our value is less than the found one\n      if (Comparators.gt(val, Utils.getIn(rcd[index[ubound]], prop, usingDotNotation), false)) {\n        return ubound + 1;\n      }\n\n      // either hole or first nonmatch\n      if (Comparators.aeq(val, Utils.getIn(rcd[index[ubound - 1]], prop, usingDotNotation))) {\n        return ubound - 1;\n      }\n\n      // hole, so ubound if nearest gt than the val we were looking for\n      return ubound;\n    };\n\n    /**\n     * calculateRange() - Binary Search utility method to find range/segment of values matching criteria.\n     *    this is used for collection.find() and first find filter of resultset/dynview\n     *    slightly different than get() binary search in that get() hones in on 1 value,\n     *    but we have to hone in on many (range)\n     * @param {string} op - operation, such as $eq\n     * @param {string} prop - name of property to calculate range for\n     * @param {object} val - value to use for range calculation.\n     * @returns {array} [start, end] index array positions\n     */\n    Collection.prototype.calculateRange = function (op, prop, val) {\n      var rcd = this.data;\n      var index = this.binaryIndices[prop].values;\n      var min = 0;\n      var max = index.length - 1;\n      var mid = 0;\n      var lbound, lval;\n      var ubound, uval;\n\n      // when no documents are in collection, return empty range condition\n      if (rcd.length === 0) {\n        return [0, -1];\n      }\n\n      var usingDotNotation = (prop.indexOf('.') !== -1);\n\n      var minVal = Utils.getIn(rcd[index[min]], prop, usingDotNotation);\n      var maxVal = Utils.getIn(rcd[index[max]], prop, usingDotNotation);\n\n      // if value falls outside of our range return [0, -1] to designate no results\n      switch (op) {\n        case '$eq':\n        case '$aeq':\n          if (Comparators.lt(val, minVal, false) || Comparators.gt(val, maxVal, false)) {\n            return [0, -1];\n          }\n          break;\n        case '$dteq':\n          if (Comparators.lt(val, minVal, false) || Comparators.gt(val, maxVal, false)) {\n            return [0, -1];\n          }\n          break;\n        case '$gt':\n          // none are within range\n          if (Comparators.gt(val, maxVal, true)) {\n            return [0, -1];\n          }\n          // all are within range\n          if (Comparators.gt(minVal, val, false)) {\n            return [min, max];\n          }\n          break;\n        case '$gte':\n          // none are within range\n          if (Comparators.gt(val, maxVal, false)) {\n            return [0, -1];\n          }\n          // all are within range\n          if (Comparators.gt(minVal, val, true)) {\n            return [min, max];\n          }\n          break;\n        case '$lt':\n          // none are within range\n          if (Comparators.lt(val, minVal, true)) {\n            return [0, -1];\n          }\n          // all are within range\n          if (Comparators.lt(maxVal, val, false)) {\n            return [min, max];\n          }\n          break;\n        case '$lte':\n          // none are within range\n          if (Comparators.lt(val, minVal, false)) {\n            return [0, -1];\n          }\n          // all are within range\n          if (Comparators.lt(maxVal, val, true)) {\n            return [min, max];\n          }\n          break;\n        case '$between':\n          // none are within range (low range is greater)\n          if (Comparators.gt(val[0], maxVal, false)) {\n            return [0, -1];\n          }\n          // none are within range (high range lower)\n          if (Comparators.lt(val[1], minVal, false)) {\n            return [0, -1];\n          }\n\n          lbound = this.calculateRangeStart(prop, val[0], false, usingDotNotation);\n          ubound = this.calculateRangeEnd(prop, val[1], usingDotNotation);\n\n          if (lbound < 0) lbound++;\n          if (ubound > max) ubound--;\n\n          if (!Comparators.gt(Utils.getIn(rcd[index[lbound]], prop, usingDotNotation), val[0], true)) lbound++;\n          if (!Comparators.lt(Utils.getIn(rcd[index[ubound]], prop, usingDotNotation), val[1], true)) ubound--;\n\n          if (ubound < lbound) return [0, -1];\n\n          return ([lbound, ubound]);\n        case '$in':\n          var idxset = [],\n            segResult = [];\n          // query each value '$eq' operator and merge the seqment results.\n          for (var j = 0, len = val.length; j < len; j++) {\n            var seg = this.calculateRange('$eq', prop, val[j]);\n\n            for (var i = seg[0]; i <= seg[1]; i++) {\n              if (idxset[i] === undefined) {\n                idxset[i] = true;\n                segResult.push(i);\n              }\n            }\n          }\n          return segResult;\n      }\n\n      // determine lbound where needed\n      switch (op) {\n        case '$eq':\n        case '$aeq':\n        case '$dteq':\n        case '$gte':\n        case '$lt':\n          lbound = this.calculateRangeStart(prop, val, false, usingDotNotation);\n          lval = Utils.getIn(rcd[index[lbound]], prop, usingDotNotation);\n          break;\n        default: break;\n      }\n\n      // determine ubound where needed\n      switch (op) {\n        case '$eq':\n        case '$aeq':\n        case '$dteq':\n        case '$lte':\n        case '$gt':\n          ubound = this.calculateRangeEnd(prop, val, usingDotNotation);\n          uval = Utils.getIn(rcd[index[ubound]], prop, usingDotNotation);\n          break;\n        default: break;\n      }\n\n\n      switch (op) {\n        case '$eq':\n        case '$aeq':\n        case '$dteq':\n          // if hole (not found)\n          if (!Comparators.aeq(lval, val)) {\n            return [0, -1];\n          }\n\n          return [lbound, ubound];\n\n        case '$gt':\n          // if hole (not found) ub position is already greater\n          if (!Comparators.aeq(Utils.getIn(rcd[index[ubound]], prop, usingDotNotation), val)) {\n            return [ubound, max];\n          }\n          // otherwise (found) so ubound is still equal, get next\n          return [ubound + 1, max];\n\n        case '$gte':\n          // if hole (not found) lb position marks left outside of range\n          if (!Comparators.aeq(Utils.getIn(rcd[index[lbound]], prop, usingDotNotation), val)) {\n            return [lbound + 1, max];\n          }\n          // otherwise (found) so lb is first position where its equal\n          return [lbound, max];\n\n        case '$lt':\n          // if hole (not found) position already is less than\n          if (!Comparators.aeq(Utils.getIn(rcd[index[lbound]], prop, usingDotNotation), val)) {\n            return [min, lbound];\n          }\n          // otherwise (found) so lb marks left inside of eq range, get previous\n          return [min, lbound - 1];\n\n        case '$lte':\n          // if hole (not found) ub position marks right outside so get previous\n          if (!Comparators.aeq(Utils.getIn(rcd[index[ubound]], prop, usingDotNotation), val)) {\n            return [min, ubound - 1];\n          }\n          // otherwise (found) so ub is last position where its still equal\n          return [min, ubound];\n\n        default:\n          return [0, rcd.length - 1];\n      }\n    };\n\n    /**\n     * Retrieve doc by Unique index\n     * @param {string} field - name of uniquely indexed property to use when doing lookup\n     * @param {value} value - unique value to search for\n     * @returns {object} document matching the value passed\n     * @memberof Collection\n     */\n    Collection.prototype.by = function (field, value) {\n      var self;\n      if (value === undefined) {\n        self = this;\n        return function (value) {\n          return self.by(field, value);\n        };\n      }\n\n      var result = this.getUniqueIndex(field, true).get(value);\n      if (!this.cloneObjects) {\n        return result;\n      } else {\n        return clone(result, this.cloneMethod);\n      }\n    };\n\n    /**\n     * Find one object by index property, by property equal to value\n     * @param {object} query - query object used to perform search with\n     * @returns {(object|null)} First matching document, or null if none\n     * @memberof Collection\n     */\n    Collection.prototype.findOne = function (query) {\n      query = query || {};\n\n      // Instantiate Resultset and exec find op passing firstOnly = true param\n      var result = this.chain().find(query, true).data();\n\n      if (Array.isArray(result) && result.length === 0) {\n        return null;\n      } else {\n        if (!this.cloneObjects) {\n          return result[0];\n        } else {\n          return clone(result[0], this.cloneMethod);\n        }\n      }\n    };\n\n    /**\n     * Chain method, used for beginning a series of chained find() and/or view() operations\n     * on a collection.\n     *\n     * @param {string|array=} transform - named transform or array of transform steps\n     * @param {object=} parameters - Object containing properties representing parameters to substitute\n     * @returns {Resultset} (this) resultset, or data array if any map or join functions where called\n     * @memberof Collection\n     */\n    Collection.prototype.chain = function (transform, parameters) {\n      var rs = new Resultset(this);\n\n      if (typeof transform === 'undefined') {\n        return rs;\n      }\n\n      return rs.transform(transform, parameters);\n    };\n\n    /**\n     * Find method, api is similar to mongodb.\n     * for more complex queries use [chain()]{@link Collection#chain} or [where()]{@link Collection#where}.\n     * @example {@tutorial Query Examples}\n     * @param {object} query - 'mongo-like' query object\n     * @returns {array} Array of matching documents\n     * @memberof Collection\n     */\n    Collection.prototype.find = function (query) {\n      return this.chain().find(query).data();\n    };\n\n    /**\n     * Find object by unindexed field by property equal to value,\n     * simply iterates and returns the first element matching the query\n     */\n    Collection.prototype.findOneUnindexed = function (prop, value) {\n      var i = this.data.length,\n        doc;\n      while (i--) {\n        if (Utils.getIn(this.data[i], prop, true) === value) {\n          doc = this.data[i];\n          return doc;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Transaction methods\n     */\n\n    /** start the transation */\n    Collection.prototype.startTransaction = function () {\n      \n// (Code skipped for WatermelonDB build)\n\n    };\n\n    /** commit the transation */\n    Collection.prototype.commit = function () {\n      \n// (Code skipped for WatermelonDB build)\n\n    };\n\n    /** roll back the transation */\n    Collection.prototype.rollback = function () {\n      \n// (Code skipped for WatermelonDB build)\n\n    };\n\n    \n// (Code skipped for WatermelonDB build)\n\n    /**\n     * Query the collection by supplying a javascript filter function.\n     * @example\n     * var results = coll.where(function(obj) {\n     *   return obj.legs === 8;\n     * });\n     *\n     * @param {function} fun - filter function to run against all collection docs\n     * @returns {array} all documents which pass your filter function\n     * @memberof Collection\n     */\n    Collection.prototype.where = function (fun) {\n      return this.chain().where(fun).data();\n    };\n    \n// (Code skipped for WatermelonDB build)\n\n    \n// (Code skipped for WatermelonDB build)\n\n    \n// (Code skipped for WatermelonDB build)\n\n    function UniqueIndex(uniqueField) {\n      this.field = uniqueField;\n      this.keyMap = Object.create(null);\n      this.lokiMap = Object.create(null);\n    }\n    UniqueIndex.prototype.keyMap = {};\n    UniqueIndex.prototype.lokiMap = {};\n    UniqueIndex.prototype.set = function (obj) {\n      var fieldValue = obj[this.field];\n      if (fieldValue !== null && typeof (fieldValue) !== 'undefined') {\n        if (this.keyMap[fieldValue]) {\n          throw new Error('Duplicate key for property ' + this.field + ': ' + fieldValue);\n        } else {\n          this.keyMap[fieldValue] = obj;\n          this.lokiMap[obj.$loki] = fieldValue;\n        }\n      }\n    };\n    UniqueIndex.prototype.get = function (key) {\n      return this.keyMap[key];\n    };\n\n    UniqueIndex.prototype.byId = function (id) {\n      return this.keyMap[this.lokiMap[id]];\n    };\n    /**\n     * Updates a document's unique index given an updated object.\n     * @param  {Object} obj Original document object\n     * @param  {Object} doc New document object (likely the same as obj)\n     */\n    UniqueIndex.prototype.update = function (obj, doc) {\n      if (this.lokiMap[obj.$loki] !== doc[this.field]) {\n        var old = this.lokiMap[obj.$loki];\n        this.set(doc);\n        // make the old key fail bool test, while avoiding the use of delete (mem-leak prone)\n        this.keyMap[old] = undefined;\n      } else {\n        this.keyMap[obj[this.field]] = doc;\n      }\n    };\n    UniqueIndex.prototype.remove = function (key) {\n      var obj = this.keyMap[key];\n      if (obj !== null && typeof obj !== 'undefined') {\n        // avoid using `delete`\n        this.keyMap[key] = undefined;\n        this.lokiMap[obj.$loki] = undefined;\n      } else {\n        throw new Error('Key is not in unique index: ' + this.field);\n      }\n    };\n    UniqueIndex.prototype.clear = function () {\n      this.keyMap = Object.create(null);\n      this.lokiMap = Object.create(null);\n    };\n    \n// (Code skipped for WatermelonDB build)\n\n    Loki.deepFreeze = deepFreeze;\n    Loki.freeze = freeze;\n    Loki.unFreeze = unFreeze;\n    Loki.LokiOps = LokiOps;\n    Loki.Collection = Collection;\n    \n// (Code skipped for WatermelonDB build)\n\n    Loki.Resultset = Resultset;\n    \n// (Code skipped for WatermelonDB build)\n\n    Loki.LokiMemoryAdapter = LokiMemoryAdapter;\n    \n// (Code skipped for WatermelonDB build)\n\n    Loki.aeq = aeqHelper;\n    Loki.lt = ltHelper;\n    Loki.gt = gtHelper;\n    Loki.Comparators = Comparators;\n    return Loki;\n  }());\n\n}));\n", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.deleteDatabase = deleteDatabase;\nexports.lokiFatalError = lokiFatalError;\nexports.newLoki = newLoki;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _logger = _interopRequireDefault(require(\"../../../utils/common/logger\"));\n/* eslint-disable no-undef */\n// don't import the whole utils/ here!\nvar isIDBAvailable = function (onQuotaExceededError) {\n  return new Promise(function (resolve) {\n    // $FlowFixMe\n    if ('undefined' === typeof indexedDB) {\n      resolve(false);\n    }\n\n    // in Firefox private mode, IDB will be available, but will fail to open\n    // $FlowFixMe\n    var checkRequest = indexedDB.open('WatermelonIDBChecker');\n    checkRequest.onsuccess = function (e) {\n      var db = e.target.result;\n      db.close();\n      resolve(true);\n    };\n    checkRequest.onerror = function (event) {\n      var _event$target;\n      var error = null === event || void 0 === event ? void 0 : null === (_event$target = event.target) || void 0 === _event$target ? void 0 : _event$target.error;\n      // this is what Firefox in Private Mode returns:\n      // DOMException: \"A mutation operation was attempted on a database that did not allow mutations.\"\n      // code: 11, name: InvalidStateError\n      _logger.default.error('[Loki] IndexedDB checker failed to open. Most likely, user is in Private Mode. It could also be a quota exceeded error. Will fall back to in-memory database.', event, error);\n      if (error && 'QuotaExceededError' === error.name) {\n        _logger.default.log('[Loki] Looks like disk quota was exceeded: ', error);\n        onQuotaExceededError && onQuotaExceededError(error);\n      }\n      resolve(false);\n    };\n    checkRequest.onblocked = function () {\n      _logger.default.error('IndexedDB checker call is blocked');\n    };\n  });\n};\nfunction getLokiAdapter(options) {\n  return new Promise(function ($return, $error) {\n    var useIncrementalIndexedDB, adapter, onQuotaExceededError, dbName, extraIncrementalIDBOptions, IncrementalIDBAdapter, LokiIndexedAdapter, LokiMemoryAdapter;\n    ({\n      useIncrementalIndexedDB: useIncrementalIndexedDB,\n      _testLokiAdapter: adapter,\n      onQuotaExceededError: onQuotaExceededError,\n      dbName: dbName,\n      extraIncrementalIDBOptions = {}\n    } = options);\n    if (adapter) {\n      return $return(adapter);\n    } else {\n      return Promise.resolve(isIDBAvailable(onQuotaExceededError)).then(function ($await_3) {\n        try {\n          if ($await_3) {\n            if (useIncrementalIndexedDB) {\n              IncrementalIDBAdapter = options._betaLoki ? require('lokijs/src/incremental-indexeddb-adapter') : require('lokijs/src/incremental-indexeddb-adapter');\n              // $FlowFixMe\n              return $return(new IncrementalIDBAdapter(extraIncrementalIDBOptions));\n            }\n            LokiIndexedAdapter = require('lokijs/src/loki-indexed-adapter');\n            return $return(new LokiIndexedAdapter(dbName));\n          }\n          return $If_2.call(this);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }\n\n    // if IDB is unavailable (that happens in private mode), fall back to memory adapter\n    // we could also fall back to localstorage adapter, but it will fail in all but the smallest dbs\n    function $If_2() {\n      ({\n        LokiMemoryAdapter: LokiMemoryAdapter\n      } = options._betaLoki ? require('lokijs') : require('lokijs'));\n      return $return(new LokiMemoryAdapter());\n    }\n    return $If_2.call(this);\n  });\n}\nfunction newLoki(options) {\n  return new Promise(function ($return, $error) {\n    var extraLokiOptions, LokiDb, loki;\n    ({\n      extraLokiOptions = {}\n    } = options);\n    LokiDb = options._betaLoki ? require('lokijs') : require('lokijs');\n    return Promise.resolve(getLokiAdapter(options)).then(function ($await_4) {\n      try {\n        loki = new LokiDb(options.dbName, (0, _extends2.default)({\n          adapter: $await_4,\n          autosave: true,\n          autosaveInterval: 500,\n          verbose: true\n        }, extraLokiOptions));\n        return Promise.resolve(new Promise(function (resolve, reject) {\n          loki.loadDatabase({}, function (error) {\n            error ? reject(error) : resolve();\n          });\n        })).then(function ($await_5) {\n          try {\n            return $return(loki);\n          } catch ($boundEx) {\n            return $error($boundEx);\n          }\n        }, $error);\n      } catch ($boundEx) {\n        return $error($boundEx);\n      }\n    }, $error);\n  });\n}\nfunction deleteDatabase(loki) {\n  return new Promise(function ($return, $error) {\n    return Promise.resolve(new Promise(function (resolve, reject) {\n      // Works around a race condition - Loki doesn't disable autosave or drain save queue before\n      // deleting database, so it's possible to delete and then have the database be saved\n      loki.close(function () {\n        loki.deleteDatabase({}, function (response) {\n          // LokiIndexedAdapter responds with `{ success: true }`, while\n          // LokiMemory adapter just calls it with no params\n          if (response && response.success || response === undefined) {\n            resolve();\n          } else {\n            reject(response);\n          }\n        });\n      });\n    })).then(function ($await_6) {\n      try {\n        return $return();\n      } catch ($boundEx) {\n        return $error($boundEx);\n      }\n    }, $error);\n  });\n}\n\n// In case of a fatal error, break Loki so that it cannot save its contents to disk anymore\n// This might result in a loss of data in recent changes, but we assume that whatever caused the\n// fatal error has corrupted the database, so we want to prevent it from being persisted\n// There's no recovery from this, app must be restarted with a fresh LokiJSAdapter.\nfunction lokiFatalError(loki) {\n  try {\n    // below is some very ugly defensive coding, but we're fatal and don't trust anyone anymore\n    var fatalHandler = function fatalHandler() {\n      throw new Error('Illegal attempt to save Loki database after a fatal error');\n    };\n    loki.save = fatalHandler;\n    loki.saveDatabase = fatalHandler;\n    loki.saveDatabaseInternal = fatalHandler;\n    // disable autosave\n    loki.autosave = false;\n    loki.autosaveDisable();\n    // close db\n    loki.close();\n  } catch (error) {\n    _logger.default.error('Failed to perform loki fatal error');\n    _logger.default.error(error);\n  }\n}", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = encodeQuery;\nvar _invariant = _interopRequireDefault(require(\"../../../../utils/common/invariant\"));\nvar _likeToRegexp = _interopRequireDefault(require(\"../../../../utils/fp/likeToRegexp\"));\n/* eslint-disable no-use-before-define */\n// don't import whole `utils` to keep worker size small\nvar weakNotNull = {\n  $not: {\n    $aeq: null\n  }\n};\nvar encodeComparison = function (comparison, value) {\n  // TODO: It's probably possible to improve performance of those operators by making them\n  // binary-search compatible (i.e. don't use $and, $not)\n  // TODO: We might be able to use $jgt, $jbetween, etc. — but ensure the semantics are right\n  // and it won't break indexing\n\n  var {\n    operator: operator\n  } = comparison;\n  if (comparison.right.column) {\n    // Encode for column comparisons\n    switch (operator) {\n      case 'eq':\n        return {\n          $$aeq: value\n        };\n      case 'notEq':\n        return {\n          $not: {\n            $$aeq: value\n          }\n        };\n      case 'gt':\n        return {\n          $$gt: value\n        };\n      case 'gte':\n        return {\n          $$gte: value\n        };\n      case 'weakGt':\n        return {\n          $$gt: value\n        };\n      case 'lt':\n        return {\n          $and: [{\n            $$lt: value\n          }, weakNotNull]\n        };\n      case 'lte':\n        return {\n          $and: [{\n            $$lte: value\n          }, weakNotNull]\n        };\n      default:\n        throw new Error(\"Illegal operator \".concat(operator, \" for column comparisons\"));\n    }\n  } else {\n    switch (operator) {\n      case 'eq':\n        return {\n          $aeq: value\n        };\n      case 'notEq':\n        return {\n          $not: {\n            $aeq: value\n          }\n        };\n      case 'gt':\n        return {\n          $gt: value\n        };\n      case 'gte':\n        return {\n          $gte: value\n        };\n      case 'weakGt':\n        return {\n          $gt: value\n        };\n      // Note: yup, this is correct (for non-column comparisons)\n      case 'lt':\n        return {\n          $and: [{\n            $lt: value\n          }, weakNotNull]\n        };\n      case 'lte':\n        return {\n          $and: [{\n            $lte: value\n          }, weakNotNull]\n        };\n      case 'oneOf':\n        return {\n          $in: value\n        };\n      case 'notIn':\n        return {\n          $and: [{\n            $nin: value\n          }, weakNotNull]\n        };\n      case 'between':\n        return {\n          $between: value\n        };\n      case 'like':\n        return {\n          $regex: (0, _likeToRegexp.default)(value)\n        };\n      case 'notLike':\n        return {\n          $and: [{\n            $not: {\n              $eq: null\n            }\n          }, {\n            $not: {\n              $regex: (0, _likeToRegexp.default)(value)\n            }\n          }]\n        };\n      case 'includes':\n        return {\n          $containsString: value\n        };\n      default:\n        throw new Error(\"Unknown operator \".concat(operator));\n    }\n  }\n};\nvar columnCompRequiresColumnNotNull = {\n  gt: true,\n  gte: true,\n  lt: true,\n  lte: true\n};\nvar encodeWhereDescription = function ({\n  left: left,\n  comparison: comparison\n}) {\n  var _ref5;\n  var {\n    operator: operator,\n    right: right\n  } = comparison;\n  var col = left;\n  // $FlowFixMe - NOTE: order of ||s is important here, since .value can be falsy, but .column and .values are either truthy or are undefined\n  var comparisonRight = right.column || right.values || right.value;\n  if ('string' === typeof right.value) {\n    // we can do fast path as we know that eq and aeq do the same thing for strings\n    if ('eq' === operator) {\n      var _ref;\n      return _ref = {}, _ref[col] = {\n        $eq: comparisonRight\n      }, _ref;\n    } else if ('notEq' === operator) {\n      var _ref2;\n      return _ref2 = {}, _ref2[col] = {\n        $ne: comparisonRight\n      }, _ref2;\n    }\n  }\n  var colName = right.column;\n  var encodedComparison = encodeComparison(comparison, comparisonRight);\n  if (colName && columnCompRequiresColumnNotNull[operator]) {\n    var _ref3, _ref4;\n    return {\n      $and: [(_ref3 = {}, _ref3[col] = encodedComparison, _ref3), (_ref4 = {}, _ref4[colName] = weakNotNull, _ref4)]\n    };\n  }\n  return _ref5 = {}, _ref5[col] = encodedComparison, _ref5;\n};\nvar encodeCondition = function (associations) {\n  return function (clause) {\n    switch (clause.type) {\n      case 'and':\n        return encodeAnd(associations, clause);\n      case 'or':\n        return encodeOr(associations, clause);\n      case 'where':\n        return encodeWhereDescription(clause);\n      case 'on':\n        return encodeJoin(associations, clause);\n      case 'loki':\n        return clause.expr;\n      default:\n        throw new Error(\"Unknown clause \".concat(clause.type));\n    }\n  };\n};\nvar encodeConditions = function (associations, conditions) {\n  return conditions.map(encodeCondition(associations));\n};\nvar encodeAndOr = function (op) {\n  return function (associations, clause) {\n    var _ref6;\n    var conditions = encodeConditions(associations, clause.conditions);\n    // flatten\n    return 1 === conditions.length ? conditions[0] : (_ref6 = {}, _ref6[op] = conditions, _ref6);\n  };\n};\nvar encodeAnd = encodeAndOr('$and');\nvar encodeOr = encodeAndOr('$or');\n\n// Note: empty query returns `undefined` because\n// Loki's Collection.count() works but count({}) doesn't\nvar concatRawQueries = function (queries) {\n  switch (queries.length) {\n    case 0:\n      return undefined;\n    case 1:\n      return queries[0];\n    default:\n      return {\n        $and: queries\n      };\n  }\n};\nvar encodeRootConditions = function (associations, conditions) {\n  return concatRawQueries(encodeConditions(associations, conditions));\n};\nvar encodeJoin = function (associations, on) {\n  var {\n    table: table,\n    conditions: conditions\n  } = on;\n  var association = associations.find(function ({\n    to: to\n  }) {\n    return table === to;\n  });\n  (0, _invariant.default)(association, 'To nest Q.on inside Q.and/Q.or you must explicitly declare Q.experimentalJoinTables at the beginning of the query');\n  var {\n    info: info\n  } = association;\n  return {\n    $join: {\n      table: table,\n      query: encodeRootConditions(associations, conditions),\n      mapKey: 'belongs_to' === info.type ? 'id' : info.foreignKey,\n      joinKey: 'belongs_to' === info.type ? info.key : 'id'\n    }\n  };\n};\nfunction encodeQuery(query) {\n  var {\n    table: table,\n    description: {\n      where: where,\n      joinTables: joinTables,\n      sql: sql\n    },\n    associations: associations\n  } = query;\n  (0, _invariant.default)(!sql, '[Loki] Q.unsafeSqlQuery are not supported with LokiJSAdapter');\n  return {\n    table: table,\n    query: encodeRootConditions(associations, where),\n    hasJoins: !!joinTables.length\n  };\n}", "\"use strict\";\n\nexports.__esModule = true;\nexports.default = performJoins;\nfunction performJoinsImpl(query, performer) {\n  if (!query) {\n    return query;\n  } else if (query.$join) {\n    var _ref;\n    var _join = query.$join;\n    var joinQuery = performJoinsImpl(_join.query, performer);\n    _join.query = joinQuery;\n    var records = performer(_join);\n\n    // for queries on `belongs_to` tables, matchingIds will be IDs of the parent table records\n    //   (e.g. task: { project_id in ids })\n    // and for `has_many` tables, it will be IDs of the main table records\n    //   (e.g. task: { id in (ids from tag_assignment.task_id) })\n    var matchingIds = records.map(function (record) {\n      return record[_join.mapKey];\n    });\n    return _ref = {}, _ref[_join.joinKey] = {\n      $in: matchingIds\n    }, _ref;\n  } else if (query.$and) {\n    return {\n      $and: query.$and.map(function (clause) {\n        return performJoinsImpl(clause, performer);\n      })\n    };\n  } else if (query.$or) {\n    return {\n      $or: query.$or.map(function (clause) {\n        return performJoinsImpl(clause, performer);\n      })\n    };\n  }\n  return query;\n}\nfunction performJoins(lokiQuery, performer) {\n  var {\n    query: query,\n    hasJoins: hasJoins\n  } = lokiQuery;\n  if (!hasJoins) {\n    return query;\n  }\n  return performJoinsImpl(query, performer);\n}", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.executeCount = executeCount;\nexports.executeQuery = executeQuery;\nvar _encodeQuery = _interopRequireDefault(require(\"./encodeQuery\"));\nvar _performJoins = _interopRequireDefault(require(\"./performJoins\"));\n// Finds IDs of matching records on foreign table\nfunction performJoin(join, loki) {\n  var {\n    table: table,\n    query: query\n  } = join;\n  var collection = loki.getCollection(table).chain();\n  var records = collection.find(query).data();\n  return records;\n}\nfunction performQuery(query, loki) {\n  // Step one: perform all inner queries (JOINs) to get the single table query\n  var lokiQuery = (0, _encodeQuery.default)(query);\n  var mainQuery = (0, _performJoins.default)(lokiQuery, function (join) {\n    return performJoin(join, loki);\n  });\n\n  // Step two: fetch all records matching query\n  var collection = loki.getCollection(query.table).chain();\n  var resultset = collection.find(mainQuery);\n\n  // Step three: sort, skip, take\n  var {\n    sortBy: sortBy,\n    take: take,\n    skip: skip\n  } = query.description;\n  if (sortBy.length) {\n    resultset = resultset.compoundsort(sortBy.map(function ({\n      sortColumn: sortColumn,\n      sortOrder: sortOrder\n    }) {\n      return [sortColumn, 'desc' === sortOrder];\n    }));\n  }\n  if (skip) {\n    resultset = resultset.offset(skip);\n  }\n  if (take) {\n    resultset = resultset.limit(take);\n  }\n  return resultset;\n}\nfunction executeQuery(query, loki) {\n  var {\n    lokiTransform: lokiTransform\n  } = query.description;\n  var results = performQuery(query, loki).data();\n  if (lokiTransform) {\n    return lokiTransform(results, loki);\n  }\n  return results;\n}\nfunction executeCount(query, loki) {\n  var {\n    lokiTransform: lokiTransform\n  } = query.description;\n  var resultset = performQuery(query, loki);\n  if (lokiTransform) {\n    var records = lokiTransform(resultset.data(), loki);\n    return records.length;\n  }\n  return resultset.count();\n}", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nexports.setExperimentalAllowsFatalError = setExperimentalAllowsFatalError;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _logger = _interopRequireDefault(require(\"../../../utils/common/logger\"));\nvar _invariant = _interopRequireDefault(require(\"../../../utils/common/invariant\"));\nvar _RawRecord = require(\"../../../RawRecord\");\nvar _lokiExtensions = require(\"./lokiExtensions\");\nvar _executeQuery = require(\"./executeQuery\");\n// don't import the whole utils/ here!\nvar SCHEMA_VERSION_KEY = '_loki_schema_version';\nvar experimentalAllowsFatalError = false;\nfunction setExperimentalAllowsFatalError() {\n  experimentalAllowsFatalError = true;\n}\nvar DatabaseDriver = exports.default = /*#__PURE__*/function () {\n  // (experimental) if true, DatabaseDriver is in a broken state and should not be used anymore\n\n  function DatabaseDriver(options) {\n    this.cachedRecords = new Map();\n    this._isBroken = false;\n    var {\n      schema: schema,\n      migrations: migrations\n    } = options;\n    this.options = options;\n    this.schema = schema;\n    this.migrations = migrations;\n  }\n  var _proto = DatabaseDriver.prototype;\n  _proto.setUp = function () {\n    return new Promise(function ($return, $error) {\n      return Promise.resolve(this._openDatabase()).then(function () {\n        try {\n          return Promise.resolve(this._migrateIfNeeded()).then(function () {\n            try {\n              return $return();\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }, $error);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  };\n  _proto.isCached = function (table, id) {\n    var cachedSet = this.cachedRecords.get(table);\n    return cachedSet ? cachedSet.has(id) : false;\n  };\n  _proto.markAsCached = function (table, id) {\n    var cachedSet = this.cachedRecords.get(table);\n    if (cachedSet) {\n      cachedSet.add(id);\n    } else {\n      this.cachedRecords.set(table, new Set([id]));\n    }\n  };\n  _proto.removeFromCache = function (table, id) {\n    var cachedSet = this.cachedRecords.get(table);\n    if (cachedSet) {\n      cachedSet.delete(id);\n    }\n  };\n  _proto.clearCachedRecords = function () {\n    this.cachedRecords = new Map();\n  };\n  _proto.getCache = function (table) {\n    var cache = this.cachedRecords.get(table);\n    if (cache) {\n      return cache;\n    }\n    var newCache = new Set([]);\n    this.cachedRecords.set(table, newCache);\n    return newCache;\n  };\n  _proto.find = function (table, id) {\n    if (this.isCached(table, id)) {\n      return id;\n    }\n    var raw = this.loki.getCollection(table).by('id', id);\n    if (!raw) {\n      return null;\n    }\n    this.markAsCached(table, id);\n    return (0, _RawRecord.sanitizedRaw)(raw, this.schema.tables[table]);\n  };\n  _proto.query = function (_query) {\n    var records = (0, _executeQuery.executeQuery)(_query, this.loki);\n    return this._compactQueryResults(records, _query.table);\n  };\n  _proto.queryIds = function (query) {\n    return (0, _executeQuery.executeQuery)(query, this.loki).map(function (record) {\n      return record.id;\n    });\n  };\n  _proto.unsafeQueryRaw = function (query) {\n    return (0, _executeQuery.executeQuery)(query, this.loki);\n  };\n  _proto.count = function (query) {\n    return (0, _executeQuery.executeCount)(query, this.loki);\n  };\n  _proto.batch = function (operations) {\n    var _this = this;\n    // NOTE: Mutations to LokiJS db are *not* transactional!\n    // This is terrible and lame for a database, but there's just no simple and good solution to this\n    // Loki transactions rely on making a full copy of the data, and reverting to it if something breaks.\n    // This is just unbearable for production-sized databases (too much memory required)\n    // It could be done with some sort of advanced journaling/CoW structure scheme, but that would\n    // be very complicated (in itself a source of bugs), and possibly quite expensive cpu-wise\n    //\n    // So instead, we assume that writes MUST succeed. If they don't, we put DatabaseDriver in a \"broken\"\n    // state, refuse to persist or further mutate the DB, and notify the app (and user) about it.\n    //\n    // It can be assumed that Loki-level mutations that fail are WatermelonDB bugs that must be fixed\n    this._assertNotBroken();\n    try {\n      var recordsToCreate = {};\n      operations.forEach(function (operation) {\n        var [type, table, raw] = operation;\n        switch (type) {\n          case 'create':\n            if (!recordsToCreate[table]) {\n              recordsToCreate[table] = [];\n            }\n            recordsToCreate[table].push(raw);\n            break;\n          default:\n            break;\n        }\n      });\n\n      // We're doing a second pass, because batch insert is much faster in Loki\n      Object.entries(recordsToCreate).forEach(function (args) {\n        var [table, raws] = args;\n        var shouldRebuildIndexAfterInsert = 1000 <= raws.length; // only profitable for large inserts\n        _this.loki.getCollection(table).insert(raws, shouldRebuildIndexAfterInsert);\n        var cache = _this.getCache(table);\n        raws.forEach(function (raw) {\n          cache.add(raw.id);\n        });\n      });\n      operations.forEach(function (operation) {\n        var [type, table, rawOrId] = operation;\n        var collection = _this.loki.getCollection(table);\n        switch (type) {\n          case 'update':\n            // Loki identifies records using internal $loki ID so we must find the saved record first\n            var lokiId = collection.by('id', rawOrId.id).$loki;\n            var raw = rawOrId;\n            raw.$loki = lokiId;\n            collection.update(raw);\n            break;\n          case 'markAsDeleted':\n            var id = rawOrId;\n            var record = collection.by('id', id);\n            if (record) {\n              record._status = 'deleted';\n              collection.update(record);\n              _this.removeFromCache(table, id);\n            }\n            break;\n          case 'destroyPermanently':\n            var _id = rawOrId;\n            var _record = collection.by('id', _id);\n            _record && collection.remove(_record);\n            _this.removeFromCache(table, _id);\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (error) {\n      this._fatalError(error);\n    }\n  };\n  _proto.getDeletedRecords = function (table) {\n    return this.loki.getCollection(table).find({\n      _status: {\n        $eq: 'deleted'\n      }\n    }).map(function (record) {\n      return record.id;\n    });\n  };\n  _proto.unsafeExecute = function (operations) {\n    if ('production' !== process.env.NODE_ENV) {\n      (0, _invariant.default)(operations && 'object' === typeof operations && 1 === Object.keys(operations).length && 'function' === typeof operations.loki, 'unsafeExecute expects an { loki: loki => { ... } } object');\n    }\n    var lokiBlock = operations.loki;\n    lokiBlock(this.loki);\n  };\n  _proto.unsafeResetDatabase = function () {\n    return new Promise(function ($return, $error) {\n      return Promise.resolve((0, _lokiExtensions.deleteDatabase)(this.loki)).then(function () {\n        try {\n          this.cachedRecords.clear();\n          _logger.default.log('[Loki] Database is now reset');\n          return Promise.resolve(this._openDatabase()).then(function () {\n            try {\n              this._setUpSchema();\n              return $return();\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }.bind(this), $error);\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  }\n\n  // *** LocalStorage ***\n  ;\n  _proto.getLocal = function (key) {\n    var record = this._findLocal(key);\n    return record ? record.value : null;\n  };\n  _proto.setLocal = function (key, value) {\n    this._assertNotBroken();\n    try {\n      var record = this._findLocal(key);\n      if (record) {\n        record.value = value;\n        this._localStorage.update(record);\n      } else {\n        this._localStorage.insert({\n          key: key,\n          value: value\n        });\n      }\n    } catch (error) {\n      this._fatalError(error);\n    }\n  };\n  _proto.removeLocal = function (key) {\n    this._assertNotBroken();\n    try {\n      var record = this._findLocal(key);\n      if (record) {\n        this._localStorage.remove(record);\n      }\n    } catch (error) {\n      this._fatalError(error);\n    }\n  }\n\n  // *** Internals ***\n  ;\n  _proto._openDatabase = function () {\n    return new Promise(function ($return, $error) {\n      _logger.default.log('[Loki] Initializing IndexedDB');\n      return Promise.resolve((0, _lokiExtensions.newLoki)(this.options)).then(function ($await_13) {\n        try {\n          this.loki = $await_13;\n          _logger.default.log('[Loki] Database loaded');\n          return $return();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this), $error);\n    }.bind(this));\n  };\n  _proto._setUpSchema = function () {\n    var _this2 = this;\n    _logger.default.log('[Loki] Setting up schema');\n\n    // Add collections\n    var tables = Object.values(this.schema.tables);\n    tables.forEach(function (tableSchema) {\n      _this2._addCollection(tableSchema);\n    });\n    this.loki.addCollection('local_storage', {\n      unique: ['key'],\n      indices: [],\n      disableMeta: true\n    });\n\n    // Set database version\n    this._databaseVersion = this.schema.version;\n    _logger.default.log('[Loki] Database collections set up');\n  };\n  _proto._addCollection = function (tableSchema) {\n    var {\n      name: name,\n      columnArray: columnArray\n    } = tableSchema;\n    var indexedColumns = columnArray.reduce(function (indexes, column) {\n      return column.isIndexed ? indexes.concat([column.name]) : indexes;\n    }, []);\n    this.loki.addCollection(name, {\n      unique: ['id'],\n      indices: ['_status'].concat((0, _toConsumableArray2.default)(indexedColumns)),\n      disableMeta: true\n    });\n  };\n  _proto._migrateIfNeeded = function () {\n    return new Promise(function ($return, $error) {\n      var dbVersion, schemaVersion, migrationSteps;\n      dbVersion = this._databaseVersion;\n      schemaVersion = this.schema.version;\n      if (dbVersion === schemaVersion) {\n        return $If_5.call(this);\n      } // All good!\n      else {\n        if (0 === dbVersion) {\n          _logger.default.log('[Loki] Empty database, setting up');\n          return Promise.resolve(this.unsafeResetDatabase()).then(function () {\n            try {\n              return $If_6.call(this);\n            } catch ($boundEx) {\n              return $error($boundEx);\n            }\n          }.bind(this), $error);\n        } else {\n          if (0 < dbVersion && dbVersion < schemaVersion) {\n            _logger.default.log('[Loki] Database has old schema version. Migration is required.');\n            migrationSteps = this._getMigrationSteps(dbVersion);\n            if (migrationSteps) {\n              _logger.default.log(\"[Loki] Migrating from version \".concat(dbVersion, \" to \").concat(this.schema.version, \"...\"));\n              var $Try_4_Post = function () {\n                try {\n                  return $If_8.call(this);\n                } catch ($boundEx) {\n                  return $error($boundEx);\n                }\n              }.bind(this);\n              var $Try_4_Catch = function $Try_4_Catch(error) {\n                try {\n                  _logger.default.error('[Loki] Migration failed', error);\n                  throw error;\n                } catch ($boundEx) {\n                  return $error($boundEx);\n                }\n              };\n              try {\n                return Promise.resolve(this._migrate(migrationSteps)).then(function () {\n                  try {\n                    return $Try_4_Post();\n                  } catch ($boundEx) {\n                    return $Try_4_Catch($boundEx);\n                  }\n                }, $Try_4_Catch);\n              } catch (error) {\n                $Try_4_Catch(error)\n              }\n            } else {\n              _logger.default.warn('[Loki] Migrations not available for this version range, resetting database instead');\n              return Promise.resolve(this.unsafeResetDatabase()).then(function () {\n                try {\n                  return $If_8.call(this);\n                } catch ($boundEx) {\n                  return $error($boundEx);\n                }\n              }.bind(this), $error);\n            }\n            function $If_8() {\n              return $If_7.call(this);\n            }\n          } else {\n            _logger.default.warn(\"[Loki] Database has newer version \".concat(dbVersion, \" than app schema \").concat(schemaVersion, \". Resetting database.\"));\n            return Promise.resolve(this.unsafeResetDatabase()).then(function () {\n              try {\n                return $If_7.call(this);\n              } catch ($boundEx) {\n                return $error($boundEx);\n              }\n            }.bind(this), $error);\n          }\n          function $If_7() {\n            return $If_6.call(this);\n          }\n        }\n        function $If_6() {\n          return $If_5.call(this);\n        }\n      }\n      function $If_5() {\n        return $return();\n      }\n    }.bind(this));\n  };\n  _proto._getMigrationSteps = function (fromVersion) {\n    // TODO: Remove this after migrations are shipped\n    var {\n      migrations: migrations\n    } = this;\n    if (!migrations) {\n      return null;\n    }\n    var {\n      stepsForMigration: stepsForMigration\n    } = require('../../../Schema/migrations/stepsForMigration');\n    return stepsForMigration({\n      migrations: migrations,\n      fromVersion: fromVersion,\n      toVersion: this.schema.version\n    });\n  };\n  _proto._migrate = function (steps) {\n    return new Promise(function ($return) {\n      var _this3 = this;\n      steps.forEach(function (step) {\n        if ('create_table' === step.type) {\n          _this3._executeCreateTableMigration(step);\n        } else if ('add_columns' === step.type) {\n          _this3._executeAddColumnsMigration(step);\n        } else if (!('sql' === step.type)) {\n          throw new Error(\"Unsupported migration step \".concat(step.type));\n        } // ignore\n      });\n\n      // Set database version\n      this._databaseVersion = this.schema.version;\n      _logger.default.log(\"[Loki] Migration successful\");\n      return $return();\n    }.bind(this));\n  };\n  _proto._executeCreateTableMigration = function ({\n    schema: schema\n  }) {\n    this._addCollection(schema);\n  };\n  _proto._executeAddColumnsMigration = function ({\n    table: table,\n    columns: columns\n  }) {\n    var collection = this.loki.getCollection(table);\n\n    // update ALL records in the collection, adding new fields\n    collection.findAndUpdate({}, function (record) {\n      columns.forEach(function (column) {\n        (0, _RawRecord.setRawSanitized)(record, column.name, null, column);\n      });\n    });\n\n    // add indexes, if needed\n    columns.forEach(function (column) {\n      if (column.isIndexed) {\n        collection.ensureIndex(column.name);\n      }\n    });\n  }\n\n  // Maps records to their IDs if the record is already cached on JS side\n  ;\n  _proto._compactQueryResults = function (records, table) {\n    var _this4 = this;\n    var cache = this.getCache(table);\n    return records.map(function (raw) {\n      var {\n        id: id\n      } = raw;\n      if (cache.has(id)) {\n        return id;\n      }\n      cache.add(id);\n      return (0, _RawRecord.sanitizedRaw)(raw, _this4.schema.tables[table]);\n    });\n  };\n  _proto._findLocal = function (key) {\n    var localStorage = this._localStorage;\n    return localStorage && localStorage.by('key', key);\n  };\n  _proto._assertNotBroken = function () {\n    if (this._isBroken) {\n      throw new Error('DatabaseDriver is in a broken state, bailing...');\n    }\n  }\n\n  // (experimental)\n  // TODO: Setup, migrations, delete database should also break driver\n  ;\n  _proto._fatalError = function (error) {\n    if (!experimentalAllowsFatalError) {\n      _logger.default.warn('DatabaseDriver is broken, but experimentalAllowsFatalError has not been enabled to do anything about it...');\n      throw error;\n    }\n    // Stop further mutations\n    this._isBroken = true;\n\n    // Disable Loki autosave\n    (0, _lokiExtensions.lokiFatalError)(this.loki);\n\n    // Notify handler\n    _logger.default.error('DatabaseDriver is broken. App must be reloaded before continuing.');\n    var handler = this.options._onFatalError;\n    handler && handler(error);\n\n    // Rethrow error\n    throw error;\n  };\n  return (0, _createClass2.default)(DatabaseDriver, [{\n    key: \"_databaseVersion\",\n    get: function get() {\n      var databaseVersionRaw = this.getLocal(SCHEMA_VERSION_KEY) || '';\n      return parseInt(databaseVersionRaw, 10) || 0;\n    },\n    set: function set(version) {\n      this.setLocal(SCHEMA_VERSION_KEY, \"\".concat(version));\n    }\n  }, {\n    key: \"_localStorage\",\n    get: function get() {\n      return this.loki.getCollection('local_storage');\n    }\n  }]);\n}();", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _logError = _interopRequireDefault(require(\"../../../utils/common/logError\"));\nvar _invariant = _interopRequireDefault(require(\"../../../utils/common/invariant\"));\nvar _DatabaseDriver = _interopRequireDefault(require(\"./DatabaseDriver\"));\n// don't import whole `utils` to keep worker size small\nvar DatabaseBridge = exports.default = /*#__PURE__*/function () {\n  function DatabaseBridge(workerContext) {\n    var _this = this;\n    this.queue = [];\n    this._actionsExecuting = 0;\n    this.workerContext = workerContext;\n    this.workerContext.onmessage = function (e) {\n      var action = e.data;\n      // enqueue action\n      _this.queue.push(action);\n      if (1 === _this.queue.length) {\n        _this.executeNext();\n      }\n    };\n  }\n  var _proto = DatabaseBridge.prototype;\n  _proto.executeNext = function () {\n    var action = this.queue[0];\n    try {\n      (0, _invariant.default)(0 === this._actionsExecuting, 'worker should not have ongoing actions'); // sanity check\n      this._actionsExecuting += 1;\n      var {\n        type: type,\n        payload: payload\n      } = action;\n      if ('setUp' === type || 'unsafeResetDatabase' === type) {\n        this.processActionAsync(action);\n      } else {\n        var response = this._driverAction(type).apply(void 0, (0, _toConsumableArray2.default)(payload));\n        this.onActionDone(action, {\n          value: response\n        });\n      }\n    } catch (error) {\n      this._onError(action, error);\n    }\n  };\n  _proto.processActionAsync = function (action) {\n    return new Promise(function ($return, $error) {\n      var type, payload, options, driver, response;\n      var $Try_2_Post = function $Try_2_Post() {\n        try {\n          return $return();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      };\n      var $Try_2_Catch = function (error) {\n        try {\n          this._onError(action, error);\n          return $Try_2_Post();\n        } catch ($boundEx) {\n          return $error($boundEx);\n        }\n      }.bind(this);\n      try {\n        ({\n          type: type,\n          payload: payload\n        } = action);\n        if ('setUp' === type) {\n          // app just launched, set up driver with options sent\n          (0, _invariant.default)(!this.driver, \"Loki driver already set up - cannot set up again\");\n          [options] = payload;\n          driver = new _DatabaseDriver.default(options);\n          return Promise.resolve(driver.setUp()).then(function () {\n            try {\n              this.driver = driver;\n              this.onActionDone(action, {\n                value: null\n              });\n              return $If_4.call(this);\n            } catch ($boundEx) {\n              return $Try_2_Catch($boundEx);\n            }\n          }.bind(this), $Try_2_Catch);\n        } else {\n          return Promise.resolve(this._driverAction(type).apply(void 0, (0, _toConsumableArray2.default)(payload))).then(function ($await_6) {\n            try {\n              response = $await_6;\n              this.onActionDone(action, {\n                value: response\n              });\n              return $If_4.call(this);\n            } catch ($boundEx) {\n              return $Try_2_Catch($boundEx);\n            }\n          }.bind(this), $Try_2_Catch);\n        }\n        function $If_4() {\n          return $Try_2_Post();\n        }\n      } catch (error) {\n        $Try_2_Catch(error)\n      }\n    }.bind(this));\n  };\n  _proto.onActionDone = function (action, result) {\n    (0, _invariant.default)(1 === this._actionsExecuting, 'worker should be executing 1 action'); // sanity check\n    this._actionsExecuting = 0;\n    this.queue.shift();\n    try {\n      var response = {\n        id: action.id,\n        result: result,\n        cloneMethod: action.returnCloneMethod\n      };\n      this.workerContext.postMessage(response);\n    } catch (error) {\n      (0, _logError.default)(error);\n    }\n    if (this.queue.length) {\n      this.executeNext();\n    }\n  };\n  _proto._driverAction = function (type) {\n    (0, _invariant.default)(this.driver, \"Cannot run actions because driver is not set up\");\n    var action = this.driver[type].bind(this.driver);\n    (0, _invariant.default)(action, \"Unknown worker action \".concat(type));\n    return action;\n  };\n  _proto._onError = function (action, error) {\n    // Main process only receives error message (when using web workers) — this logError is to retain call stack\n    (0, _logError.default)(error);\n    this.onActionDone(action, {\n      error: error\n    });\n  };\n  return DatabaseBridge;\n}();", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _DatabaseBridge = _interopRequireDefault(require(\"./DatabaseBridge\"));\n/* eslint-disable no-restricted-globals */\nvar getDefaultExport = function () {\n  self.workerClass = new _DatabaseBridge.default(self);\n  return self;\n};\nvar _default = exports.default = getDefaultExport();", "\"use strict\";\n\nexports.__esModule = true;\nexports.default = cloneMessage;\nexports.shallowCloneDeepObjects = shallowCloneDeepObjects;\n// shallow-clones objects (without checking their contents), but copies arrays\nfunction shallowCloneDeepObjects(value) {\n  if (Array.isArray(value)) {\n    var returned = new Array(value.length);\n    for (var i = 0, len = value.length; i < len; i += 1) {\n      returned[i] = shallowCloneDeepObjects(value[i]);\n    }\n    return returned;\n  } else if (value && 'object' === typeof value) {\n    return Object.assign({}, value);\n  }\n  return value;\n}\nfunction cloneMessage(data) {\n  // TODO: Even better, it would be great if we had zero-copy architecture (COW RawRecords?) and we didn't have to clone\n  var method = data.cloneMethod;\n  if ('shallowCloneDeepObjects' === method) {\n    var clonedData = data;\n    clonedData.payload = shallowCloneDeepObjects(clonedData.payload);\n    return clonedData;\n  } else if ('immutable' === method) {\n    // we get a pinky promise that the payload is immutable so we don't need to copy\n    return data;\n  }\n  throw new Error('Unknown data.clone method for cloneMessage');\n}", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _DatabaseBridge = _interopRequireDefault(require(\"./DatabaseBridge\"));\nvar _cloneMessage = _interopRequireDefault(require(\"./cloneMessage\"));\n// Simulates the web worker API\nvar SynchronousWorker = exports.default = /*#__PURE__*/function () {\n  function SynchronousWorker() {\n    var _this = this;\n    this.onmessage = function () {};\n    // $FlowFixMe\n    this._workerContext = {\n      postMessage: function postMessage(data) {\n        _this.onmessage({\n          data: (0, _cloneMessage.default)(data)\n        });\n      },\n      onmessage: function onmessage() {}\n    };\n    // $FlowFixMe\n    this._bridge = new _DatabaseBridge.default(this._workerContext);\n  }\n  var _proto = SynchronousWorker.prototype;\n  _proto.postMessage = function (data) {\n    this._workerContext.onmessage({\n      data: (0, _cloneMessage.default)(data)\n    });\n  };\n  return SynchronousWorker;\n}();", "\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nfunction createWorker(useWebWorker) {\n  if (useWebWorker) {\n    var LokiWebWorker = require('./worker/loki.worker');\n    return new LokiWebWorker();\n  }\n  var LokiSynchronousWorker = require('./worker/synchronousWorker').default;\n  return new LokiSynchronousWorker();\n}\nvar _actionId = 0;\nfunction nextActionId() {\n  _actionId += 1;\n  return _actionId;\n}\nvar LokiDispatcher = exports.default = /*#__PURE__*/function () {\n  function LokiDispatcher(useWebWorker) {\n    var _this = this;\n    this._pendingCalls = [];\n    this._worker = createWorker(useWebWorker);\n    this._worker.onmessage = function ({\n      data: data\n    }) {\n      var {\n        result: result,\n        id: responseId\n      } = data;\n      var {\n        callback: callback,\n        id: id\n      } = _this._pendingCalls.shift();\n\n      // sanity check\n      if (id !== responseId) {\n        callback({\n          error: new Error('Loki worker responses are out of order')\n        });\n        return;\n      }\n      callback(result);\n    };\n  }\n\n  // TODO: `any` return should be `WorkerResponsePayload`\n  var _proto = LokiDispatcher.prototype;\n  _proto.call = function (type, payload = [], callback = function () {},\n  // NOTE: This are used when not using web workers (otherwise, the data naturally is just copied)\n  cloneMethod = 'immutable', returnCloneMethod = 'immutable') {\n    var id = nextActionId();\n    this._pendingCalls.push({\n      callback: callback,\n      id: id\n    });\n    this._worker.postMessage({\n      id: id,\n      type: type,\n      payload: payload,\n      cloneMethod: cloneMethod,\n      returnCloneMethod: returnCloneMethod\n    });\n  };\n  return LokiDispatcher;\n}();", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _invariant = _interopRequireDefault(require(\"../../utils/common/invariant\"));\nvar _logger = _interopRequireDefault(require(\"../../utils/common/logger\"));\nvar _common = require(\"../common\");\nvar _dispatcher = _interopRequireDefault(require(\"./dispatcher\"));\n// don't import the whole utils/ here!\nvar LokiJSAdapter = exports.default = /*#__PURE__*/function () {\n  function LokiJSAdapter(options) {\n    var _options$useWebWorker;\n    this._options = options;\n    this.dbName = options.dbName || 'loki';\n    var {\n      schema: schema,\n      migrations: migrations\n    } = options;\n    var useWebWorker = null !== (_options$useWebWorker = options.useWebWorker) && void 0 !== _options$useWebWorker ? _options$useWebWorker : 'test' !== process.env.NODE_ENV;\n    this._dispatcher = new _dispatcher.default(useWebWorker);\n    this.schema = schema;\n    this.migrations = migrations;\n    if ('production' !== process.env.NODE_ENV) {\n      (0, _invariant.default)('useWebWorker' in options, 'LokiJSAdapter `useWebWorker` option is required. Pass `{ useWebWorker: false }` to adopt the new behavior, or `{ useWebWorker: true }` to supress this warning with no changes');\n      if (true === options.useWebWorker) {\n        _logger.default.warn('LokiJSAdapter {useWebWorker: true} option is now deprecated. If you rely on this feature, please file an issue');\n      }\n      (0, _invariant.default)('useIncrementalIndexedDB' in options, 'LokiJSAdapter `useIncrementalIndexedDB` option is required. Pass `{ useIncrementalIndexedDB: true }` to adopt the new behavior, or `{ useIncrementalIndexedDB: false }` to supress this warning with no changes');\n      if (false === options.useIncrementalIndexedDB) {\n        _logger.default.warn('LokiJSAdapter {useIncrementalIndexedDB: false} option is now deprecated. If you rely on this feature, please file an issue');\n      }\n      (0, _common.validateAdapter)(this);\n    }\n    this._dispatcher.call('setUp', [options], function (result) {\n      return (0, _common.devSetupCallback)(result, options.onSetUpError);\n    });\n  }\n\n  // eslint-disable-next-line no-use-before-define\n  var _proto = LokiJSAdapter.prototype;\n  _proto.testClone = function (options = {}) {\n    return new Promise(function ($return) {\n      // Ensure data is saved to memory\n      // $FlowFixMe\n      var driver = this._driver;\n      driver.loki.close();\n\n      // $FlowFixMe\n      return $return(new LokiJSAdapter((0, _extends2.default)({}, this._options, {\n        _testLokiAdapter: driver.loki.persistenceAdapter\n      }, options)));\n    }.bind(this));\n  };\n  _proto.find = function (table, id, callback) {\n    (0, _common.validateTable)(table, this.schema);\n    this._dispatcher.call('find', [table, id], callback);\n  };\n  _proto.query = function (_query, callback) {\n    (0, _common.validateTable)(_query.table, this.schema);\n    this._dispatcher.call('query', [_query], callback);\n  };\n  _proto.queryIds = function (query, callback) {\n    (0, _common.validateTable)(query.table, this.schema);\n    this._dispatcher.call('queryIds', [query], callback);\n  };\n  _proto.unsafeQueryRaw = function (query, callback) {\n    (0, _common.validateTable)(query.table, this.schema);\n    this._dispatcher.call('unsafeQueryRaw', [query], callback);\n  };\n  _proto.count = function (query, callback) {\n    (0, _common.validateTable)(query.table, this.schema);\n    this._dispatcher.call('count', [query], callback);\n  };\n  _proto.batch = function (operations, callback) {\n    var _this = this;\n    operations.forEach(function ([, table]) {\n      return (0, _common.validateTable)(table, _this.schema);\n    });\n    // batches are only strings + raws which only have JSON-compatible values, rest is immutable\n    this._dispatcher.call('batch', [operations], callback, 'shallowCloneDeepObjects');\n  };\n  _proto.getDeletedRecords = function (table, callback) {\n    (0, _common.validateTable)(table, this.schema);\n    this._dispatcher.call('getDeletedRecords', [table], callback);\n  };\n  _proto.destroyDeletedRecords = function (table, recordIds, callback) {\n    (0, _common.validateTable)(table, this.schema);\n    this._dispatcher.call('batch', [recordIds.map(function (id) {\n      return ['destroyPermanently', table, id];\n    })], callback, 'immutable', 'immutable');\n  };\n  _proto.unsafeLoadFromSync = function (jsonId, callback) {\n    callback({\n      error: new Error('unsafeLoadFromSync unavailable in LokiJS')\n    });\n  };\n  _proto.provideSyncJson = function (id, syncPullResultJson, callback) {\n    callback({\n      error: new Error('provideSyncJson unavailable in LokiJS')\n    });\n  };\n  _proto.unsafeResetDatabase = function (callback) {\n    this._dispatcher.call('unsafeResetDatabase', [], callback);\n  };\n  _proto.unsafeExecute = function (operations, callback) {\n    this._dispatcher.call('unsafeExecute', [operations], callback);\n  };\n  _proto.getLocal = function (key, callback) {\n    this._dispatcher.call('getLocal', [key], callback);\n  };\n  _proto.setLocal = function (key, value, callback) {\n    (0, _invariant.default)('string' === typeof value, 'adapter.setLocal() value must be a string');\n    this._dispatcher.call('setLocal', [key, value], callback);\n  };\n  _proto.removeLocal = function (key, callback) {\n    this._dispatcher.call('removeLocal', [key], callback);\n  }\n\n  // dev/debug utility\n  ;\n  // (experimental)\n  _proto._fatalError = function (error) {\n    this._dispatcher.call('_fatalError', [error], function () {});\n  }\n\n  // (experimental)\n  ;\n  _proto._clearCachedRecords = function () {\n    this._dispatcher.call('clearCachedRecords', [], function () {});\n  };\n  _proto._debugDignoseMissingRecord = function (table, id) {\n    var driver = this._driver;\n    if (driver) {\n      var lokiCollection = driver.loki.getCollection(table);\n      // if we can find the record by ID, it just means that the record cache ID was corrupted\n      var didFindById = !!lokiCollection.by('id', id);\n      _logger.default.log(\"Did find \".concat(table, \"#\").concat(id, \" in Loki collection by ID? \").concat(didFindById));\n\n      // if we can't, but can filter to it, it means that Loki indices are corrupted\n      var didFindByFilter = !!lokiCollection.data.filter(function (doc) {\n        return doc.id === id;\n      });\n      _logger.default.log(\"Did find \".concat(table, \"#\").concat(id, \" in Loki collection by filtering the collection? \").concat(didFindByFilter));\n    }\n  };\n  return (0, _createClass2.default)(LokiJSAdapter, [{\n    key: \"_driver\",\n    get: function get() {\n      // $FlowFixMe\n      return this._dispatcher._worker._bridge.driver;\n    }\n  }]);\n}();\nLokiJSAdapter.adapterType = 'loki';"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,KAAC,SAAS,MAAM,SAAS;AACvB,UAAI,OAAO,WAAW,cAAc,OAAO,KAAK;AAE9C,eAAO,CAAC,GAAG,OAAO;AAAA,MACpB,WAAW,OAAO,YAAY,UAAU;AAEtC,eAAO,UAAU,QAAQ;AAAA,MAC3B,OAAO;AAEL,aAAK,8BAA8B,QAAQ;AAAA,MAC7C;AAAA,IACF,GAAG,SAAM,WAAW;AAClB,cAAQ,WAAW;AACjB;AAGA,YAAI,QAAQ,OAAO,WAAW,eAAe,CAAC,CAAC,OAAO;AAqCtD,iBAAS,4BAA4B,SAAS;AAC5C,eAAK,OAAO;AACZ,eAAK,UAAU,WAAW,CAAC;AAC3B,eAAK,YAAY;AACjB,eAAK,iBAAiB,KAAK,QAAQ,kBAAkB;AACrD,eAAK,kBAAkB,KAAK,QAAQ,mBAAmB,CAAC;AACxD,eAAK,MAAM;AACX,eAAK,qBAAqB;AAC1B,eAAK,4BAA4B,CAAC;AAElC,cAAI,EAAE,KAAK,kBAAkB,KAAK,KAAK,iBAAiB,MAAM,IAAI;AAChE,kBAAM,IAAI,MAAM,+CAA+C;AAAA,UACjE;AAAA,QACF;AAGA,oCAA4B,UAAU,YAAY,SAAS,YAAY,SAAS;AAE9E,cAAI,QAAQ,UAAU,KAAK;AAC3B,cAAI,QAAQ,QAAQ,KAAK,YAAY;AAGrC,qBAAW,SAAS;AACpB,cAAI,UAAU,WAAW;AAEzB,cAAI,oBAAoB;AAExB,cAAI,MAAM,QAAQ,SAAS,GACzB,MAAM,GACN;AAEF,iBAAO,QAAQ,GAAG,IAAI,QAAQ,GAAG,GAAG;AAClC,kBAAO,MAAM,OAAQ;AAErB,gBAAI,QAAQ,GAAG,IAAI,OAAO;AACxB,oBAAM,MAAM;AAAA,YACd,OAAO;AACL,oBAAM;AAAA,YACR;AAAA,UACF;AAEA,cAAI,QAAQ,OAAO,QAAQ,GAAG,KAAK,SAAS,QAAQ,GAAG,KAAK,OAAO;AACjE,gCAAoB;AAAA,UACtB;AAEA,cAAI,sBAAsB,MAAM;AAE9B,mBAAO,CAAC;AAAA,UACV;AAMA,cAAI,mBAAmB;AACvB,mBAAS,IAAI,oBAAoB,KAAK,YAAY,GAAG,KAAK,mBAAmB,KAAK;AAChF,gBAAI,QAAQ,CAAC,KAAK,OAAO;AACvB,iCAAmB;AACnB;AAAA,YACF;AAAA,UACF;AAGA,cAAI,eAAe,WAAW,KAAK,iBAAiB;AACpD,cAAI,EAAE,gBAAgB,aAAa,SAAS,SAAS,aAAa,SAAS,QAAQ;AACjF,kBAAM,IAAI,MAAM,+BAA+B;AAAA,UACjD;AAEA,cAAI,cAAc,WAAW,KAAK,gBAAgB;AAClD,cAAI,EAAE,eAAe,YAAY,SAAS,SAAS,YAAY,SAAS,QAAQ;AAC9E,kBAAM,IAAI,MAAM,8BAA8B;AAAA,UAChD;AAIA,cAAI,YAAY,WAAW,KAAK,MAAM,mBAAmB,mBAAmB,CAAC;AAE7E,cAAI,UAAU,SAAS,KAAK,WAAW;AACrC,kBAAM,IAAI,MAAM,+BAA+B;AAAA,UACjD;AAEA,iBAAO;AAAA,QACT;AAiBA,oCAA4B,UAAU,eAAe,SAAS,QAAQ,aAAa,UAAU;AAC3F,cAAI,OAAO;AAEX,cAAI,CAAC,KAAK,KAAK;AACb,iBAAK,eAAe,QAAQ,UAAU,WAAW;AAC/C,mBAAK,aAAa,QAAQ,aAAa,QAAQ;AAAA,YACjD,CAAC;AACD;AAAA,UACF;AAEA,cAAI,KAAK,qBAAqB;AAC5B,kBAAM,IAAI,MAAM,iIAAiI;AAAA,UACnJ;AACA,eAAK,sBAAsB;AAE3B,mBAAS,QAAQ,IAAI,sBAAsB;AAC3C,mBAAS,QAAQ,KAAK,cAAc;AACpC,mBAAS,OAAO,GAAG;AACjB,qBAAS,KAAK,QAAQ,MAAM,CAAC;AAC7B,qBAAS,QAAQ,QAAQ,cAAc;AACvC,iBAAK,sBAAsB;AAC3B,qBAAS,CAAC;AAAA,UACZ;AAKA,cAAI;AACF,gBAAI,uBAAuB,WAAY;AACrC,sBAAQ,MAAM,+DAA+D;AAAA,YAC/E;AACA,gBAAI,eAAe;AAEnB,gBAAI,KAAK,KAAK,IAAI,YAAY,CAAC,qBAAqB,GAAG,WAAW;AAClE,eAAG,aAAa,WAAW;AACzB,mCAAqB;AACrB,qBAAO;AACP,kBAAI,gBAAgB,KAAK,QAAQ,gBAAgB;AAC/C,qBAAK,QAAQ,eAAe;AAAA,cAC9B;AAAA,YACF;AAEA,eAAG,UAAU,SAAS,GAAG;AACvB,qBAAO,CAAC;AAAA,YACV;AAEA,eAAG,UAAU,SAAS,GAAG;AACvB,qBAAO,CAAC;AAAA,YACV;AAEA,gBAAI,QAAQ,GAAG,YAAY,qBAAqB;AAEhD,gBAAI,cAAc,SAAU,aAAa;AACvC,kBAAI;AACF,oBAAI,cAAc,CAAC;AACnB,oBAAI,YAAY,KAAK,aAAa,OAAO,YAAY,GAAG,aAAa,WAAW;AAEhF,uCAAuB,WAAW;AAChC,uBAAK,qBAAqB,UAAU;AACpC,4BAAU,qBAAqB,QAAQ,SAAU,gBAAgB;AAC/D,yBAAK,0BAA0B,eAAe,IAAI,IAAI,eAAe;AAAA,kBACvE,CAAC;AAAA,gBACH;AACA,mBAAG,UAAU,GAAG,OAAO;AAAA,cACzB,SAAS,OAAO;AACd,wBAAQ,MAAM,4BAA4B,KAAK;AAC/C,mBAAG,MAAM;AAAA,cACX;AAAA,YACF;AAYA,gBAAI,qBAAqB,WAAW;AAGlC,qBAAO,MAAM,WAAW,GAAG,SAAS,GAAG;AACrC,oBAAI,cAAc,eAAe,EAAE,OAAO,MAAM;AAChD,4BAAY,WAAW;AAAA,cACzB,GAAG,SAAS,GAAG;AACb,wBAAQ,MAAM,6BAA6B,CAAC;AAC5C,mBAAG,MAAM;AAAA,cACX,CAAC;AAAA,YACH;AAEA,gBAAI,kBAAkB,WAAW;AAC/B,qBAAO,MAAM,IAAI,MAAM,GAAG,SAAS,GAAG;AACpC,oBAAI,mBAAmB,EAAE,OAAO,MAAM,MAAM,KAAK,oBAAoB;AACnE,8BAAY;AAAA,gBACd,OAAO;AACL,2BAAS,QAAQ,KAAK,qDAAqD;AAC3E,iCAAe;AACf,qCAAmB;AAAA,gBACrB;AAAA,cACF,GAAG,SAAS,GAAG;AACb,wBAAQ,MAAM,+BAA+B,CAAC;AAC9C,mBAAG,MAAM;AAAA,cACX,CAAC;AAAA,YACH;AAEA,4BAAgB;AAAA,UAClB,SAAS,OAAO;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF;AAGA,iBAAS,eAAe,SAAS;AAC/B,cAAI,cAAc,CAAC;AAEnB,kBAAQ,QAAQ,SAAU,KAAK;AAC7B,gBAAI,cAAc,IAAI,MAAM,GAAG;AAE/B,gBAAI,YAAY,WAAW,KAAK,YAAY,CAAC,MAAM,SAAS;AAC1D,kBAAI,aAAa,YAAY,CAAC;AAC9B,kBAAI,UAAU,SAAS,YAAY,CAAC,CAAC,KAAK;AAC1C,kBAAI,aAAa,YAAY,UAAU;AAEvC,kBAAI,CAAC,cAAc,UAAU,YAAY;AACvC,4BAAY,UAAU,IAAI;AAAA,cAC5B;AAAA,YACF;AAAA,UACF,CAAC;AACD,iBAAO;AAAA,QACT;AAEA,iBAAS,mBAAmB,OAAO;AACjC,cAAI;AACF,gBAAI,OAAO;AACT,kBAAI,OAAO,KAAK,MAAM,MAAM,KAAK;AACjC,qBAAO,KAAK,gBAAgB;AAAA,YAC9B,OAAO;AACL,qBAAO;AAAA,YACT;AAAA,UACF,SAAS,GAAG;AACV,oBAAQ,MAAM,kCAAkC,CAAC;AACjD,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,oCAA4B,UAAU,eAAe,SAAS,UAAU,MAAM,aAAa,aAAa;AACtG,cAAI,OAAO;AACX,cAAI,uBAAuB,CAAC;AAC5B,cAAI,YAAY;AAEhB,cAAI,oBAAoB,SAAU,YAAY,GAAG;AAE/C,gBAAI,cAAc,oBAAI,IAAI;AAC1B,2BAAe,WAAW,SAAS,QAAQ,SAAS,QAAQ;AAC1D,kBAAI,UAAW,SAAS,KAAK,YAAa;AAC1C,0BAAY,IAAI,OAAO;AAAA,YACzB,CAAC;AACD,uBAAW,WAAW,CAAC;AAGvB,gBAAI,eAAe,SAAU,SAAS;AACpC,kBAAI,YAAY,KAAK,UAAU,YAAY,OAAO;AAClD,kBAAI,KAAK,QAAQ,gBAAgB;AAC/B,4BAAY,KAAK,QAAQ,eAAe,WAAW,MAAM,SAAS;AAAA,cACpE;AAIA,0BAAY,KAAK,UAAU,SAAS;AACpC,2BAAa,UAAU;AACvB,uBAAS,eAAe,QAAQ,IAAI,aAAa,WAAW,OAAO,YAAY,OAAO;AACtF,uBAAS,IAAI;AAAA,gBACX,KAAK,WAAW,OAAO,YAAY;AAAA,gBACnC,OAAO;AAAA,cACT,CAAC;AAAA,YACH;AACA,gBAAI,aAAa;AACf,0BAAY,QAAQ,YAAY;AAAA,YAClC,OAAO;AAEL,kBAAI,aAAc,WAAW,QAAQ,KAAK,YAAa;AACvD,uBAAS,IAAI,GAAG,KAAK,YAAY,KAAK,GAAG;AACvC,6BAAa,CAAC;AAAA,cAChB;AAKA,kBAAI,sBAAsB,YAAY,WAAW,IAAI,KAAK;AAC1D,uBAAS,IAAI,aAAa,GAAG,KAAK,qBAAqB,KAAK,GAAG;AAC7D,oBAAI,mBAAmB,WAAW,OAAO,YAAY;AACrD,yBAAS,OAAO,gBAAgB;AAChC,yBAAS,QAAQ,KAAK,oBAAoB,gBAAgB;AAAA,cAC5D;AAAA,YACF;AAGA,gBAAI,WAAW,SAAS,YAAY,QAAQ,CAAC,aAAa;AACxD,yBAAW,UAAU,CAAC;AACtB,yBAAW,OAAO,CAAC;AACnB,yBAAW,eAAe,gBAAgB;AAC1C,mCAAqB,KAAK,EAAE,MAAM,WAAW,MAAM,WAAW,WAAW,aAAa,CAAC;AAEvF,kBAAI,gBAAgB,KAAK,UAAU,UAAU;AAC7C,2BAAa,cAAc;AAC3B,uBAAS,eAAe,QAAQ,IAAI,aAAa,WAAW,OAAO,WAAW;AAC9E,uBAAS,IAAI;AAAA,gBACX,KAAK,WAAW,OAAO;AAAA,gBACvB,OAAO;AAAA,cACT,CAAC;AAAA,YACH;AAGA,iBAAK,YAAY,CAAC,IAAI,EAAE,MAAM,WAAW,KAAK;AAAA,UAChD;AACA,eAAK,YAAY,QAAQ,iBAAiB;AAE1C,eAAK,eAAe,gBAAgB;AACpC,cAAI,qBAAqB,KAAK,UAAU,IAAI;AAC5C,uBAAa,mBAAmB;AAEhC,mBAAS,eAAe,QAAQ,IAAI,cAAc;AAClD,mBAAS,IAAI,EAAE,KAAK,QAAQ,OAAO,mBAAmB,CAAC;AAEvD,mBAAS,QAAQ,IAAI,iBAAiB,SAAS;AAC/C,iBAAO;AAAA,YACL,eAAe,KAAK;AAAA,YACpB;AAAA,UACF;AAAA,QACF;AAiBA,oCAA4B,UAAU,eAAe,SAAS,QAAQ,UAAU;AAC9E,cAAI,OAAO;AAEX,cAAI,KAAK,qBAAqB;AAC5B,kBAAM,IAAI,MAAM,+HAA+H;AAAA,UACjJ;AAEA,eAAK,sBAAsB;AAE3B,mBAAS,QAAQ,IAAI,sBAAsB;AAC3C,mBAAS,QAAQ,KAAK,cAAc;AAEpC,cAAI,SAAS,SAAU,OAAO;AAC5B,qBAAS,QAAQ,QAAQ,cAAc;AACvC,iBAAK,sBAAsB;AAC3B,qBAAS,KAAK;AAAA,UAChB;AAEA,eAAK,cAAc,QAAQ,SAAS,QAAQ;AAC1C,gBAAI;AACF,kBAAI,CAAC,MAAM,QAAQ,MAAM,GAAG;AAC1B,sBAAM;AAAA,cACR;AAEA,kBAAI,CAAC,OAAO,QAAQ;AAClB,uBAAO,OAAO,IAAI;AAAA,cACpB;AAEA,uBAAS,QAAQ,IAAI,iBAAiB,OAAO,MAAM;AAGnD,uBAAS,YAAY,MAAM;AAC3B,kBAAI,OAAO,OAAO;AAClB,qBAAO,OAAO;AAGd,2BAAa,MAAM,OAAO,UAAU,KAAK,QAAQ,kBAAkB,KAAK,eAAe;AACvF,uBAAS;AAGT,mBAAK,qBAAqB,KAAK,gBAAgB;AAC/C,mBAAK,4BAA4B,CAAC;AAClC,mBAAK,YAAY,QAAQ,SAAU,YAAY;AAC7C,qBAAK,0BAA0B,WAAW,IAAI,IAAI,WAAW,gBAAgB;AAAA,cAC/E,CAAC;AAED,qBAAO,OAAO,IAAI;AAAA,YACpB,SAAS,OAAO;AACd,mBAAK,qBAAqB;AAC1B,mBAAK,4BAA4B,CAAC;AAClC,qBAAO,OAAO,KAAK;AAAA,YACrB;AAAA,UACF,CAAC;AAAA,QACH;AAEA,iBAAS,YAAY,QAAQ;AAC3B,cAAI;AACJ,cAAI,WAAW,CAAC;AAEhB,4BAAkB,MAAM;AAExB,iBAAO,QAAQ,SAAS,OAAO;AAC7B,gBAAI,OAAO,MAAM;AACjB,gBAAI,QAAQ,MAAM;AAClB,gBAAI,OAAO,MAAM;AACjB,gBAAI,SAAS,QAAQ;AACnB,qBAAO;AAAA,YACT,WAAW,SAAS,QAAQ;AAC1B,kBAAI,SAAS,IAAI,GAAG;AAClB,yBAAS,IAAI,EAAE,WAAW,KAAK,KAAK;AAAA,cACtC,OAAO;AACL,yBAAS,IAAI,IAAI;AAAA,kBACf,UAAU;AAAA,kBACV,YAAY,CAAC,KAAK;AAAA,gBACpB;AAAA,cACF;AAAA,YACF,WAAW,SAAS,YAAY;AAC9B,kBAAI,SAAS,IAAI,GAAG;AAClB,yBAAS,IAAI,EAAE,WAAW;AAAA,cAC5B,OAAO;AACL,yBAAS,IAAI,IAAI,EAAE,UAAU,OAAO,YAAY,CAAC,EAAE;AAAA,cACrD;AAAA,YACF,OAAO;AACL,oBAAM,IAAI,MAAM,aAAa;AAAA,YAC/B;AAAA,UACF,CAAC;AAED,cAAI,CAAC,MAAM;AACT,kBAAM,IAAI,MAAM,gDAAgD;AAAA,UAClE;AAEA,iBAAO,EAAE,MAAY,SAAmB;AAAA,QAC1C;AAEA,iBAAS,aAAa,MAAM,UAAU,kBAAkB,iBAAiB;AACvE,eAAK,YAAY,QAAQ,SAAS,mBAAmB,gBAAgB,GAAG;AACtE,gBAAI,OAAO,eAAe;AAC1B,gBAAI,kBAAkB,SAAS,IAAI;AACnC,gBAAI,iBAAiB;AACnB,kBAAI,CAAC,gBAAgB,UAAU;AAC7B,sBAAM,IAAI,MAAM,qDAAqD,IAAI;AAAA,cAC3E;AACA,kBAAI,aAAa,gBAAgB;AACjC,8BAAgB,WAAW;AAC3B,mBAAK,YAAY,CAAC,IAAI;AAEtB,kBAAI,SAAS,gBAAgB,SAAS,IAAI;AAC1C,kBAAI,kCAAkC,WAAY;AAChD,yBAAS,UAAU,QAAQ,IAAI,kBAAkB,IAAI;AACrD,oBAAI,OAAO,CAAC;AACZ,oBAAI,aAAa,gBAAgB;AACjC,2BAAW,QAAQ,SAAS,cAAc,OAAOA,IAAG;AAClD,sBAAI,QAAQ;AACV,4BAAQ,KAAK,MAAM,KAAK;AACxB,wBAAI,kBAAkB;AACpB,8BAAQ,iBAAiB,MAAM,KAAK;AAAA,oBACtC;AAAA,kBACF;AACA,wBAAM,QAAQ,SAAS,KAAK;AAC1B,yBAAK,KAAK,GAAG;AAAA,kBACf,CAAC;AACD,6BAAWA,EAAC,IAAI;AAAA,gBAClB,CAAC;AACD,uBAAO;AAAA,cACT;AACA,yBAAW,UAAU;AAAA,YACvB;AAAA,UACF,CAAC;AAAA,QACH;AAEA,oCAA4B,UAAU,iBAAiB,SAAS,QAAQ,SAAS,WAAW;AAC1F,cAAI,OAAO;AACX,mBAAS,QAAQ,IAAI,kBAAkB;AAEvC,cAAI,KAAK,mBAAmB;AAC1B,kBAAM,IAAI,MAAM,2DAA2D;AAAA,UAC7E;AACA,eAAK,oBAAoB;AAEzB,cAAI,cAAc,UAAU,KAAK,QAAQ,CAAC;AAE1C,sBAAY,kBAAkB,SAAS,GAAG;AACxC,gBAAI,KAAK,EAAE,OAAO;AAClB,qBAAS,QAAQ,IAAI,mCAAmC,EAAE,UAAU;AAEpE,gBAAI,EAAE,aAAa,GAAG;AAEpB,iBAAG,kBAAkB,uBAAuB,EAAE,SAAS,MAAM,CAAC;AAAA,YAChE,OAAO;AAEL,oBAAM,IAAI,MAAM,yBAAyB,EAAE,aAAa,wBAAwB;AAAA,YAClF;AAAA,UACF;AAEA,sBAAY,YAAY,SAAS,GAAG;AAClC,iBAAK,oBAAoB;AACzB,gBAAI,KAAK,EAAE,OAAO;AAClB,iBAAK,MAAM;AAEX,gBAAI,CAAC,GAAG,iBAAiB,SAAS,qBAAqB,GAAG;AACxD,sBAAQ,IAAI,MAAM,6BAA6B,CAAC;AAEhD,mBAAK,eAAe,MAAM;AAC1B;AAAA,YACF;AAEA,qBAAS,QAAQ,IAAI,cAAc;AAEnC,eAAG,kBAAkB,SAAS,oBAAoB;AAEhD,kBAAI,KAAK,QAAQ,IAAI;AACnB;AAAA,cACF;AAEA,uBAAS,QAAQ,IAAI,sBAAsB,kBAAkB;AAO7D,mBAAK,IAAI,MAAM;AACf,mBAAK,MAAM;AACX,kBAAI,KAAK,QAAQ,iBAAiB;AAChC,qBAAK,QAAQ,gBAAgB,kBAAkB;AAAA,cACjD;AAAA,YACF;AAEA,sBAAU;AAAA,UACZ;AAEA,sBAAY,YAAY,SAAS,GAAG;AAClC,oBAAQ,MAAM,6BAA6B,CAAC;AAC5C,oBAAQ,IAAI,MAAM,8CAA8C,CAAC;AAAA,UACnE;AAEA,sBAAY,UAAU,SAAS,GAAG;AAChC,iBAAK,oBAAoB;AACzB,oBAAQ,MAAM,wBAAwB,CAAC;AACvC,oBAAQ,CAAC;AAAA,UACX;AAAA,QACF;AAEA,oCAA4B,UAAU,gBAAgB,SAAS,QAAQ,UAAU;AAC/E,cAAI,OAAO;AACX,cAAI,CAAC,KAAK,KAAK;AACb,iBAAK,eAAe,QAAQ,UAAU,WAAW;AAC/C,mBAAK,cAAc,QAAQ,QAAQ;AAAA,YACrC,CAAC;AACD;AAAA,UACF;AAEA,cAAI,KAAK,KAAK,IAAI,YAAY,CAAC,qBAAqB,GAAG,UAAU;AACjE,cAAI,QAAQ,GAAG,YAAY,qBAAqB;AAEhD,cAAI,mBAAmB,KAAK,QAAQ;AACpC,cAAI,kBAAkB,KAAK;AAK3B,mBAAS,cAAc,MAAM;AAC3B,gBAAI,iBAAiB,KAAK;AAC1B,gBAAI,YAAY,gBAAgB,MAAM,cAAc;AAEpD,gBAAI,YAAY,CAAC;AACjB,gBAAI,qBAAqB;AAEzB,qBAAS,iBAAiB,GAAG,gBAAgB,UAAU;AAGrD,kBAAI,YAAY,EAAE,OAAO;AACzB,wBAAU,QAAQ,SAAU,OAAOA,IAAG;AACpC,2BAAW,OAAO,kBAAkB,eAAe;AACnD,0BAAU,KAAK,KAAK;AACpB,0BAAUA,EAAC,IAAI;AAAA,cACjB,CAAC;AAGD,oCAAsB;AACtB,kBAAI,uBAAuB,gBAAgB;AACzC,yBAAS,SAAS;AAAA,cACpB;AAAA,YACF;AAIA,gBAAI,iBAAiB;AACrB,gBAAI,oBAAoB,iBAAiB;AACzC,qBAAS,iBAAiB,OAAO,MAAM;AACrC,kBAAI,WAAW,UAAU,KAAK;AAC9B,qBAAO,MAAM,OAAO,QAAQ,GAAG,SAAS,GAAG;AACzC,oBAAI,OAAO,gBAAgB;AACzB,mCAAiB,QAAQ,mBAAmB,OAAO,CAAC;AAAA,gBACtD;AAEA,iCAAiB,GAAG,OAAO,QAAQ;AAAA,cACrC,GAAG,SAAS,GAAG;AACb,yBAAS,CAAC;AAAA,cACZ,CAAC;AAAA,YACH;AAEA,qBAAS,IAAI,GAAG,IAAI,mBAAmB,KAAK,GAAG;AAC7C,+BAAiB,GAAG,CAAC;AAAA,YACvB;AAAA,UACF;AAEA,mBAAS,eAAe;AACtB,mBAAO,MAAM,OAAO,GAAG,SAAS,GAAG;AACjC,kBAAI,YAAY,EAAE,OAAO;AACzB,wBAAU,QAAQ,SAAU,OAAO;AACjC,2BAAW,OAAO,kBAAkB,eAAe;AAAA,cACrD,CAAC;AACD,uBAAS,SAAS;AAAA,YACpB,GAAG,SAAS,GAAG;AACb,uBAAS,CAAC;AAAA,YACZ,CAAC;AAAA,UACH;AAEA,mBAAS,aAAa;AACpB,qBAAS,aAAa,MAAM;AAC1B,mBAAK,KAAK;AACV,kBAAI,KAAK,SAAS,KAAK;AACrB,8BAAc,IAAI;AAAA,cACpB,OAAO;AACL,6BAAa;AAAA,cACf;AAAA,YACF;AAEA,mBAAO,MAAM,WAAW,GAAG,SAAS,GAAG;AACrC,2BAAa,EAAE,OAAO,MAAM;AAAA,YAC9B,GAAG,SAAS,GAAG;AACb,uBAAS,CAAC;AAAA,YACZ,CAAC;AAED,gBAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAK,QAAQ,aAAa;AAAA,YAC5B;AAAA,UACF;AAEA,qBAAW;AAAA,QACb;AAEA,iBAAS,cAAc,OAAO;AAC5B,cAAI,MAAM,MAAM;AAEhB,cAAI,QAAQ,QAAQ;AAClB,kBAAM,OAAO;AACb;AAAA,UACF,WAAW,IAAI,SAAS,GAAG,GAAG;AAC5B,gBAAI,cAAc,IAAI,MAAM,GAAG;AAC/B,gBAAI,YAAY,WAAW,KAAK,YAAY,CAAC,MAAM,SAAS;AAC1D,oBAAM,OAAO;AACb,oBAAM,iBAAiB,YAAY,CAAC;AACpC,oBAAM,QAAQ,SAAS,YAAY,CAAC,GAAG,EAAE;AACzC;AAAA,YACF,WAAW,YAAY,WAAW,KAAK,YAAY,CAAC,MAAM,YAAY;AACpE,oBAAM,OAAO;AACb,oBAAM,iBAAiB,YAAY,CAAC;AACpC;AAAA,YACF;AAAA,UACF;AAEA,kBAAQ,MAAM,mBAAmB,GAAG;AACpC,gBAAM,IAAI,MAAM,0CAA0C;AAAA,QAC5D;AAEA,iBAAS,WAAW,OAAO,kBAAkB,iBAAiB;AAC5D,wBAAc,KAAK;AAEnB,cAAI,SAAS,MAAM,SAAS;AAC5B,cAAI,SAAS,gBAAgB,SAAS,MAAM,cAAc;AAE1D,cAAI,EAAE,UAAU,SAAS;AACvB,kBAAM,QAAQ,KAAK,MAAM,MAAM,KAAK;AAAA,UACtC;AACA,cAAI,oBAAoB,UAAU,CAAC,QAAQ;AACzC,kBAAM,QAAQ,iBAAiB,MAAM,gBAAgB,MAAM,KAAK;AAAA,UAClE;AAAA,QACF;AAgBA,oCAA4B,UAAU,iBAAiB,SAAS,QAAQ,UAAU;AAChF,cAAI,KAAK,qBAAqB;AAC5B,kBAAM,IAAI,MAAM,gIAAgI;AAAA,UAClJ;AAEA,eAAK,sBAAsB;AAE3B,cAAI,OAAO;AACX,mBAAS,QAAQ,IAAI,wBAAwB;AAC7C,mBAAS,QAAQ,KAAK,gBAAgB;AAEtC,eAAK,qBAAqB;AAC1B,eAAK,4BAA4B,CAAC;AAElC,cAAI,KAAK,KAAK;AACZ,iBAAK,IAAI,MAAM;AACf,iBAAK,MAAM;AAAA,UACb;AAEA,cAAI,UAAU,UAAU,eAAe,MAAM;AAE7C,kBAAQ,YAAY,WAAW;AAC7B,iBAAK,sBAAsB;AAC3B,qBAAS,QAAQ,QAAQ,gBAAgB;AACzC,qBAAS,EAAE,SAAS,KAAK,CAAC;AAAA,UAC5B;AAEA,kBAAQ,UAAU,SAAS,GAAG;AAC5B,iBAAK,sBAAsB;AAC3B,oBAAQ,MAAM,iCAAiC,CAAC;AAChD,qBAAS,EAAE,SAAS,MAAM,CAAC;AAAA,UAC7B;AAEA,kBAAQ,YAAY,SAAS,GAAG;AAG9B,oBAAQ,MAAM,uEAAuE,CAAC;AAAA,UACxF;AAAA,QACF;AAEA,iBAAS,kBAAkB;AAIzB,iBAAO,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,CAAC;AAAA,QAC/C;AAEA,iBAAS,kBAAkB,QAAQ;AAGjC,iBAAO,KAAK,SAAS,GAAG,GAAG;AACzB,oBAAQ,EAAE,SAAS,MAAM,EAAE,SAAS;AAAA,UACtC,CAAC;AAAA,QACH;AAEA,iBAAS,gBAAgB,MAAM,OAAO;AACpC,cAAI,gBAAgB,KAAK,MAAM,KAAK,SAAS,KAAK;AAClD,cAAI,YAAY,CAAC;AACjB,cAAI,QAAQ;AACZ,mBAAS,IAAI,GAAG,IAAI,OAAO,KAAK,GAAG;AACjC,qBAAS,KAAK,gBAAgB,CAAC;AAC/B,qBAAS,KAAK,iBAAiB,IAAI,EAAE;AACrC,gBAAI,MAAM,GAAG;AAEX,wBAAU,KAAK,YAAY,WAAW,QAAQ,IAAI,CAAC;AAAA,YACrD,WAAW,MAAM,QAAQ,GAAG;AAE1B,wBAAU,KAAK,YAAY,WAAW,MAAM,CAAC;AAAA,YAC/C,OAAO;AAEL,wBAAU,KAAK,YAAY,MAAM,QAAQ,QAAQ,OAAO,IAAI,CAAC;AAAA,YAC/D;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAEA,iBAAS,OAAO,SAAS,WAAW,SAAS;AAC3C,kBAAQ,YAAY,SAAU,GAAG;AAC/B,gBAAI;AACF,qBAAO,UAAU,CAAC;AAAA,YACpB,SAAS,OAAO;AACd,sBAAQ,KAAK;AAAA,YACf;AAAA,UACF;AACA,kBAAQ,UAAU;AAClB,iBAAO;AAAA,QACT;AAEA,eAAO;AAAA,MACT,GAAG;AAAA,IACL,CAAC;AAAA;AAAA;;;AC70BD;AAAA;AAUA,KAAC,SAAU,MAAM,SAAS;AACtB,UAAI,OAAO,WAAW,cAAc,OAAO,KAAK;AAE5C,eAAO,CAAC,GAAG,OAAO;AAAA,MACtB,WAAW,OAAO,YAAY,UAAU;AAEpC,eAAO,UAAU,QAAQ;AAAA,MAC7B,OAAO;AAEH,aAAK,qBAAqB,QAAQ;AAAA,MACtC;AAAA,IACJ,GAAE,SAAM,WAAY;AAClB,cAAQ,WAAW;AAoBjB,iBAAS,mBAAmB,SAAS,SACrC;AACE,eAAK,MAAM;AACX,eAAK,UAAU,WAAW,CAAC;AAE3B,cAAI,OAAQ,YAAa,aACzB;AACE,iBAAK,MAAM;AAAA,UACb;AAGA,eAAK,UAAU;AAEf,cAAI,CAAC,KAAK,kBAAkB,GAAG;AAC7B,kBAAM,IAAI,MAAM,8DAA8D;AAAA,UAChF;AAAA,QACF;AAKA,2BAAmB,UAAU,gBAAgB,WAC7C;AACE,cAAI,KAAK,WAAW,KAAK,QAAQ,IAAI;AACnC,iBAAK,QAAQ,GAAG,MAAM;AACtB,iBAAK,QAAQ,KAAK;AAAA,UACpB;AAAA,QACF;AAQA,2BAAmB,UAAU,oBAAoB,WACjD;AACE,cAAI,OAAO,cAAc,eAAe,UAAW,QAAO;AAE1D,iBAAO;AAAA,QACT;AAiBA,2BAAmB,UAAU,eAAe,SAAS,QAAQ,UAC7D;AACE,cAAI,UAAU,KAAK;AACnB,cAAI,UAAU;AAGd,cAAI,KAAK,YAAY,QAAQ,KAAK,QAAQ,OAAO,MAAM;AACrD,iBAAK,UAAU,IAAI,YAAY,SAAS,KAAK;AAC3C,sBAAQ,UAAU;AAElB,sBAAQ,aAAa,QAAQ,QAAQ;AAAA,YACvC,CAAC;AAED;AAAA,UACF;AAGA,eAAK,QAAQ,UAAU,SAAS,QAAQ,SAAS,QAAQ;AACvD,gBAAI,OAAQ,aAAc,YAAY;AACpC,kBAAI,OAAO,OAAO,GAAG;AACnB,yBAAS,IAAI;AACb;AAAA,cACF;AACA,uBAAS,OAAO,GAAG;AAAA,YACrB,OACK;AAEH,sBAAQ,IAAI,OAAO,GAAG;AAAA,YACxB;AAAA,UACF,CAAC;AAAA,QACH;AAGA,2BAAmB,UAAU,UAAU,mBAAmB,UAAU;AAkBpE,2BAAmB,UAAU,eAAe,SAAS,QAAQ,UAAU,UACvE;AACE,cAAI,UAAU,KAAK;AACnB,cAAI,UAAU;AAEd,mBAAS,aAAa,QAAQ;AAC5B,gBAAI,UAAU,OAAO,YAAY,MAAM;AACrC,uBAAS,IAAI;AAAA,YACf,OACK;AACH,uBAAS,IAAI,MAAM,uBAAuB,CAAC;AAAA,YAC7C;AAEA,gBAAI,QAAQ,QAAQ,gBAAgB;AAClC,sBAAQ,cAAc;AAAA,YACxB;AAAA,UACF;AAGA,cAAI,KAAK,YAAY,QAAQ,KAAK,QAAQ,OAAO,MAAM;AACrD,iBAAK,UAAU,IAAI,YAAY,SAAS,KAAK;AAC3C,sBAAQ,aAAa,QAAQ,UAAU,YAAY;AAAA,YACrD,CAAC;AAED;AAAA,UACF;AAGA,eAAK,QAAQ,UAAU,SAAS,QAAQ,UAAU,YAAY;AAAA,QAChE;AAGA,2BAAmB,UAAU,UAAU,mBAAmB,UAAU;AAgBpE,2BAAmB,UAAU,iBAAiB,SAAS,QAAQ,UAC/D;AACE,cAAI,UAAU,KAAK;AACnB,cAAI,UAAU;AAGd,cAAI,KAAK,YAAY,QAAQ,KAAK,QAAQ,OAAO,MAAM;AACrD,iBAAK,UAAU,IAAI,YAAY,SAAS,KAAK;AAC3C,sBAAQ,UAAU;AAElB,sBAAQ,eAAe,QAAQ,QAAQ;AAAA,YACzC,CAAC;AAED;AAAA,UACF;AAGA,eAAK,QAAQ,UAAU,SAAS,QAAQ,SAAS,QAAQ;AACvD,gBAAI,KAAK,OAAO;AAEhB,gBAAI,OAAO,GAAG;AACZ,sBAAQ,QAAQ,aAAa,IAAI,QAAQ;AAAA,YAC3C,WAAW,OAAQ,aAAc,YAAY;AAC3C,uBAAS,EAAE,SAAS,KAAK,CAAC;AAAA,YAC5B;AAAA,UACF,CAAC;AAAA,QACH;AAGA,2BAAmB,UAAU,YAAY,mBAAmB,UAAU;AAStE,2BAAmB,UAAU,2BAA2B,SAAS,QAAQ;AACvE,cAAIC,QAAK;AACT,eAAK,gBAAgB,SAAS,QAAQ;AACpC,mBAAO,QAAQ,SAAS,KAAK;AAC3B,kBAAI,IAAI,WAAW,MAAM,GAAG;AAC1B,gBAAAA,MAAK,eAAe,GAAG;AAAA,cACzB;AAAA,YACF,CAAC;AAAA,UACH,CAAC;AAAA,QACH;AAgBA,2BAAmB,UAAU,kBAAkB,SAAS,UACxD;AACE,cAAI,UAAU,KAAK;AACnB,cAAI,UAAU;AAGd,cAAI,KAAK,YAAY,QAAQ,KAAK,QAAQ,OAAO,MAAM;AACrD,iBAAK,UAAU,IAAI,YAAY,SAAS,KAAK;AAC3C,sBAAQ,UAAU;AAElB,sBAAQ,gBAAgB,QAAQ;AAAA,YAClC,CAAC;AAED;AAAA,UACF;AAIA,eAAK,QAAQ,WAAW,SAAS,SAAS,SAAS;AACjD,gBAAI,QAAQ,CAAC;AAEb,qBAAQ,MAAM,GAAG,MAAM,QAAQ,QAAQ,OAAO;AAC5C,oBAAM,KAAK,QAAQ,GAAG,EAAE,GAAG;AAAA,YAC7B;AAEA,gBAAI,OAAQ,aAAc,YAAY;AACpC,uBAAS,KAAK;AAAA,YAChB,OACK;AACH,oBAAM,QAAQ,SAAS,KAAK;AAC1B,wBAAQ,IAAI,GAAG;AAAA,cACjB,CAAC;AAAA,YACH;AAAA,UACF,CAAC;AAAA,QACH;AAGA,2BAAmB,UAAU,aAAa,mBAAmB,UAAU;AAQvE,2BAAmB,UAAU,oBAAoB,SAAS,UAC1D;AACE,cAAI,UAAU,KAAK;AACnB,cAAI,UAAU;AAGd,cAAI,KAAK,YAAY,QAAQ,KAAK,QAAQ,OAAO,MAAM;AACrD,iBAAK,UAAU,IAAI,YAAY,SAAS,KAAK;AAC3C,sBAAQ,UAAU;AAElB,sBAAQ,kBAAkB,QAAQ;AAAA,YACpC,CAAC;AAED;AAAA,UACF;AAIA,eAAK,QAAQ,WAAW,SAAS,SAAS;AACxC,gBAAI,UAAU,CAAC;AACf,gBAAI,KACF,MACA,MACA,MACA;AAEF,qBAAQ,MAAM,GAAG,MAAM,QAAQ,QAAQ,OAAO;AAC5C,oBAAM,QAAQ,GAAG;AACjB,qBAAO,IAAI,OAAO;AAClB,qBAAO,IAAI,OAAO;AAClB,qBAAO,IAAI,OAAO;AAGlB,qBAAO,KAAK,SAAS,IAAI,KAAK,SAAS,IAAI,KAAK,SAAS;AAEzD,sBAAQ,KAAK,EAAE,OAAO,IAAI,KAAK,OAAO,IAAI,KAAK,QAAQ,KAAK,CAAC;AAAA,YAC/D;AAEA,gBAAI,OAAQ,aAAc,YAAY;AACpC,uBAAS,OAAO;AAAA,YAClB,OACK;AACH,sBAAQ,QAAQ,SAASC,MAAK;AAC5B,wBAAQ,IAAIA,IAAG;AAAA,cACjB,CAAC;AAAA,YACH;AAAA,UACF,CAAC;AAAA,QACH;AAOA,iBAAS,YAAY,UACrB;AACE,eAAK,KAAK;AACV,eAAK,sBAAsB,QAAQ;AAAA,QACrC;AAEA,oBAAY,UAAU,wBAAwB,SAAS,UAAU;AAC/D,cAAI,cAAc,UAAU,KAAK,eAAe,CAAC;AACjD,cAAI,MAAM;AAGV,sBAAY,kBAAkB,SAAS,GAAG;AACxC,gBAAI,SAAS,EAAE,OAAO;AACtB,gBAAI,OAAO,iBAAiB,SAAS,SAAS,GAAG;AAC/C,qBAAO,kBAAkB,SAAS;AAAA,YACpC;AAEA,gBAAG,CAAC,OAAO,iBAAiB,SAAS,SAAS,GAAG;AAC/C,kBAAI,cAAc,OAAO,kBAAkB,WAAW,EAAE,SAAS,MAAM,eAAc,KAAK,CAAC;AAC3F,0BAAY,YAAY,OAAO,OAAO,EAAC,QAAO,MAAK,CAAC;AACpD,0BAAY,YAAY,OAAO,OAAO,EAAC,QAAO,MAAK,CAAC;AAKpD,0BAAY,YAAY,UAAU,UAAU,EAAC,QAAO,KAAI,CAAC;AAAA,YAC3D;AAAA,UACF;AAEA,sBAAY,YAAY,SAAS,GAAG;AAClC,gBAAI,KAAK,EAAE,OAAO;AAElB,gBAAI,OAAQ,aAAc,WAAY,UAAS,GAAG;AAAA,UACpD;AAEA,sBAAY,UAAU,SAAS,GAAG;AAChC,kBAAM;AAAA,UACR;AAAA,QACF;AAEA,oBAAY,UAAU,YAAY,SAAS,KAAK,KAAK,UAAU;AAC7D,cAAI,cAAc,KAAK,GAAG,YAAY,CAAC,SAAS,GAAG,UAAU;AAC7D,cAAI,QAAQ,YAAY,YAAY,SAAS;AAC7C,cAAI,QAAQ,MAAM,MAAM,QAAQ;AAChC,cAAI,SAAS,MAAM,MAAM;AACzB,cAAI,UAAU,MAAM,IAAI,MAAM;AAE9B,kBAAQ,YAAa,0BAAS,cAAc;AAC1C,mBAAO,SAAS,GAAG;AACjB,kBAAI,OAAO,EAAE,OAAO;AAEpB,kBAAI,SAAS,QAAQ,OAAO,SAAU,aAAa;AACjD,uBAAO;AAAA,kBACL,IAAI;AAAA,kBACJ,SAAS;AAAA,gBACX;AAAA,cACF;AAEA,kBAAI,OAAO,iBAAkB,YAAY;AACvC,6BAAa,IAAI;AAAA,cACnB,OACK;AACH,wBAAQ,IAAI,IAAI;AAAA,cAClB;AAAA,YACF;AAAA,UACF,GAAG,QAAQ;AAEX,kBAAQ,UAAW,0BAAS,cAAc;AACxC,mBAAO,SAAS,GAAG;AACjB,kBAAI,OAAO,iBAAkB,YAAY;AACvC,6BAAa,EAAE,IAAI,GAAG,SAAS,MAAM,CAAC;AAAA,cACxC,OACK;AACH,sBAAM;AAAA,cACR;AAAA,YACF;AAAA,UACF,GAAG,QAAQ;AAAA,QACb;AAEA,oBAAY,UAAU,gBAAgB,SAAU,IAAI,UAAU,MAAM;AAClE,cAAI,cAAc,KAAK,GAAG,YAAY,CAAC,SAAS,GAAG,UAAU;AAC7D,cAAI,QAAQ,YAAY,YAAY,SAAS;AAC7C,cAAI,UAAU,MAAM,IAAI,EAAE;AAE1B,kBAAQ,YAAa,0BAASC,OAAM,cAAa;AAC/C,mBAAO,SAAS,GAAG;AACjB,kBAAI,OAAO,iBAAkB,YAAY;AACvC,6BAAa,EAAE,OAAO,QAAQA,KAAI;AAAA,cACpC,OACK;AACH,wBAAQ,IAAI,EAAE,OAAO,MAAM;AAAA,cAC7B;AAAA,YACF;AAAA,UACF,GAAG,MAAM,QAAQ;AAAA,QACnB;AAEA,oBAAY,UAAU,YAAY,SAAU,KAAK,KAAK,KAAK,UAAU;AACnE,cAAI,cAAc,KAAK,GAAG,YAAY,CAAC,SAAS,GAAG,WAAW;AAC9D,cAAI,QAAQ,YAAY,YAAY,SAAS;AAC7C,cAAI,QAAQ,MAAM,MAAM,QAAQ;AAChC,cAAI,SAAS,MAAM,MAAM;AACzB,cAAI,UAAU,MAAM,IAAI,MAAM;AAI9B,kBAAQ,YAAY,SAAS,GAAG;AAC9B,gBAAI,MAAM,EAAE,OAAO;AAEnB,gBAAI,QAAQ,QAAQ,QAAQ,QAAW;AACrC,oBAAM;AAAA,gBACJ;AAAA,gBACA;AAAA,gBACA,QAAQ,MAAM,MAAM;AAAA,gBACpB;AAAA,cACF;AAAA,YACF,OACK;AACH,kBAAI,MAAM;AAAA,YACZ;AAEA,gBAAI,aAAa,MAAM,IAAI,GAAG;AAE9B,uBAAW,UAAW,0BAAS,cAAc;AAC3C,qBAAO,SAASC,IAAG;AACjB,oBAAI,OAAO,iBAAkB,YAAY;AACvC,+BAAa,EAAE,SAAS,MAAM,CAAC;AAAA,gBACjC,OACK;AACH,0BAAQ,MAAM,qCAAqC;AACnD,0BAAQ,MAAM,QAAQ,KAAK;AAAA,gBAC7B;AAAA,cACF;AAAA,YAEF,GAAG,QAAQ;AAEX,uBAAW,YAAa,0BAAS,cAAc;AAC7C,qBAAO,SAASA,IAAG;AACjB,oBAAI,OAAO,iBAAkB,YAAY;AACvC,+BAAa,EAAE,SAAS,KAAK,CAAC;AAAA,gBAChC;AAAA,cACF;AAAA,YACF,GAAG,QAAQ;AAAA,UACb;AAEA,kBAAQ,UAAW,0BAAS,cAAc;AACxC,mBAAO,SAAS,GAAG;AACjB,kBAAI,OAAO,iBAAkB,YAAY;AACvC,6BAAa,EAAE,SAAS,MAAM,CAAC;AAAA,cACjC,OACK;AACH,wBAAQ,MAAM,qCAAqC;AACnD,wBAAQ,MAAM,QAAQ,KAAK;AAAA,cAC7B;AAAA,YACF;AAAA,UACF,GAAG,QAAQ;AAAA,QACb;AAEA,oBAAY,UAAU,eAAe,SAAU,IAAI,UAAU;AAC3D,cAAI,cAAc,KAAK,GAAG,YAAY,CAAC,SAAS,GAAG,WAAW;AAC9D,cAAI,QAAQ,YAAY,YAAY,SAAS;AAC7C,cAAI,UAAU,MAAM,OAAO,EAAE;AAE7B,kBAAQ,YAAa,0BAAS,cAAc;AAC1C,mBAAO,SAAS,KAAK;AACnB,kBAAI,OAAO,iBAAkB,WAAY,cAAa,EAAE,SAAS,KAAK,CAAC;AAAA,YACzE;AAAA,UACF,GAAG,QAAQ;AAEX,kBAAQ,UAAW,0BAAS,cAAc;AACxC,mBAAO,SAAS,KAAK;AACnB,kBAAI,OAAO,iBAAkB,YAAY;AACvC,6BAAa,EAAE,SAAS,MAAM,CAAC;AAAA,cACjC,OACK;AACH,wBAAQ,MAAM,yCAAyC;AACvD,wBAAQ,MAAM,QAAQ,KAAK;AAAA,cAC7B;AAAA,YACF;AAAA,UACF,GAAG,QAAQ;AAAA,QACb;AAEA,oBAAY,UAAU,aAAa,SAAS,KAAK,UAAU;AACzD,cAAI,cAAc,KAAK,GAAG,YAAY,CAAC,SAAS,GAAG,UAAU;AAC7D,cAAI,QAAQ,YAAY,YAAY,SAAS;AAC7C,cAAI,QAAQ,MAAM,MAAM,KAAK;AAG7B,cAAI,iBAAiB,YAAY,KAAK,GAAG;AAGzC,cAAI,SAAS,MAAM,WAAW,cAAc;AAI5C,cAAI,YAAY,CAAC;AAEjB,iBAAO,YAAa,0BAAS,MAAMC,WAAU;AAC3C,mBAAO,SAAS,GAAG;AACjB,kBAAIC,UAAS,EAAE,OAAO;AACtB,kBAAIA,SAAQ;AACV,oBAAI,aAAaA,QAAO;AAExB,qBAAK,KAAK,UAAU;AAEpB,gBAAAA,QAAO,SAAS;AAAA,cAClB,OACK;AACH,oBAAI,OAAOD,cAAc,YAAY;AACnC,kBAAAA,UAAS,IAAI;AAAA,gBACf,OACK;AACH,0BAAQ,IAAI,IAAI;AAAA,gBAClB;AAAA,cACF;AAAA,YACF;AAAA,UACF,GAAG,WAAW,QAAQ;AAEtB,iBAAO,UAAW,0BAAS,cAAc;AACvC,mBAAO,SAAS,GAAG;AACjB,kBAAI,OAAO,iBAAkB,YAAY;AACvC,6BAAa,IAAI;AAAA,cACnB,OACK;AACH,wBAAQ,MAAM,uCAAuC;AACrD,wBAAQ,MAAM,CAAC;AAAA,cACjB;AAAA,YACF;AAAA,UACF,GAAG,QAAQ;AAAA,QAEb;AAGA,oBAAY,UAAU,aAAa,SAAU,UAAU;AACrD,cAAI,cAAc,KAAK,GAAG,YAAY,CAAC,SAAS,GAAG,UAAU;AAC7D,cAAI,QAAQ,YAAY,YAAY,SAAS;AAC7C,cAAI,SAAS,MAAM,WAAW;AAE9B,cAAI,YAAY,CAAC;AAEjB,iBAAO,YAAa,0BAAS,MAAMA,WAAU;AAC3C,mBAAO,SAAS,GAAG;AACjB,kBAAIC,UAAS,EAAE,OAAO;AACtB,kBAAIA,SAAQ;AACV,oBAAI,aAAaA,QAAO;AAExB,qBAAK,KAAK,UAAU;AAEpB,gBAAAA,QAAO,SAAS;AAAA,cAClB,OACK;AACH,oBAAI,OAAOD,cAAc,YAAY;AACnC,kBAAAA,UAAS,IAAI;AAAA,gBACf,OACK;AACH,0BAAQ,IAAI,IAAI;AAAA,gBAClB;AAAA,cACF;AAAA,YACF;AAAA,UACF,GAAG,WAAW,QAAQ;AAEtB,iBAAO,UAAW,0BAAS,cAAc;AACvC,mBAAO,SAAS,GAAG;AACjB,kBAAI,OAAO,iBAAkB,WAAY,cAAa,IAAI;AAAA,YAC5D;AAAA,UACF,GAAG,QAAQ;AAAA,QAEb;AAEA,eAAO;AAAA,MAET,GAAE;AAAA,IACJ,CAAC;AAAA;AAAA;;;ACvnBD;AAAA;AAMA,KAAC,SAAU,MAAM,SAAS;AACxB,UAAI,OAAO,WAAW,cAAc,OAAO,KAAK;AAE9C,eAAO,CAAC,GAAG,OAAO;AAAA,MACpB,WAAW,OAAO,YAAY,UAAU;AAEtC,eAAO,UAAU,QAAQ;AAAA,MAC3B,OAAO;AAEL,aAAK,OAAO,QAAQ;AAAA,MACtB;AAAA,IACF,GAAE,SAAM,WAAY;AAElB,cAAQ,WAAY;AAClB;AAEA,YAAI,iBAAiB,OAAO,UAAU;AAEtC,iBAAS,WAAW,KAAK;AACvB,cAAI,MAAM;AACV,cAAI,MAAM,QAAQ,GAAG,GAAG;AACtB,iBAAK,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AAC/B,yBAAW,IAAI,CAAC,CAAC;AAAA,YACnB;AACA,mBAAO,GAAG;AAAA,UACZ,WAAW,QAAQ,QAAS,OAAO,QAAQ,UAAW;AACpD,iBAAK,QAAQ,KAAK;AAChB,kBAAI,IAAI,eAAe,IAAI,GAAG;AAC5B,2BAAW,IAAI,IAAI,CAAC;AAAA,cACtB;AAAA,YACF;AACA,mBAAO,GAAG;AAAA,UACZ;AAAA,QACF;AAEA,iBAAS,OAAO,KAAK;AACnB,cAAI,CAAC,OAAO,SAAS,GAAG,GAAG;AACzB,mBAAO,OAAO,GAAG;AAAA,UACnB;AAAA,QACF;AAEA,iBAAS,SAAS,KAAK;AACrB,cAAI,CAAC,OAAO,SAAS,GAAG,GAAG;AACzB,mBAAO;AAAA,UACT;AACA,iBAAO,MAAM,KAAK,SAAS;AAAA,QAC7B;AAEA,YAAI,QAAQ;AAAA,UACV,gBAAgB,SAAU,KAAK,MAAM;AACnC,gBAAI;AACJ,iBAAK,QAAQ,KAAK;AAChB,mBAAK,IAAI,IAAI,IAAI,IAAI;AAAA,YACvB;AAAA,UACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UA0BA,OAAO,SAAU,QAAQ,MAAM,kBAAkB;AAC/C,gBAAI,UAAU,MAAM;AAClB,qBAAO;AAAA,YACT;AACA,gBAAI,CAAC,kBAAkB;AACrB,qBAAO,OAAO,IAAI;AAAA,YACpB;AAEA,gBAAI,OAAQ,SAAU,UAAU;AAC9B,qBAAO,KAAK,MAAM,GAAG;AAAA,YACvB;AAEA,gBAAI,CAAC,MAAM,QAAQ,IAAI,GAAG;AACxB,oBAAM,IAAI,MAAM,2CAA2C,OAAQ,IAAK;AAAA,YAC1E;AAEA,gBAAI,QAAQ,GACV,SAAS,KAAK;AAEhB,mBAAO,UAAU,QAAQ,QAAQ,QAAQ;AACvC,uBAAS,OAAO,KAAK,OAAO,CAAC;AAAA,YAC/B;AACA,mBAAQ,SAAS,SAAS,SAAU,SAAS;AAAA,UAC/C;AAAA,QACF;AAKA,YAAI,cAAc;AAAA,UAChB,KAAK;AAAA,UACL,IAAI;AAAA,UACJ,IAAI;AAAA,QACN;AAWA,iBAAS,UAAU,OAAO,OAAO;AAC/B,cAAI,KAAK,KAAK,IAAI;AAElB,cAAI,UAAU,MAAO,QAAO;AAG5B,cAAI,CAAC,SAAS,CAAC,SAAS,UAAU,QAAQ,UAAU,QAAQ,UAAU,SAAS,UAAU,OAAO;AAE9F,oBAAQ,OAAO;AAAA,cACb,KAAK;AAAW,qBAAK;AAAG;AAAA,cACxB,KAAK;AAAM,qBAAK;AAAG;AAAA,cACnB,KAAK;AAAO,qBAAK;AAAG;AAAA,cACpB,KAAK;AAAM,qBAAK;AAAG;AAAA,cACnB,KAAK;AAAI,qBAAK;AAAG;AAAA,cACjB;AAAS,qBAAM,UAAU,QAAS,IAAI;AAAG;AAAA,YAC3C;AAEA,oBAAQ,OAAO;AAAA,cACb,KAAK;AAAW,qBAAK;AAAG;AAAA,cACxB,KAAK;AAAM,qBAAK;AAAG;AAAA,cACnB,KAAK;AAAO,qBAAK;AAAG;AAAA,cACpB,KAAK;AAAM,qBAAK;AAAG;AAAA,cACnB,KAAK;AAAI,qBAAK;AAAG;AAAA,cACjB;AAAS,qBAAM,UAAU,QAAS,IAAI;AAAG;AAAA,YAC3C;AAGA,gBAAI,OAAO,KAAK,OAAO,GAAG;AACxB,qBAAQ,OAAO;AAAA,YACjB;AAAA,UACF;AAGA,gBAAM,OAAO,KAAK;AAClB,gBAAM,OAAO,KAAK;AAGlB,cAAI,QAAQ,OAAO,QAAQ,KAAK;AAC9B,mBAAQ,QAAQ;AAAA,UAClB;AAGA,gBAAM,MAAM,SAAS;AACrB,gBAAM,MAAM,SAAS;AAErB,iBAAQ,OAAO;AAAA,QACjB;AAOA,iBAAS,SAAS,OAAO,OAAO,OAAO;AACrC,cAAI,KAAK,KAAK,IAAI;AAIlB,cAAI,CAAC,SAAS,CAAC,SAAS,UAAU,QAAQ,UAAU,QAAQ,UAAU,SAAS,UAAU,OAAO;AAC9F,oBAAQ,OAAO;AAAA,cACb,KAAK;AAAW,qBAAK;AAAG;AAAA,cACxB,KAAK;AAAM,qBAAK;AAAG;AAAA,cACnB,KAAK;AAAO,qBAAK;AAAG;AAAA,cACpB,KAAK;AAAM,qBAAK;AAAG;AAAA,cACnB,KAAK;AAAI,qBAAK;AAAG;AAAA;AAAA,cAEjB;AAAS,qBAAM,UAAU,QAAS,IAAI;AAAG;AAAA,YAC3C;AAEA,oBAAQ,OAAO;AAAA,cACb,KAAK;AAAW,qBAAK;AAAG;AAAA,cACxB,KAAK;AAAM,qBAAK;AAAG;AAAA,cACnB,KAAK;AAAO,qBAAK;AAAG;AAAA,cACpB,KAAK;AAAM,qBAAK;AAAG;AAAA,cACnB,KAAK;AAAI,qBAAK;AAAG;AAAA,cACjB;AAAS,qBAAM,UAAU,QAAS,IAAI;AAAG;AAAA,YAC3C;AAGA,gBAAI,OAAO,KAAK,OAAO,GAAG;AACxB,qBAAQ,OAAO,KAAM,QAAS,KAAK;AAAA,YACrC;AAAA,UACF;AAGA,gBAAM,OAAO,KAAK;AAClB,gBAAM,OAAO,KAAK;AAElB,cAAI,QAAQ,OAAO,QAAQ,KAAK;AAC9B,gBAAI,MAAM,IAAK,QAAO;AACtB,gBAAI,MAAM,IAAK,QAAO;AACtB,mBAAO;AAAA,UACT;AAEA,cAAI,QAAQ,OAAO,QAAQ,KAAK;AAC9B,mBAAO;AAAA,UACT;AAEA,cAAI,QAAQ,OAAO,QAAQ,KAAK;AAC9B,mBAAO;AAAA,UACT;AAEA,cAAI,QAAQ,MAAO,QAAO;AAC1B,cAAI,QAAQ,MAAO,QAAO;AAC1B,cAAI,SAAS,MAAO,QAAO;AAG3B,gBAAM,MAAM,SAAS;AACrB,gBAAM,MAAM,SAAS;AAErB,cAAI,MAAM,KAAK;AACb,mBAAO;AAAA,UACT;AAEA,cAAI,OAAO,KAAK;AACd,mBAAO;AAAA,UACT;AAEA,iBAAO;AAAA,QACT;AAEA,iBAAS,SAAS,OAAO,OAAO,OAAO;AACrC,cAAI,KAAK,KAAK,IAAI;AAGlB,cAAI,CAAC,SAAS,CAAC,SAAS,UAAU,QAAQ,UAAU,QAAQ,UAAU,SAAS,UAAU,OAAO;AAC9F,oBAAQ,OAAO;AAAA,cACb,KAAK;AAAW,qBAAK;AAAG;AAAA,cACxB,KAAK;AAAM,qBAAK;AAAG;AAAA,cACnB,KAAK;AAAO,qBAAK;AAAG;AAAA,cACpB,KAAK;AAAM,qBAAK;AAAG;AAAA,cACnB,KAAK;AAAI,qBAAK;AAAG;AAAA;AAAA,cAEjB;AAAS,qBAAM,UAAU,QAAS,IAAI;AAAG;AAAA,YAC3C;AAEA,oBAAQ,OAAO;AAAA,cACb,KAAK;AAAW,qBAAK;AAAG;AAAA,cACxB,KAAK;AAAM,qBAAK;AAAG;AAAA,cACnB,KAAK;AAAO,qBAAK;AAAG;AAAA,cACpB,KAAK;AAAM,qBAAK;AAAG;AAAA,cACnB,KAAK;AAAI,qBAAK;AAAG;AAAA,cACjB;AAAS,qBAAM,UAAU,QAAS,IAAI;AAAG;AAAA,YAC3C;AAGA,gBAAI,OAAO,KAAK,OAAO,GAAG;AACxB,qBAAQ,OAAO,KAAM,QAAS,KAAK;AAAA,YACrC;AAAA,UACF;AAGA,gBAAM,OAAO,KAAK;AAClB,gBAAM,OAAO,KAAK;AAClB,cAAI,QAAQ,OAAO,QAAQ,KAAK;AAC9B,gBAAI,MAAM,IAAK,QAAO;AACtB,gBAAI,MAAM,IAAK,QAAO;AACtB,mBAAO;AAAA,UACT;AAEA,cAAI,QAAQ,OAAO,QAAQ,KAAK;AAC9B,mBAAO;AAAA,UACT;AAEA,cAAI,QAAQ,OAAO,QAAQ,KAAK;AAC9B,mBAAO;AAAA,UACT;AAEA,cAAI,QAAQ,MAAO,QAAO;AAC1B,cAAI,QAAQ,MAAO,QAAO;AAC1B,cAAI,SAAS,MAAO,QAAO;AAI3B,gBAAM,MAAM,SAAS;AACrB,gBAAM,MAAM,SAAS;AAErB,cAAI,MAAM,KAAK;AACb,mBAAO;AAAA,UACT;AAEA,cAAI,OAAO,KAAK;AACd,mBAAO;AAAA,UACT;AAEA,iBAAO;AAAA,QACT;AAEA,iBAAS,WAAW,OAAO,OAAO,MAAM;AACtC,cAAI,YAAY,IAAI,OAAO,KAAK,EAAG,QAAO;AAE1C,cAAI,YAAY,GAAG,OAAO,OAAO,KAAK,GAAG;AACvC,mBAAQ,OAAS,IAAM;AAAA,UACzB;AAEA,cAAI,YAAY,GAAG,OAAO,OAAO,KAAK,GAAG;AACvC,mBAAQ,OAAS,KAAO;AAAA,UAC1B;AAGA,iBAAO;AAAA,QACT;AAUA,iBAAS,aAAa,YAAY,MAAM,MAAM;AAC5C,cAAI,MAAM;AACV,cAAI,MAAM,OAAO,MAAM,MAAM,KAAK;AAClC,mBAAS,IAAI,GAAG,MAAM,WAAW,QAAQ,IAAI,KAAK,KAAK;AACrD,mBAAO,WAAW,CAAC;AACnB,oBAAQ,KAAK,CAAC;AACd,gBAAI,CAAC,MAAM,QAAQ,GAAG,GAAG;AACvB,oBAAM,MAAM,MAAM,GAAG;AACrB,qBAAO,MAAM,MAAM,MAAM,KAAK,IAAI;AAClC,qBAAO,MAAM,MAAM,MAAM,KAAK,IAAI;AAAA,YACpC,OAAO;AACL,qBAAO,KAAK,KAAK;AACjB,qBAAO,KAAK,KAAK;AAAA,YACnB;AACA,kBAAM,WAAW,MAAM,MAAM,KAAK,CAAC,CAAC;AACpC,gBAAI,QAAQ,GAAG;AACb,qBAAO;AAAA,YACT;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAYA,iBAAS,WAAW,MAAM,OAAO,KAAK,OAAO,OAAO,SAAS;AAC3D,cAAI,aAAa,WAAW;AAC5B,cAAI,OAAO,MAAM,UAAU;AAE3B,cAAI,aAAa;AACjB,cAAI;AACJ,cAAI,OAAO,SAAS,YAAY,QAAQ,MAAM;AAC5C,sBAAU,KAAK,IAAI;AAAA,UACrB;AACA,cAAI,aAAa,KAAK,MAAM,QAAQ;AAGlC,yBAAa,IAAI,SAAS,OAAO,KAAK;AAAA,UACxC,WAAW,MAAM,QAAQ,OAAO,GAAG;AACjC,qBAAS,QAAQ,GAAG,MAAM,QAAQ,QAAQ,QAAQ,KAAK,SAAS,GAAG;AACjE,2BAAa,WAAW,QAAQ,KAAK,GAAG,OAAO,KAAK,OAAO,OAAO,aAAa,CAAC;AAChF,kBAAI,eAAe,MAAM;AACvB;AAAA,cACF;AAAA,YACF;AAAA,UACF,OAAO;AACL,yBAAa,WAAW,SAAS,OAAO,KAAK,OAAO,OAAO,aAAa,CAAC;AAAA,UAC3E;AAEA,iBAAO;AAAA,QACT;AAEA,iBAAS,gBAAgB,GAAG;AAC1B,cAAI,OAAO,MAAM,YAAY,MAAM,QAAQ,CAAC,GAAG;AAC7C,mBAAO,SAAU,GAAG;AAClB,qBAAO,EAAE,QAAQ,CAAC,MAAM;AAAA,YAC1B;AAAA,UACF,WAAW,OAAO,MAAM,YAAY,MAAM,MAAM;AAC9C,mBAAO,SAAU,GAAG;AAClB,qBAAO,eAAe,KAAK,GAAG,CAAC;AAAA,YACjC;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAEA,iBAAS,UAAU,KAAK,IAAI,QAAQ;AAClC,mBAAS,KAAK,IAAI;AAChB,gBAAI,eAAe,KAAK,IAAI,CAAC,GAAG;AAC9B,qBAAO,QAAQ,CAAC,EAAE,KAAK,GAAG,CAAC,GAAG,MAAM;AAAA,YACtC;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAEA,YAAI,UAAU;AAAA;AAAA;AAAA;AAAA,UAIZ,KAAK,SAAU,GAAG,GAAG;AACnB,mBAAO,MAAM;AAAA,UACf;AAAA;AAAA,UAGA,MAAM,SAAU,GAAG,GAAG;AACpB,mBAAO,KAAK;AAAA,UACd;AAAA,UAEA,KAAK,SAAU,GAAG,GAAG;AAEnB,gBAAI,MAAM,GAAG;AAEX,qBAAQ,MAAM;AAAA,YAChB;AAEA,mBAAO,MAAM;AAAA,UACf;AAAA;AAAA,UAEA,OAAO,SAAU,GAAG,GAAG;AACrB,mBAAO,YAAY,IAAI,GAAG,CAAC;AAAA,UAC7B;AAAA;AAAA,UAGA,KAAK,SAAU,GAAG,GAAG;AACnB,mBAAO,YAAY,GAAG,GAAG,GAAG,KAAK;AAAA,UACnC;AAAA,UAEA,MAAM,SAAU,GAAG,GAAG;AACpB,mBAAO,YAAY,GAAG,GAAG,GAAG,IAAI;AAAA,UAClC;AAAA,UAEA,KAAK,SAAU,GAAG,GAAG;AACnB,mBAAO,YAAY,GAAG,GAAG,GAAG,KAAK;AAAA,UACnC;AAAA,UAEA,MAAM,SAAU,GAAG,GAAG;AACpB,mBAAO,YAAY,GAAG,GAAG,GAAG,IAAI;AAAA,UAClC;AAAA;AAAA,UAGA,MAAM,SAAU,GAAG,GAAG;AACpB,mBAAO,IAAI;AAAA,UACb;AAAA,UAEA,OAAO,SAAU,GAAG,GAAG;AACrB,mBAAO,KAAK;AAAA,UACd;AAAA,UAEA,MAAM,SAAU,GAAG,GAAG;AACpB,mBAAO,IAAI;AAAA,UACb;AAAA,UAEA,OAAO,SAAU,GAAG,GAAG;AACrB,mBAAO,KAAK;AAAA,UACd;AAAA;AAAA,UAGA,UAAU,SAAU,GAAG,MAAM;AAC3B,gBAAI,MAAM,UAAa,MAAM,KAAM,QAAO;AAC1C,mBAAQ,YAAY,GAAG,GAAG,KAAK,CAAC,GAAG,IAAI,KAAK,YAAY,GAAG,GAAG,KAAK,CAAC,GAAG,IAAI;AAAA,UAC7E;AAAA,UAEA,WAAW,SAAU,GAAG,MAAM;AAC5B,gBAAI,MAAM,UAAa,MAAM,KAAM,QAAO;AAC1C,mBAAQ,KAAK,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC;AAAA,UACrC;AAAA,UAEA,KAAK,SAAU,GAAG,GAAG;AACnB,mBAAO,EAAE,QAAQ,CAAC,MAAM;AAAA,UAC1B;AAAA,UAEA,QAAQ,SAAS,GAAG,GAAG;AACrB,mBAAO,EAAE,IAAI,CAAC;AAAA,UAChB;AAAA,UAEA,MAAM,SAAU,GAAG,GAAG;AACpB,mBAAO,EAAE,QAAQ,CAAC,MAAM;AAAA,UAC1B;AAAA,UAEA,QAAQ,SAAU,GAAG,GAAG;AACtB,mBAAO,KAAK;AAAA,UACd;AAAA,UAEA,SAAS,SAAU,GAAG,GAAG;AACvB,mBAAO,EAAE,KAAK;AAAA,UAChB;AAAA,UAEA,YAAY,SAAU,GAAG,GAAG;AAC1B,mBAAO,EAAE,CAAC,MAAM;AAAA,UAClB;AAAA,UAEA,cAAc,SAAU,GAAG,GAAG;AAC5B,mBAAO,EAAE,CAAC,MAAM;AAAA,UAClB;AAAA,UAEA,QAAQ,SAAU,GAAG,GAAG;AACtB,mBAAO,EAAE,KAAK,CAAC;AAAA,UACjB;AAAA,UAEA,iBAAiB,SAAU,GAAG,GAAG;AAC/B,mBAAQ,OAAO,MAAM,YAAc,EAAE,QAAQ,CAAC,MAAM;AAAA,UACtD;AAAA,UAEA,eAAe,SAAU,GAAG,GAAG;AAC7B,mBAAO,CAAC,QAAQ,aAAa,GAAG,CAAC;AAAA,UACnC;AAAA,UAEA,cAAc,SAAU,GAAG,GAAG;AAC5B,gBAAI,UAAU,gBAAgB,CAAC;AAC/B,gBAAI,YAAY,MAAM;AACpB,qBAAQ,MAAM,QAAQ,CAAC,IAAM,EAAE,KAAK,OAAO,IAAM,QAAQ,CAAC;AAAA,YAC5D;AACA,mBAAO;AAAA,UACT;AAAA,UAEA,WAAW,SAAU,GAAG,GAAG;AACzB,gBAAI,UAAU,gBAAgB,CAAC;AAC/B,gBAAI,YAAY,MAAM;AACpB,qBAAQ,MAAM,QAAQ,CAAC,IAAM,EAAE,MAAM,OAAO,IAAM,QAAQ,CAAC;AAAA,YAC7D;AACA,mBAAO;AAAA,UACT;AAAA,UAEA,YAAY,SAAU,GAAG,GAAG;AAC1B,gBAAI,MAAM,QAAQ,CAAC,GAAG;AACpB,qBAAO,EAAE,KAAK,SAAU,MAAM;AAC5B,uBAAO,OAAO,KAAK,CAAC,EAAE,MAAM,SAAU,UAAU;AAC9C,sBAAI,SAAS,EAAE,QAAQ;AACvB,sBAAI,EAAE,OAAO,WAAW,YAAY,SAAS;AAC3C,6BAAS,EAAE,KAAK,OAAO;AAAA,kBACzB;AAEA,sBAAI,SAAS,QAAQ,GAAG,MAAM,IAAI;AAChC,2BAAO,WAAW,MAAM,SAAS,MAAM,GAAG,GAAG,WAAW,EAAE,QAAQ,GAAG,IAAI;AAAA,kBAC3E;AACA,yBAAO,UAAU,KAAK,QAAQ,GAAG,QAAQ,IAAI;AAAA,gBAC/C,CAAC;AAAA,cACH,CAAC;AAAA,YACH;AACA,mBAAO;AAAA,UACT;AAAA,UAEA,OAAO,SAAU,GAAG,GAAG,QAAQ;AAC7B,gBAAI,OAAO,OAAO;AAClB,gBAAI,SAAS,UAAU;AACrB,kBAAI,MAAM,QAAQ,CAAC,GAAG;AACpB,uBAAO;AAAA,cACT,WAAW,aAAa,MAAM;AAC5B,uBAAO;AAAA,cACT;AAAA,YACF;AACA,mBAAQ,OAAO,MAAM,WAAa,SAAS,IAAK,UAAU,MAAM,GAAG,MAAM;AAAA,UAC3E;AAAA,UAEA,SAAS,SAAU,GAAG,GAAG;AACvB,mBAAQ,MAAM,SAAS,CAAC;AAAA,UAC1B;AAAA,UAEA,OAAO,SAAU,GAAG,GAAG,QAAQ;AAC7B,gBAAI,MAAM,QAAQ,CAAC,GAAG;AACpB,qBAAQ,OAAO,MAAM,WAAa,EAAE,WAAW,IAAK,UAAU,EAAE,QAAQ,GAAG,MAAM;AAAA,YACnF;AACA,mBAAO;AAAA,UACT;AAAA,UAEA,MAAM,SAAU,GAAG,GAAG,QAAQ;AAC5B,gBAAI,OAAO,MAAM,UAAU;AACzB,qBAAQ,OAAO,MAAM,WAAa,EAAE,WAAW,IAAK,UAAU,EAAE,QAAQ,GAAG,MAAM;AAAA,YACnF;AACA,mBAAO;AAAA,UACT;AAAA,UAEA,QAAQ,SAAU,GAAG,GAAG;AACtB,mBAAO,EAAE,CAAC,MAAM;AAAA,UAClB;AAAA;AAAA;AAAA;AAAA;AAAA,UAMA,MAAM,SAAU,GAAG,GAAG,QAAQ;AAC5B,mBAAO,CAAC,UAAU,GAAG,GAAG,MAAM;AAAA,UAChC;AAAA,UAEA,MAAM,SAAU,GAAG,GAAG,QAAQ;AAC5B,qBAAS,MAAM,GAAG,MAAM,EAAE,QAAQ,MAAM,KAAK,OAAO,GAAG;AACrD,kBAAI,CAAC,UAAU,GAAG,EAAE,GAAG,GAAG,MAAM,GAAG;AACjC,uBAAO;AAAA,cACT;AAAA,YACF;AACA,mBAAO;AAAA,UACT;AAAA,UAEA,KAAK,SAAU,GAAG,GAAG,QAAQ;AAC3B,qBAAS,MAAM,GAAG,MAAM,EAAE,QAAQ,MAAM,KAAK,OAAO,GAAG;AACrD,kBAAI,UAAU,GAAG,EAAE,GAAG,GAAG,MAAM,GAAG;AAChC,uBAAO;AAAA,cACT;AAAA,YACF;AACA,mBAAO;AAAA,UACT;AAAA,UAEA,SAAS,SAAU,GAAG,GAAG;AACvB,gBAAI,GAAG;AACL,qBAAO,MAAM;AAAA,YACf,OAAO;AACL,qBAAO,MAAM;AAAA,YACf;AAAA,UACF;AAAA,QACF;AAGA,YAAI,gBAAgB,CAAC,OAAO,QAAQ,OAAO,SAAS,OAAO,QAAQ,OAAO,QAAQ,QAAQ,SAAS,QAAQ,SAAS,OAAO;AAC3H,sBAAc,QAAQ,SAAU,IAAI;AAClC,cAAI,MAAM,QAAQ,EAAE;AACpB,kBAAQ,MAAM,EAAE,IAAI,SAAU,GAAG,MAAM,QAAQ;AAC7C,gBAAI,OAAO,SAAS,UAAU;AAC5B,qBAAO,IAAI,GAAG,OAAO,IAAI,CAAC;AAAA,YAC5B,WAAW,OAAO,SAAS,YAAY;AACrC,qBAAO,IAAI,GAAG,KAAK,MAAM,CAAC;AAAA,YAC5B,OAAO;AACL,oBAAM,IAAI,MAAM,gCAAgC;AAAA,YAClD;AAAA,UACF;AAAA,QACF,CAAC;AAKD,YAAI,aAAa;AAAA,UACf,KAAK,QAAQ;AAAA,UACb,MAAM;AAAA,UACN,OAAO;AAAA,UACP,KAAK;AAAA,UACL,MAAM;AAAA,UACN,KAAK;AAAA,UACL,MAAM;AAAA,UACN,KAAK;AAAA,UACL,UAAU;AAAA,QACZ;AAEA,iBAAS,MAAM,MAAM,QAAQ;AAC3B,cAAI,SAAS,QAAQ,SAAS,QAAW;AACvC,mBAAO;AAAA,UACT;AAEA,cAAI,cAAc,UAAU,mBAC1B;AAEF,kBAAQ,aAAa;AAAA,YACnB,KAAK;AACH,uBAAS,KAAK,MAAM,KAAK,UAAU,IAAI,CAAC;AACxC;AAAA;AAAA,YAIF;AACE;AAAA,UACJ;AAEA,iBAAO;AAAA,QACT;AAEA,iBAAS,iBAAiB,UAAU,QAAQ;AAC1C,cAAI,UAAU,mBAAmB;AAC/B,mBAAO,MAAM,UAAU,MAAM;AAAA,UAC/B;AACA,cAAI,SAAS,CAAC;AACd,mBAAS,IAAI,GAAG,MAAM,SAAS,QAAQ,IAAI,KAAK,KAAK;AACnD,mBAAO,CAAC,IAAI,MAAM,SAAS,CAAC,GAAG,MAAM;AAAA,UACvC;AACA,iBAAO;AAAA,QACT;AAaA,iBAAS,mBAAmB;AAAA,QAAE;AAM9B,yBAAiB,UAAU,SAAS,CAAC;AAQrC,yBAAiB,UAAU,iBAAiB;AAS5C,yBAAiB,UAAU,KAAK,SAAU,WAAW,UAAU;AAC7D,cAAI;AACJ,cAAIE,QAAO;AAEX,cAAI,MAAM,QAAQ,SAAS,GAAG;AAC5B,sBAAU,QAAQ,SAAU,kBAAkB;AAC5C,cAAAA,MAAK,GAAG,kBAAkB,QAAQ;AAAA,YACpC,CAAC;AACD,mBAAO;AAAA,UACT;AAEA,kBAAQ,KAAK,OAAO,SAAS;AAC7B,cAAI,CAAC,OAAO;AACV,oBAAQ,KAAK,OAAO,SAAS,IAAI,CAAC;AAAA,UACpC;AACA,gBAAM,KAAK,QAAQ;AACnB,iBAAO;AAAA,QACT;AAUA,yBAAiB,UAAU,OAAO,SAAU,WAAW;AACrD,cAAIA,QAAO;AACX,cAAI;AACJ,cAAI,aAAa,KAAK,OAAO,SAAS,GAAG;AACvC,gBAAI,KAAK,OAAO,SAAS,EAAE,QAAQ;AACjC,yBAAW,MAAM,UAAU,MAAM,KAAK,WAAW,CAAC;AAClD,mBAAK,OAAO,SAAS,EAAE,QAAQ,SAAU,UAAU;AACjD,oBAAIA,MAAK,gBAAgB;AACvB,6BAAW,WAAY;AACrB,6BAAS,MAAMA,OAAM,QAAQ;AAAA,kBAC/B,GAAG,CAAC;AAAA,gBACN,OAAO;AACL,2BAAS,MAAMA,OAAM,QAAQ;AAAA,gBAC/B;AAAA,cACF,CAAC;AAAA,YACH;AAAA,UACF,OAAO;AACL,kBAAM,IAAI,MAAM,cAAc,YAAY,UAAU;AAAA,UACtD;AAAA,QACF;AAUA,yBAAiB,UAAU,cAAc,iBAAiB,UAAU;AAQpE,yBAAiB,UAAU,iBAAiB,SAAU,WAAW,UAAU;AACzE,cAAIA,QAAO;AAEX,cAAI,MAAM,QAAQ,SAAS,GAAG;AAC5B,sBAAU,QAAQ,SAAU,kBAAkB;AAC5C,cAAAA,MAAK,eAAe,kBAAkB,QAAQ;AAAA,YAChD,CAAC;AAED;AAAA,UACF;AAEA,cAAI,KAAK,OAAO,SAAS,GAAG;AAC1B,gBAAI,YAAY,KAAK,OAAO,SAAS;AACrC,sBAAU,OAAO,UAAU,QAAQ,QAAQ,GAAG,CAAC;AAAA,UACjD;AAAA,QACF;AAoBA,iBAAS,KAAK,UAAU,SAAS;AAC/B,eAAK,WAAW,YAAY;AAC5B,eAAK,cAAc,CAAC;AAIpB,eAAK,kBAAkB;AACvB,eAAK,gBAAgB;AAIrB,eAAK,WAAW;AAChB,eAAK,mBAAmB;AACxB,eAAK,iBAAiB;AACtB,eAAK,iBAAiB;AAEtB,eAAK,UAAU,CAAC;AAShB,eAAK,oBAAoB;AAGzB,eAAK,qBAAqB;AAG1B,eAAK,uBAAuB;AAC5B,eAAK,qBAAqB,CAAC;AAG3B,eAAK,UAAU,WAAW,QAAQ,eAAe,SAAS,IAAI,QAAQ,UAAU;AAEhF,eAAK,SAAS;AAAA,YACZ,QAAQ,CAAC;AAAA,YACT,UAAU,CAAC;AAAA,YACX,gBAAgB,CAAC;AAAA,YACjB,SAAS,CAAC;AAAA,YACV,WAAW,CAAC;AAAA,YACZ,WAAW,CAAC;AAAA,UACd;AAMA,eAAK,iBAAiB,SAAS,IAAI;AAAA,QAKrC;AAGA,aAAK,YAAY,IAAI,iBAAiB;AACtC,aAAK,UAAU,cAAc;AAwB7B,aAAK,UAAU,mBAAmB,SAAU,SAAS,eAAe;AAClE,cAAI,qBAAqB;AAAA,YACvB,UAAU;AAAA,YACV,WAAW;AAAA,YACX,WAAW;AAAA,YACX,UAAU;AAAA,UACZ,GACE,qBAAqB;AAAA;AAAA,YAInB,UAAU;AAAA,UACZ;AAEF,eAAK,UAAU,CAAC;AAEhB,eAAK,oBAAoB;AAGzB,eAAK,qBAAqB;AAG1B,cAAI,OAAQ,YAAa,aAAa;AACpC,iBAAK,UAAU;AAEf,gBAAI,KAAK,QAAQ,eAAe,mBAAmB,GAAG;AAEpD,kBAAI,OAAQ,mBAAmB,QAAQ,iBAAiB,KAAM,YAAY;AACxE,qBAAK,oBAAoB,QAAQ;AACjC,qBAAK,qBAAqB,IAAI,mBAAmB,QAAQ,iBAAiB,EAAE;AAAA,cAC9E;AAAA,YAEF;AAGA,gBAAI,KAAK,QAAQ,eAAe,SAAS,GAAG;AAC1C,mBAAK,oBAAoB;AACzB,mBAAK,qBAAqB,QAAQ;AAClC,mBAAK,QAAQ,UAAU;AAGvB,mBAAK,gBAAgB,KAAK,mBAAmB,SAAS;AAAA,YACxD;AAIA,gBAAI,QAAQ,YAAY,eAAe;AAErC,kBAAIA,QAAO;AACX,yBAAW,WAAY;AACrB,gBAAAA,MAAK,aAAa,SAAS,QAAQ,gBAAgB;AAAA,cACrD,GAAG,CAAC;AAAA,YACN;AAEA,gBAAI,KAAK,QAAQ,eAAe,kBAAkB,GAAG;AACnD,mBAAK,gBAAgB;AACrB,mBAAK,mBAAmB,SAAS,KAAK,QAAQ,kBAAkB,EAAE;AAAA,YACpE;AAEA,gBAAI,KAAK,QAAQ,eAAe,UAAU,KAAK,KAAK,QAAQ,UAAU;AACpE,mBAAK,gBAAgB;AACrB,mBAAK,WAAW;AAEhB,kBAAI,KAAK,QAAQ,eAAe,kBAAkB,GAAG;AACnD,qBAAK,eAAe,SAAS,QAAQ,gBAAgB;AAAA,cACvD,OAAO;AACL,qBAAK,eAAe;AAAA,cACtB;AAAA,YACF;AAEA,gBAAI,KAAK,QAAQ,eAAe,gBAAgB,GAAG;AACjD,mBAAK,iBAAiB,KAAK,QAAQ;AAAA,YACrC;AAAA,UACF;AAGA,cAAI,CAAC,KAAK,QAAQ,eAAe,qBAAqB,GAAG;AACvD,iBAAK,QAAQ,sBAAsB;AAAA,UACrC;AAGA,cAAI,CAAC,KAAK,QAAQ,eAAe,sBAAsB,GAAG;AACxD,iBAAK,QAAQ,uBAAuB;AAAA,UACtC;AAGA,cAAI,KAAK,uBAAuB,MAAM;AACpC,iBAAK,oBAAoB,mBAAmB,KAAK,GAAG;AACpD,gBAAI,KAAK,mBAAmB;AAC1B,mBAAK,qBAAqB,IAAI,mBAAmB,KAAK,iBAAiB,EAAE;AAAA,YAC3E;AAAA,UACF;AAAA,QAEF;AASA,aAAK,UAAU,OAAO,SAAU,SAAS;AAEvC,cAAI,eAAe,IAAI,KAAK,KAAK,UAAU,EAAE,KAAK,KAAK,CAAC;AACxD,cAAI,MAAM;AAEV,oBAAU,WAAW,CAAC;AAGtB,uBAAa,eAAe,MAAM,EAAE,kBAAkB,KAAK,CAAC;AAG5D,cAAI,QAAQ,eAAe,uBAAuB,KAAK,QAAQ,0BAA0B,MAAM;AAC7F,yBAAa,iBAAiB;AAC9B,yBAAa,qBAAqB;AAElC,mBAAO,aAAa,YAAY;AAChC,iBAAK,MAAM,GAAG,MAAM,MAAM,OAAO;AAC/B,2BAAa,YAAY,GAAG,EAAE,cAAc;AAC5C,2BAAa,YAAY,GAAG,EAAE,MAAM;AAAA,YACtC;AAAA,UACF;AAEA,iBAAO;AAAA,QACT;AAqBA,aAAK,UAAU,gBAAgB,SAAU,MAAM,SAAS;AACtD,cAAI,GACF,MAAM,KAAK,YAAY;AAMzB,eAAK,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC3B,gBAAI,KAAK,YAAY,CAAC,EAAE,SAAS,MAAM;AACrC,qBAAO,KAAK,YAAY,CAAC;AAAA,YAC3B;AAAA,UACF;AAEA,cAAI,aAAa,IAAI,WAAW,MAAM,OAAO;AAC7C,qBAAW,gBAAgB,KAAK;AAChC,eAAK,YAAY,KAAK,UAAU;AAEhC,cAAI,KAAK;AACP,uBAAW,qBAAqB;AAElC,iBAAO;AAAA,QACT;AAEA,aAAK,UAAU,iBAAiB,SAAU,YAAY;AACpD,cAAI,CAAC,WAAW,MAAM;AACpB,kBAAM,IAAI,MAAM,mDAAmD;AAAA,UACrE;AACA,eAAK,YAAY,KAAK,UAAU;AAAA,QAClC;AAQA,aAAK,UAAU,gBAAgB,SAAU,gBAAgB;AACvD,cAAI,GACF,MAAM,KAAK,YAAY;AAEzB,eAAK,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC3B,gBAAI,KAAK,YAAY,CAAC,EAAE,SAAS,gBAAgB;AAC/C,qBAAO,KAAK,YAAY,CAAC;AAAA,YAC3B;AAAA,UACF;AAGA,eAAK,KAAK,WAAW,gBAAgB,iBAAiB,YAAY;AAClE,iBAAO;AAAA,QACT;AASA,aAAK,UAAU,mBAAmB,SAAU,SAAS,SAAS;AAC5D,cAAI,IAAI,KAAK,cAAc,OAAO;AAElC,cAAI,GAAG;AACL,cAAE,OAAO;AAAA,UACX;AAEA,iBAAO;AAAA,QACT;AASA,aAAK,UAAU,mBAAmB,SAAU,gBAAgB;AAC1D,cAAI,GACF,MAAM,KAAK,YAAY;AAEzB,eAAK,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC3B,gBAAI,KAAK,YAAY,CAAC,EAAE,SAAS,gBAAgB;AAC/C,kBAAI,SAAS,IAAI,WAAW,gBAAgB,CAAC,CAAC;AAC9C,kBAAI,SAAS,KAAK,YAAY,CAAC;AAC/B,uBAAS,QAAQ,QAAQ;AACvB,oBAAI,OAAO,eAAe,IAAI,KAAK,OAAO,eAAe,IAAI,GAAG;AAC9D,yBAAO,IAAI,IAAI,OAAO,IAAI;AAAA,gBAC5B;AAAA,cACF;AACA,mBAAK,YAAY,OAAO,GAAG,CAAC;AAC5B;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAEA,aAAK,UAAU,UAAU,WAAY;AACnC,iBAAO,KAAK;AAAA,QACd;AAMA,aAAK,UAAU,oBAAoB,SAAU,KAAK,OAAO;AACvD,kBAAQ,KAAK;AAAA,YACX,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH,qBAAO;AAAA,YACT,KAAK;AAAA,YACL,KAAK;AACH,qBAAO;AAAA,YACT,KAAK;AACH,qBAAO;AAAA,YACT;AACE,qBAAO;AAAA,UACX;AAAA,QACF;AAQA,aAAK,UAAU,YAAY,SAAU,SAAS;AAC5C,oBAAU,WAAW,CAAC;AAEtB,cAAI,CAAC,QAAQ,eAAe,qBAAqB,GAAG;AAClD,oBAAQ,sBAAsB,KAAK,QAAQ;AAAA,UAC7C;AAEA,kBAAQ,QAAQ,qBAAqB;AAAA,YACnC,KAAK;AAAU,qBAAO,KAAK,UAAU,MAAM,KAAK,iBAAiB;AAAA,YACjE,KAAK;AAAU,qBAAO,KAAK,UAAU,MAAM,KAAK,mBAAmB,CAAC;AAAA,YACpE,KAAK;AAAgB,qBAAO,KAAK,sBAAsB;AAAA;AAAA,YACvD;AAAS,qBAAO,KAAK,UAAU,MAAM,KAAK,iBAAiB;AAAA,UAC7D;AAAA,QACF;AAGA,aAAK,UAAU,SAAS,KAAK,UAAU;AAYvC,aAAK,UAAU,WAAW,SAAU,cAAc,SAAS;AACzD,cAAI;AACJ,cAAI,aAAa,WAAW,GAAG;AAC7B,uBAAW,CAAC;AAAA,UACd,OAAO;AAGL,oBAAQ,KAAK,QAAQ,qBAAqB;AAAA,cACxC,KAAK;AAAA,cACL,KAAK;AAAU,2BAAW,KAAK,MAAM,YAAY;AAAG;AAAA,cACpD,KAAK;AAAgB,2BAAW,KAAK,wBAAwB,YAAY;AAAG;AAAA,cAC5E;AAAS,2BAAW,KAAK,MAAM,YAAY;AAAG;AAAA,YAChD;AAAA,UACF;AAEA,eAAK,eAAe,UAAU,OAAO;AAAA,QACvC;AAUA,aAAK,UAAU,iBAAiB,SAAU,UAAU,SAAS;AAC3D,cAAI,IAAI,GACN,MAAM,SAAS,cAAc,SAAS,YAAY,SAAS,GAC3D,MACA,UACA,MACA,GACA,QACA;AAEF,eAAK,OAAO,SAAS;AAGrB,cAAI,SAAS,eAAe,gBAAgB,KAAK,WAAW,CAAC,QAAQ,eAAe,gBAAgB,GAAG;AACrG,iBAAK,iBAAiB,SAAS;AAAA,UACjC;AAEA,eAAK,cAAc,CAAC;AAEpB,mBAAS,WAAWC,OAAM;AACxB,gBAAI,cAAc,QAAQA,MAAK,IAAI;AACnC,gBAAI;AAEJ,gBAAI,YAAY,OAAO;AACrB,yBAAW,YAAY,WAAW,MAAM;AAExC,qBAAO,SAAU,MAAM;AACrB,oBAAIC,WAAU,IAAK,YAAY,MAAO;AACtC,yBAAS,MAAMA,QAAO;AACtB,uBAAOA;AAAA,cACT;AAAA,YACF;AAEA,mBAAO,YAAY;AAAA,UACrB;AAEA,eAAK,GAAG,IAAI,KAAK,KAAK,GAAG;AACvB,mBAAO,SAAS,YAAY,CAAC;AAE7B,uBAAW,KAAK,cAAc,KAAK,MAAM;AAAA,cACvC,mBAAmB,KAAK;AAAA,cACxB,wBAAwB,KAAK;AAAA,cAC7B,aAAa,KAAK;AAAA,cAClB,eAAe,KAAK,eAAe,eAAe,IAAI,KAAK,gBAAgB;AAAA,YAC7E,CAAC;AAED,qBAAS,wBAAwB,KAAK,eAAe,uBAAuB,IAAK,KAAK,0BAA0B,OAAQ;AACxH,qBAAS,gBAAgB,KAAK;AAC9B,qBAAS,iBAAiB,KAAK;AAC/B,qBAAS,eAAe,KAAK;AAC7B,qBAAS,cAAc,KAAK,eAAe;AAC3C,qBAAS,aAAa,KAAK;AAC3B,qBAAS,UAAU,KAAK;AACxB,qBAAS,WAAW,KAAK,YAAY,CAAC;AAEtC,gBAAI,WAAW,QAAQ,qBAAqB,MAAM;AAChD,uBAAS,QAAQ,KAAK;AAAA,YACxB,OACK;AACH,uBAAS,QAAQ;AAAA,YACnB;AAEA,gBAAI,KAAK,SAAS;AAChB,kBAAK,WAAW,QAAQ,eAAe,KAAK,IAAI,KAAM,CAAC,SAAS,iBAAiB,SAAS,YAAY;AACpG,sBAAM,IAAI,MAAM,8CAA8C,KAAK,IAAI;AAAA,cACzE;AACA,uBAAS,UAAU,KAAK;AACxB,qBAAO,eAAe,UAAU,QAAQ;AAAA;AAAA,gBAEtC,KAAK,WAAW;AACd,sBAAI,OAAO,KAAK,QAAQ;AACxB,uBAAK,UAAU;AACf,yBAAO,eAAe,MAAM,QAAQ,EAAE,OAAO,KAAK,CAAC;AACnD,yBAAO;AAAA,gBACT;AAAA;AAAA,cAEF,CAAC;AAAA,YACH,OAAO;AAEL,qBAAO,KAAK,KAAK;AACjB,kBAAI;AACJ,kBAAI,WAAW,QAAQ,eAAe,KAAK,IAAI,GAAG;AAChD,yBAAS,WAAW,IAAI;AAExB,qBAAK,GAAG,IAAI,MAAM,KAAK;AACrB,4BAAU,OAAO,KAAK,KAAK,CAAC,CAAC;AAC7B,2BAAS,KAAK,CAAC,IAAI;AACnB,2BAAS,sBAAsB,OAAO;AACtC,sBAAI,CAAC,SAAS,eAAe;AAC3B,+BAAW,SAAS,KAAK,CAAC,CAAC;AAAA,kBAC7B;AAAA,gBACF;AAAA,cACF,OAAO;AACL,qBAAK,GAAG,IAAI,MAAM,KAAK;AACrB,2BAAS,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC;AAC9B,2BAAS,sBAAsB,SAAS,KAAK,CAAC,CAAC;AAC/C,sBAAI,CAAC,SAAS,eAAe;AAC3B,+BAAW,SAAS,KAAK,CAAC,CAAC;AAAA,kBAC7B;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAEA,qBAAS,QAAS,OAAO,KAAK,UAAU,cAAe,IAAI,KAAK;AAChE,gBAAI,OAAQ,KAAK,kBAAmB,aAAa;AAC/C,uBAAS,gBAAgB,KAAK;AAAA,YAChC;AACA,gBAAI,OAAO,KAAK,eAAe,aAAa;AAC1C,uBAAS,aAAa,KAAK;AAAA,YAC7B;AAGA,qBAAS,cAAc,CAAC;AACxB,gBAAI,KAAK,eAAe,aAAa,GAAG;AACtC,uBAAS,cAAc,KAAK;AAAA,YAC9B;AAOA,gBAAI,SAAS,kBAAkB,KAAK;AAElC,uBAAS,iBAAiB,IAAI;AAC9B,uBAAS,QAAQ;AAAA,YACnB;AAAA,UACF;AAAA,QACF;AASA,aAAK,UAAU,QAAQ,SAAU,UAAU;AAGzC,cAAI,KAAK,UAAU;AACjB,iBAAK,gBAAgB;AACrB,gBAAI,KAAK,cAAc,GAAG;AACxB,mBAAK,aAAa,QAAQ;AAC1B,yBAAW;AAAA,YACb;AAAA,UACF;AAEA,cAAI,UAAU;AACZ,iBAAK,GAAG,SAAS,QAAQ;AAAA,UAC3B;AACA,eAAK,KAAK,OAAO;AAAA,QACnB;AAwBA,iBAAS,kBAAkB,SAAS;AAClC,eAAK,YAAY,CAAC;AAClB,eAAK,UAAU,WAAW,CAAC;AAE3B,cAAI,CAAC,KAAK,QAAQ,eAAe,gBAAgB,GAAG;AAClD,iBAAK,QAAQ,iBAAiB;AAAA,UAChC;AAEA,cAAI,CAAC,KAAK,QAAQ,eAAe,cAAc,GAAG;AAChD,iBAAK,QAAQ,eAAe;AAAA,UAC9B;AAAA,QACF;AAUA,0BAAkB,UAAU,eAAe,SAAU,QAAQ,UAAU;AACrE,cAAIF,QAAO;AAEX,cAAI,KAAK,QAAQ,gBAAgB;AAC/B,uBAAW,WAAY;AACrB,kBAAIA,MAAK,UAAU,eAAe,MAAM,GAAG;AACzC,yBAASA,MAAK,UAAU,MAAM,EAAE,KAAK;AAAA,cACvC,OACK;AAEH,yBAAS,IAAI;AAAA,cACf;AAAA,YACF,GAAG,KAAK,QAAQ,YAAY;AAAA,UAC9B,OACK;AACH,gBAAI,KAAK,UAAU,eAAe,MAAM,GAAG;AAEzC,uBAAS,KAAK,UAAU,MAAM,EAAE,KAAK;AAAA,YACvC,OACK;AACH,uBAAS,IAAI;AAAA,YACf;AAAA,UACF;AAAA,QACF;AAUA,0BAAkB,UAAU,eAAe,SAAU,QAAQ,UAAU,UAAU;AAC/E,cAAIA,QAAO;AACX,cAAI;AAEJ,cAAI,KAAK,QAAQ,gBAAgB;AAC/B,uBAAW,WAAY;AACrB,0BAAaA,MAAK,UAAU,eAAe,MAAM,IAAIA,MAAK,UAAU,MAAM,EAAE,YAAY;AAExF,cAAAA,MAAK,UAAU,MAAM,IAAI;AAAA,gBACvB,WAAW,YAAY;AAAA,gBACvB,UAAU,oBAAI,KAAK;AAAA,gBACnB,OAAO;AAAA,cACT;AAEA,uBAAS;AAAA,YACX,GAAG,KAAK,QAAQ,YAAY;AAAA,UAC9B,OACK;AACH,wBAAa,KAAK,UAAU,eAAe,MAAM,IAAI,KAAK,UAAU,MAAM,EAAE,YAAY;AAExF,iBAAK,UAAU,MAAM,IAAI;AAAA,cACvB,WAAW,YAAY;AAAA,cACvB,UAAU,oBAAI,KAAK;AAAA,cACnB,OAAO;AAAA,YACT;AAEA,qBAAS;AAAA,UACX;AAAA,QACF;AASA,0BAAkB,UAAU,iBAAiB,SAAU,QAAQ,UAAU;AACvE,cAAI,KAAK,UAAU,eAAe,MAAM,GAAG;AACzC,mBAAO,KAAK,UAAU,MAAM;AAAA,UAC9B;AAEA,cAAI,OAAO,aAAa,YAAY;AAClC,qBAAS;AAAA,UACX;AAAA,QACF;AAcA,aAAK,UAAU,qBAAqB,SAAU,UAAU,SAAS;AAC/D,cAAIA,QAAO;AACX,cAAI,OAAO,oBAAI,KAAK,GAAG,QAAQ;AAE/B,cAAI,CAAC,KAAK,gBAAgB;AACxB,qBAAS,IAAI;AAAA,UACf;AAEA,oBAAU,WAAW,CAAC;AACtB,cAAI,CAAC,QAAQ,eAAe,eAAe,GAAG;AAC5C,oBAAQ,gBAAgB;AAAA,UAC1B;AACA,cAAI,CAAC,QAAQ,eAAe,oBAAoB,GAAG;AACjD,oBAAQ,qBAAqB;AAAA,UAC/B;AACA,cAAI,CAAC,QAAQ,eAAe,4BAA4B,GAAG;AACzD,oBAAQ,6BAA6B;AAAA,UACvC;AACA,cAAI,CAAC,QAAQ,eAAe,SAAS,GAAG;AACtC,oBAAQ,WAAW,oBAAI,KAAK,GAAG,QAAQ;AAAA,UACzC;AAGA,cAAI,KAAK,kBAAkB,KAAK,sBAAsB;AAEpD,gBAAI,QAAQ,eAAe;AAEzB,mBAAK,mBAAmB,KAAK,WAAY;AAEvC,oBAAIA,MAAK,sBAAsB;AAE7B,sBAAI,QAAQ,sBAAuB,MAAM,QAAQ,UAAU,QAAQ,4BAA6B;AAC9F,6BAAS,KAAK;AACd;AAAA,kBACF;AAEA,kBAAAA,MAAK,mBAAmB,UAAU,OAAO;AACzC;AAAA,gBACF,OAEK;AACH,2BAAS,IAAI;AACb;AAAA,gBACF;AAAA,cACF,CAAC;AAAA,YACH,OAEK;AACH,mBAAK,mBAAmB,KAAK,QAAQ;AACrC;AAAA,YACF;AAAA,UACF,OAEK;AACH,qBAAS,IAAI;AAAA,UACf;AAAA,QACF;AAQA,aAAK,UAAU,uBAAuB,SAAU,SAAS,UAAU;AACjE,cAAI,OAAO,YAAY,SAAU,KAAK,MAAM;AAC1C,gBAAI,KAAK;AACP,oBAAM;AAAA,YACR;AAAA,UACF,GACEA,QAAO;AAGT,cAAI,KAAK,uBAAuB,MAAM;AAEpC,iBAAK,mBAAmB,aAAa,KAAK,UAAU,SAAS,qBAAqB,UAAU;AAC1F,kBAAI,OAAQ,aAAc,UAAU;AAClC,oBAAI,eAAe;AACnB,oBAAI;AACF,kBAAAA,MAAK,SAAS,UAAU,WAAW,CAAC,CAAC;AACrC,iCAAe;AAAA,gBACjB,SAAS,KAAK;AACZ,uBAAK,GAAG;AAAA,gBACV;AACA,oBAAI,cAAc;AAChB,uBAAK,IAAI;AACT,kBAAAA,MAAK,KAAK,UAAU,cAAcA,MAAK,WAAW,SAAS;AAAA,gBAC7D;AAAA,cACF,OAAO;AAEL,oBAAI,CAAC,UAAU;AACb,uBAAK,IAAI;AACT,kBAAAA,MAAK,KAAK,UAAU,oBAAoBA,MAAK,WAAW,SAAS;AACjE;AAAA,gBACF;AAGA,oBAAI,oBAAoB,OAAO;AAC7B,uBAAK,QAAQ;AACb;AAAA,gBACF;AAGA,oBAAI,OAAQ,aAAc,UAAU;AAClC,kBAAAA,MAAK,eAAe,UAAU,WAAW,CAAC,CAAC;AAC3C,uBAAK,IAAI;AACT,kBAAAA,MAAK,KAAK,UAAU,cAAcA,MAAK,WAAW,SAAS;AAC3D;AAAA,gBACF;AAEA,qBAAK,mCAAmC,QAAQ;AAAA,cAClD;AAAA,YACF,CAAC;AAAA,UAEH,OAAO;AACL,iBAAK,IAAI,MAAM,mCAAmC,CAAC;AAAA,UACrD;AAAA,QACF;AA0BA,aAAK,UAAU,eAAe,SAAU,SAAS,UAAU;AACzD,cAAIA,QAAO;AAGX,cAAI,CAAC,KAAK,gBAAgB;AACxB,iBAAK,qBAAqB,SAAS,QAAQ;AAC3C;AAAA,UACF;AAGA,eAAK,mBAAmB,SAAU,SAAS;AACzC,gBAAI,SAAS;AAEX,cAAAA,MAAK,uBAAuB;AAE5B,cAAAA,MAAK,qBAAqB,SAAS,SAAU,KAAK;AAEhD,oBAAIA,MAAK,mBAAmB,WAAW,GAAG;AACxC,kBAAAA,MAAK,uBAAuB;AAAA,gBAC9B,OAEK;AACH,kBAAAA,MAAK,aAAa;AAAA,gBACpB;AAEA,oBAAI,OAAO,aAAa,YAAY;AAClC,2BAAS,GAAG;AAAA,gBACd;AAAA,cACF,CAAC;AACD;AAAA,YACF,OACK;AACH,kBAAI,OAAO,aAAa,YAAY;AAClC,yBAAS,IAAI,MAAM,8DAA8D,CAAC;AAAA,cACpF;AAAA,YACF;AAAA,UACF,GAAG,OAAO;AAAA,QACZ;AAKA,aAAK,UAAU,uBAAuB,SAAU,UAAU;AACxD,cAAI,OAAO,YAAY,SAAU,KAAK;AACpC,gBAAI,KAAK;AACP,oBAAM;AAAA,YACR;AACA;AAAA,UACF;AACA,cAAIA,QAAO;AAGX,cAAI,CAAC,KAAK,oBAAoB;AAC5B,iBAAK,IAAI,MAAM,mCAAmC,CAAC;AACnD;AAAA,UACF;AAGA,cAAI,KAAK,mBAAmB,SAAS,eAAe;AAClD,gBAAI;AAGJ,iBAAK,iBAAiB;AACtB,iBAAK,mBAAmB;AAAA,cACtB,KAAK;AAAA,cACL,SAAS,cAAc;AACrB,gBAAAA,MAAK,iBAAiB;AACtB,oBAAI,aAAa;AACf,uBAAK,IAAI,MAAM,mDAAmD,CAAC;AACnE;AAAA,gBACF;AACA,oBAAI,WAAWA,MAAK,KAAK,EAAE,uBAAuB,KAAK,CAAC;AAIxD,8BAAcA,MAAK,YAAY,IAAI,SAAU,YAAY;AACvD,yBAAO,CAAC,WAAW,OAAO,WAAW,QAAQ;AAAA,gBAC/C,CAAC;AACD,gBAAAA,MAAK,YAAY,QAAQ,SAAU,KAAK;AACtC,sBAAI,QAAQ;AACZ,sBAAI,WAAW,CAAC;AAAA,gBAClB,CAAC;AACD,uBAAO;AAAA,cACT;AAAA,cACA,SAAS,uBAAuB,KAAK;AACnC,gBAAAA,MAAK,iBAAiB;AACtB,oBAAI,OAAO,aAAa;AAEtB,kBAAAA,MAAK,YAAY,QAAQ,SAAU,KAAK,GAAG;AACzC,wBAAI,SAAS,YAAY,CAAC;AAC1B,wBAAI,QAAQ,IAAI,SAAS,OAAO,CAAC;AACjC,wBAAI,WAAW,IAAI,SAAS,OAAO,OAAO,CAAC,CAAC;AAAA,kBAC9C,CAAC;AAAA,gBACH;AACA,qBAAK,GAAG;AAAA,cACV;AAAA,YAAC;AAAA,UACL,WAAW,KAAK,mBAAmB,SAAS,eAAe,OAAO,KAAK,mBAAmB,mBAAmB,YAAY;AAGvH,iBAAK,mBAAmB,eAAe,KAAK,UAAU,KAAK,KAAK,EAAE,uBAAuB,KAAK,CAAC,GAAG,SAAS,uBAAuB,KAAK;AACrI,cAAAA,MAAK,mBAAmB;AACxB,mBAAK,GAAG;AAAA,YACV,CAAC;AAAA,UACH,OAEK;AAIH,iBAAK,mBAAmB;AACxB,iBAAK,mBAAmB,aAAa,KAAK,UAAU,KAAK,UAAU,GAAG,SAAS,qBAAqB,KAAK;AACvG,mBAAK,GAAG;AAAA,YACV,CAAC;AAAA,UACH;AAAA,QACF;AAqBA,aAAK,UAAU,eAAe,SAAU,UAAU;AAChD,cAAI,CAAC,KAAK,gBAAgB;AACxB,iBAAK,qBAAqB,QAAQ;AAClC;AAAA,UACF;AAEA,cAAI,KAAK,sBAAsB;AAC7B,iBAAK,mBAAmB,KAAK,QAAQ;AACrC;AAAA,UACF;AAEA,cAAI,iBAAiB,KAAK;AAC1B,eAAK,qBAAqB,CAAC;AAC3B,yBAAe,QAAQ,QAAQ;AAC/B,eAAK,uBAAuB;AAE5B,cAAIA,QAAO;AACX,eAAK,qBAAqB,SAAU,KAAK;AACvC,YAAAA,MAAK,uBAAuB;AAC5B,2BAAe,QAAQ,SAAU,KAAK;AACpC,kBAAI,OAAO,QAAQ,YAAY;AAE7B,2BAAW,WAAY;AACrB,sBAAI,GAAG;AAAA,gBACT,GAAG,CAAC;AAAA,cACN;AAAA,YACF,CAAC;AAGD,gBAAIA,MAAK,mBAAmB,SAAS,GAAG;AACtC,cAAAA,MAAK,aAAa;AAAA,YACpB;AAAA,UACF,CAAC;AAAA,QACH;AAGA,aAAK,UAAU,OAAO,KAAK,UAAU;AAWrC,aAAK,UAAU,iBAAiB,SAAU,SAAS,UAAU;AAC3D,cAAI,OAAO,YAAY,SAAU,KAAK,MAAM;AAC1C,gBAAI,KAAK;AACP,oBAAM;AAAA,YACR;AAAA,UACF;AAIA,cAAI,OAAO,YAAY,cAAc,CAAC,UAAU;AAC9C,mBAAO;AAAA,UACT;AAGA,cAAI,KAAK,uBAAuB,MAAM;AACpC,iBAAK,mBAAmB,eAAe,KAAK,UAAU,SAAS,uBAAuB,KAAK;AACzF,mBAAK,GAAG;AAAA,YACV,CAAC;AAAA,UACH,OAAO;AACL,iBAAK,IAAI,MAAM,mCAAmC,CAAC;AAAA,UACrD;AAAA,QACF;AAOA,aAAK,UAAU,gBAAgB,WAAY;AACzC,mBAAS,MAAM,GAAG,MAAM,KAAK,YAAY,QAAQ,OAAO;AACtD,gBAAI,KAAK,YAAY,GAAG,EAAE,OAAO;AAC/B,qBAAO;AAAA,YACT;AAAA,UACF;AAEA,iBAAO;AAAA,QACT;AAOA,aAAK,UAAU,qBAAqB,WAAY;AAC9C,mBAAS,MAAM,GAAG,MAAM,KAAK,YAAY,QAAQ,OAAO;AACtD,iBAAK,YAAY,GAAG,EAAE,QAAQ;AAAA,UAChC;AAAA,QACF;AAQA,aAAK,UAAU,iBAAiB,SAAU,SAAS,UAAU;AAC3D,eAAK,WAAW;AAEhB,cAAI,QAAQ,KACVA,QAAO;AAET,cAAI,OAAQ,KAAK,qBAAsB,eAAe,KAAK,qBAAqB,MAAM;AACpF,oBAAQ,KAAK;AAAA,UACf;AAEA,eAAK,iBAAiB,YAAY,SAAS,yBAAyB;AAKlE,gBAAIA,MAAK,cAAc,KAAK,CAACA,MAAK,gBAAgB;AAChD,cAAAA,MAAK,aAAa,QAAQ;AAAA,YAC5B;AAAA,UACF,GAAG,KAAK;AAAA,QACV;AAMA,aAAK,UAAU,kBAAkB,WAAY;AAC3C,cAAI,OAAQ,KAAK,mBAAoB,eAAe,KAAK,mBAAmB,MAAM;AAChF,0BAAc,KAAK,cAAc;AACjC,iBAAK,iBAAiB;AAAA,UACxB;AAAA,QACF;AAgBA,iBAAS,UAAU,YAAY,SAAS;AACtC,oBAAU,WAAW,CAAC;AAGtB,eAAK,aAAa;AAClB,eAAK,eAAe,CAAC;AACrB,eAAK,oBAAoB;AAEzB,iBAAO;AAAA,QACT;AAOA,kBAAU,UAAU,QAAQ,WAAY;AACtC,cAAI,KAAK,aAAa,SAAS,GAAG;AAChC,iBAAK,eAAe,CAAC;AAAA,UACvB;AACA,eAAK,oBAAoB;AACzB,iBAAO;AAAA,QACT;AAMA,kBAAU,UAAU,SAAS,WAAY;AACvC,cAAI,OAAO,KAAK,KAAK;AACrB,eAAK,aAAa;AAClB,iBAAO;AAAA,QACT;AAYA,kBAAU,UAAU,QAAQ,SAAU,KAAK;AAEzC,cAAI,CAAC,KAAK,qBAAqB,KAAK,aAAa,WAAW,GAAG;AAC7D,iBAAK,eAAe,KAAK,WAAW,oBAAoB;AAAA,UAC1D;AAEA,cAAI,SAAS,IAAI,UAAU,KAAK,UAAU;AAC1C,iBAAO,eAAe,KAAK,aAAa,MAAM,GAAG,GAAG;AACpD,iBAAO,oBAAoB;AAC3B,iBAAO;AAAA,QACT;AAWA,kBAAU,UAAU,SAAS,SAAU,KAAK;AAE1C,cAAI,CAAC,KAAK,qBAAqB,KAAK,aAAa,WAAW,GAAG;AAC7D,iBAAK,eAAe,KAAK,WAAW,oBAAoB;AAAA,UAC1D;AAEA,cAAI,SAAS,IAAI,UAAU,KAAK,UAAU;AAC1C,iBAAO,eAAe,KAAK,aAAa,MAAM,GAAG;AACjD,iBAAO,oBAAoB;AAC3B,iBAAO;AAAA,QACT;AAQA,kBAAU,UAAU,OAAO,WAAY;AACrC,cAAI,SAAS,IAAI,UAAU,KAAK,UAAU;AAE1C,cAAI,KAAK,aAAa,SAAS,GAAG;AAChC,mBAAO,eAAe,KAAK,aAAa,MAAM;AAAA,UAChD;AACA,iBAAO,oBAAoB,KAAK;AAEhC,iBAAO;AAAA,QACT;AAMA,kBAAU,UAAU,SAAS,UAAU,UAAU;AAiBjD,kBAAU,UAAU,OAAO,SAAU,YAAY;AAE/C,cAAI,CAAC,KAAK,qBAAqB,KAAK,aAAa,WAAW,GAAG;AAC7D,iBAAK,eAAe,KAAK,WAAW,oBAAoB;AAAA,UAC1D;AAEA,cAAI,kBACD,0BAAU,cAAc,MAAM;AAC7B,mBAAO,SAAU,GAAG,GAAG;AACrB,qBAAO,aAAa,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AAAA,YACtC;AAAA,UACF,GAAG,YAAY,KAAK,WAAW,IAAI;AAErC,eAAK,aAAa,KAAK,eAAe;AAEtC,iBAAO;AAAA,QACT;AAiBA,kBAAU,UAAU,aAAa,SAAU,UAAU,SAAS;AAC5D,cAAI,KACF,YAAY,IACZ,KAAK,KAAK,WAAW,KAAK,QAC1B,MAAM,KAAK,aAAa,QACxB,iBAAiB,KAAK,WAAW,cAAc,eAAe,QAAQ;AAExE,cAAI,OAAQ,YAAa,eAAe,YAAY,OAAO;AACzD,sBAAU,EAAE,MAAM,MAAM;AAAA,UAC1B;AACA,cAAI,YAAY,MAAM;AACpB,sBAAU,EAAE,MAAM,KAAK;AAAA,UACzB;AAGA,cAAI,QAAQ,GAAG;AAEb,gBAAI,KAAK,mBAAmB;AAC1B,qBAAO;AAAA,YACT;AAKA,gBAAI,KAAK,WAAW,cAAc,eAAe,QAAQ,GAAG;AAE1D,mBAAK,WAAW,YAAY,QAAQ;AAEpC,mBAAK,eAAe,KAAK,WAAW,cAAc,QAAQ,EAAE,OAAO,MAAM,CAAC;AAE1E,kBAAI,QAAQ,MAAM;AAChB,qBAAK,aAAa,QAAQ;AAAA,cAC5B;AAGA,qBAAO;AAAA,YACT,OAEK;AAEH,mBAAK,eAAe,KAAK,WAAW,oBAAoB;AAAA,YAC1D;AAAA,UACF,OAEK;AAIH,gBAAI,CAAC,QAAQ,yBAAyB,gBAAgB;AAGpD,oBAAM,KAAK;AAIX,kBAAI,QAAQ,sBAAsB;AAChC,4BAAY;AAAA,cACd;AAIA,kBAAI,OAAO,aAAa,QAAQ,qBAAqB;AACnD,oBAAI,KAAK,KAAK,KAAK;AACnB,oBAAI,KAAK,CAAC;AAEV,qBAAK,MAAM,GAAG,MAAM,KAAK,OAAO;AAC9B,qBAAG,GAAG,GAAG,CAAC,IAAI;AAAA,gBAChB;AAEA,oBAAI,KAAK,KAAK,WAAW,cAAc,QAAQ,EAAE;AAGjD,qBAAK,eAAe,GAAG,OAAO,SAAU,GAAG;AAAE,yBAAO,GAAG,CAAC;AAAA,gBAAG,CAAC;AAE5D,oBAAI,QAAQ,MAAM;AAChB,uBAAK,aAAa,QAAQ;AAAA,gBAC5B;AAEA,uBAAO;AAAA,cACT;AAAA,YACF;AAAA,UACF;AAKA,cAAI,QAAQ,sBAAsB;AAChC,mBAAO,KAAK,KAAK,SAAU,MAAM,MAAM;AACrC,kBAAI,KAAK,QAAQ,MAAM,KAAK,QAAQ,EAAG,QAAO;AAC9C,kBAAI,KAAK,QAAQ,IAAI,KAAK,QAAQ,EAAG,QAAO;AAC5C,kBAAI,KAAK,QAAQ,IAAI,KAAK,QAAQ,EAAG,QAAO;AAAA,YAC9C,CAAC;AAAA,UACH;AAGA,cAAI,kBACD,0BAAU,MAAM,MAAM,MAAM;AAC3B,gBAAI,MAAM,MAAM;AAChB,mBAAO,SAAU,GAAG,GAAG;AACrB,kBAAI,CAAC,KAAK,QAAQ,GAAG,GAAG;AACtB,sBAAM,KAAK,MAAM,GAAG;AACpB,uBAAO,MAAM,MAAM,KAAK,CAAC,GAAG,KAAK,IAAI;AACrC,uBAAO,MAAM,MAAM,KAAK,CAAC,GAAG,KAAK,IAAI;AAAA,cACvC,OAAO;AACL,uBAAO,KAAK,CAAC,EAAE,IAAI;AACnB,uBAAO,KAAK,CAAC,EAAE,IAAI;AAAA,cACrB;AACA,qBAAO,WAAW,MAAM,MAAM,IAAI;AAAA,YACpC;AAAA,UACF,GAAG,UAAU,QAAQ,MAAM,KAAK,WAAW,IAAI;AAEjD,eAAK,aAAa,KAAK,eAAe;AAEtC,iBAAO;AAAA,QACT;AAcA,kBAAU,UAAU,eAAe,SAAU,YAAY;AACvD,cAAI,WAAW,WAAW,GAAG;AAC3B,kBAAM,IAAI,MAAM,0DAA0D;AAAA,UAC5E;AAEA,cAAI;AACJ,cAAI,WAAW,WAAW,GAAG;AAC3B,mBAAO,WAAW,CAAC;AACnB,gBAAI,MAAM,QAAQ,IAAI,GAAG;AACvB,qBAAO,KAAK,WAAW,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AAAA,YACzC;AACA,mBAAO,KAAK,WAAW,MAAM,KAAK;AAAA,UACpC;AAGA,mBAAS,IAAI,GAAG,MAAM,WAAW,QAAQ,IAAI,KAAK,KAAK,GAAG;AACxD,mBAAO,WAAW,CAAC;AACnB,gBAAI,CAAC,MAAM,QAAQ,IAAI,GAAG;AACxB,yBAAW,CAAC,IAAI,CAAC,MAAM,KAAK;AAAA,YAC9B;AAAA,UACF;AAGA,cAAI,CAAC,KAAK,qBAAqB,KAAK,aAAa,WAAW,GAAG;AAC7D,iBAAK,eAAe,KAAK,WAAW,oBAAoB;AAAA,UAC1D;AAEA,cAAI,kBACD,0BAAU,OAAO,MAAM;AACtB,mBAAO,SAAU,GAAG,GAAG;AACrB,qBAAO,aAAa,OAAO,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AAAA,YAC7C;AAAA,UACF,GAAG,YAAY,KAAK,WAAW,IAAI;AAErC,eAAK,aAAa,KAAK,eAAe;AAEtC,iBAAO;AAAA,QACT;AAWA,kBAAU,UAAU,SAAS,SAAU,iBAAiB;AACtD,cAAI,KAAK,MACP,MAAM,GACN,QAAQ,GACR,SAAS,CAAC,GACV,SAAS,CAAC,GACV,MAAM,GACN,YAAY,KAAK,MAAM;AAIzB,mBAAS,KAAK,GAAG,OAAO,gBAAgB,QAAQ,KAAK,MAAM,MAAM;AAE/D,iBAAK,KAAK,OAAO,EAAE,KAAK,gBAAgB,EAAE,CAAC,EAAE;AAC7C,oBAAQ,GAAG;AAGX,iBAAK,MAAM,GAAG,MAAM,OAAO,OAAO;AAChC,oBAAM,GAAG,GAAG;AACZ,kBAAI,OAAO,GAAG,MAAM,QAAW;AAC7B,uBAAO,GAAG,IAAI;AACd,uBAAO,KAAK,GAAG;AAAA,cACjB;AAAA,YACF;AAAA,UACF;AAEA,eAAK,eAAe;AACpB,eAAK,oBAAoB;AAEzB,iBAAO;AAAA,QACT;AACA,kBAAU,UAAU,MAAM,UAAU,UAAU;AAG9C,iBAAS,gBAAgB,UAAU,OAAO;AAExC,cAAI,aAAa,UAAU;AACzB,gBAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,sBAAQ,IAAI,OAAO,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;AAAA,YACvC,WAAW,EAAE,iBAAiB,SAAS;AACrC,sBAAQ,IAAI,OAAO,KAAK;AAAA,YAC1B;AAAA,UACF,WACS,OAAO,UAAU,UAAU;AAClC,qBAAS,OAAO,OAAO;AACrB,kBAAI,QAAQ,YAAY,OAAO,MAAM,GAAG,MAAM,UAAU;AACtD,sBAAM,GAAG,IAAI,gBAAgB,KAAK,MAAM,GAAG,CAAC;AAAA,cAC9C;AAAA,YACF;AAAA,UACF;AAEA,iBAAO;AAAA,QACT;AAWA,kBAAU,UAAU,UAAU,SAAU,iBAAiB;AAGvD,mBAAS,IAAI,GAAG,MAAM,gBAAgB,QAAQ,IAAI,KAAK,KAAK;AAC1D,gBAAI,KAAK,MAAM,MAAM,GAAG;AACtB,qBAAO;AAAA,YACT;AACA,iBAAK,KAAK,gBAAgB,CAAC,CAAC;AAAA,UAC9B;AACA,iBAAO;AAAA,QACT;AACA,kBAAU,UAAU,OAAO,UAAU,UAAU;AAY/C,kBAAU,UAAU,OAAO,SAAU,OAAO,WAAW;AACrD,cAAI,KAAK,WAAW,KAAK,WAAW,GAAG;AACrC,iBAAK,eAAe,CAAC;AACrB,iBAAK,oBAAoB;AACzB,mBAAO;AAAA,UACT;AAEA,cAAI,cAAc,SAAS,UACzB,GACA,UACA,eACA,KACA,UACA,OACA,KACA,gBAAgB,OAChB,SAAS,CAAC,GACV,UAAU,CAAC,GACX,QAAQ;AAGV,sBAAY,aAAa;AAEzB,cAAI,OAAO,gBAAgB,UAAU;AACnC,iBAAK,KAAK,aAAa;AACrB,oBAAM,CAAC;AACP,kBAAI,CAAC,IAAI,YAAY,CAAC;AACtB,sBAAQ,KAAK,GAAG;AAEhB,kBAAI,eAAe,KAAK,aAAa,CAAC,GAAG;AACvC,2BAAW;AACX,gCAAgB,YAAY,CAAC;AAAA,cAC/B;AAAA,YACF;AAGA,gBAAI,QAAQ,SAAS,GAAG;AACtB,qBAAO,KAAK,KAAK,EAAE,QAAQ,QAAQ,GAAG,SAAS;AAAA,YACjD;AAAA,UACF;AAGA,cAAI,CAAC,YAAY,gBAAgB,UAAU;AACzC,gBAAI,WAAW;AACb,kBAAI,KAAK,mBAAmB;AAC1B,qBAAK,eAAe,KAAK,aAAa,MAAM,GAAG,CAAC;AAAA,cAClD,OAAO;AACL,qBAAK,eAAgB,KAAK,WAAW,KAAK,SAAS,IAAK,CAAC,CAAC,IAAI,CAAC;AAC/D,qBAAK,oBAAoB;AAAA,cAC3B;AAAA,YACF;AAEA,mBAAO;AAAA,UACT;AAGA,cAAI,aAAa,UAAU,aAAa,OAAO;AAC7C,iBAAK,QAAQ,EAAE,aAAa;AAG5B,gBAAI,aAAa,KAAK,aAAa,SAAS,GAAG;AAC7C,mBAAK,eAAe,KAAK,aAAa,MAAM,GAAG,CAAC;AAAA,YAClD;AAEA,mBAAO;AAAA,UACT;AAGA,cAAI,kBAAkB,SAAS,OAAO,kBAAkB,YAAY,yBAAyB,OAAO;AAClG,uBAAW;AACX,oBAAQ;AAAA,UACV,WAAW,OAAO,kBAAkB,UAAU;AAC5C,iBAAK,OAAO,eAAe;AACzB,kBAAI,eAAe,KAAK,eAAe,GAAG,GAAG;AAC3C,2BAAW;AACX,wBAAQ,cAAc,GAAG;AACzB;AAAA,cACF;AAAA,YACF;AAAA,UACF,OAAO;AACL,kBAAM,IAAI,MAAM,kCAAkC;AAAA,UACpD;AAEA,cAAI,aAAa,YAAY,OAAO,UAAU,UAAU;AACtD,oBAAQ,gBAAgB,UAAU,KAAK;AAAA,UACzC;AAGA,cAAI,mBAAoB,SAAS,QAAQ,GAAG,MAAM;AAIlD,cAAI,eAAe,CAAC,KAAK;AAEzB,cAAI,gBAAgB,KAAK,WAAW,cAAc,QAAQ,KAAK,WAAW,QAAQ,GAAG;AAKnF,gBAAI,KAAK,WAAW,0BAA0B,MAAM;AAClD,mBAAK,WAAW,YAAY,QAAQ;AAAA,YACtC;AAEA,4BAAgB;AAChB,oBAAQ,KAAK,WAAW,cAAc,QAAQ;AAAA,UAChD;AAGA,cAAI,CAAC,iBAAiB,aAAa,SAAS,MAAM,QAAQ,KAAK,KAAK,OAAO,QAAQ,aAAa;AAC9F,oBAAQ,IAAI,IAAI,KAAK;AACrB,uBAAW;AAAA,UACb;AAGA,cAAI,MAAM,QAAQ,QAAQ;AAG1B,cAAI,IAAI,KAAK,WAAW;AAExB,cAAI,IAAI,GACN,MAAM;AAQR,cAAI,QAAQ,SAAS,GAAG;AAGxB,cAAI,KAAK,mBAAmB;AAC1B,qBAAS,KAAK;AACd,kBAAM,OAAO;AAGb,gBAAI,kBAAkB;AACpB,yBAAW,SAAS,MAAM,GAAG;AAC7B,mBAAK,IAAI,GAAG,IAAI,KAAK,KAAK;AACxB,yBAAS,OAAO,CAAC;AACjB,yBAAS,EAAE,MAAM;AACjB,oBAAI,WAAW,QAAQ,UAAU,KAAK,OAAO,MAAM,GAAG;AACpD,yBAAO,KAAK,MAAM;AAClB,sBAAI,WAAW;AACb,yBAAK,eAAe;AACpB,2BAAO;AAAA,kBACT;AAAA,gBACF;AAAA,cACF;AAAA,YACF,OAAO;AACL,mBAAK,IAAI,GAAG,IAAI,KAAK,KAAK;AACxB,yBAAS,OAAO,CAAC;AACjB,yBAAS,EAAE,MAAM;AACjB,oBAAI,IAAI,OAAO,QAAQ,GAAG,OAAO,MAAM,GAAG;AACxC,yBAAO,KAAK,MAAM;AAClB,sBAAI,WAAW;AACb,yBAAK,eAAe;AACpB,2BAAO;AAAA,kBACT;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF,OAEK;AAEH,gBAAI,CAAC,eAAe;AAClB,oBAAM,EAAE;AAER,kBAAI,kBAAkB;AACpB,2BAAW,SAAS,MAAM,GAAG;AAC7B,qBAAK,IAAI,GAAG,IAAI,KAAK,KAAK;AACxB,2BAAS,EAAE,CAAC;AACZ,sBAAI,WAAW,QAAQ,UAAU,KAAK,OAAO,MAAM,GAAG;AACpD,2BAAO,KAAK,CAAC;AACb,wBAAI,WAAW;AACb,2BAAK,eAAe;AACpB,2BAAK,oBAAoB;AACzB,6BAAO;AAAA,oBACT;AAAA,kBACF;AAAA,gBACF;AAAA,cACF,OAAO;AACL,qBAAK,IAAI,GAAG,IAAI,KAAK,KAAK;AACxB,2BAAS,EAAE,CAAC;AACZ,sBAAI,IAAI,OAAO,QAAQ,GAAG,OAAO,MAAM,GAAG;AACxC,2BAAO,KAAK,CAAC;AACb,wBAAI,WAAW;AACb,2BAAK,eAAe;AACpB,2BAAK,oBAAoB;AACzB,6BAAO;AAAA,oBACT;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,YACF,OAAO;AAEL,kBAAI,OAAO,KAAK,WAAW,eAAe,UAAU,UAAU,KAAK;AAEnE,kBAAI,aAAa,OAAO;AACtB,qBAAK,IAAI,KAAK,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK;AACnC,sBAAI,WAAW,QAAQ,MAAM,MAAM;AAEjC,wBAAI,WAAW,QAAQ,EAAE,MAAM,MAAM,EAAE,MAAM,OAAO,CAAC,CAAC,GAAG,UAAU,gBAAgB,GAAG,KAAK,GAAG;AAC5F,6BAAO,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,0BAAI,WAAW;AACb,6BAAK,eAAe;AACpB,6BAAK,oBAAoB;AACzB,+BAAO;AAAA,sBACT;AAAA,oBACF;AAAA,kBACF,OACK;AACH,2BAAO,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,wBAAI,WAAW;AACb,2BAAK,eAAe;AACpB,2BAAK,oBAAoB;AACzB,6BAAO;AAAA,oBACT;AAAA,kBACF;AAAA,gBACF;AAAA,cACF,OAAO;AACL,qBAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAC3C,yBAAO,KAAK,MAAM,OAAO,KAAK,CAAC,CAAC,CAAC;AACjC,sBAAI,WAAW;AACb,yBAAK,eAAe;AACpB,yBAAK,oBAAoB;AACzB,2BAAO;AAAA,kBACT;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UAEF;AAEA,eAAK,eAAe;AACpB,eAAK,oBAAoB;AACzB,iBAAO;AAAA,QACT;AAYA,kBAAU,UAAU,QAAQ,SAAU,KAAK;AACzC,cAAI,cACF,SAAS,CAAC;AAEZ,cAAI,eAAe,OAAO,KAAK;AAC7B,2BAAe;AAAA,UACjB,OAAO;AACL,kBAAM,IAAI,UAAU,6CAA6C;AAAA,UACnE;AACA,cAAI;AAEF,gBAAI,KAAK,mBAAmB;AAC1B,kBAAI,IAAI,KAAK,aAAa;AAE1B,qBAAO,KAAK;AACV,oBAAI,aAAa,KAAK,WAAW,KAAK,KAAK,aAAa,CAAC,CAAC,CAAC,MAAM,MAAM;AACrE,yBAAO,KAAK,KAAK,aAAa,CAAC,CAAC;AAAA,gBAClC;AAAA,cACF;AAEA,mBAAK,eAAe;AAEpB,qBAAO;AAAA,YACT,OAEK;AACH,kBAAI,IAAI,KAAK,WAAW,KAAK;AAE7B,qBAAO,KAAK;AACV,oBAAI,aAAa,KAAK,WAAW,KAAK,CAAC,CAAC,MAAM,MAAM;AAClD,yBAAO,KAAK,CAAC;AAAA,gBACf;AAAA,cACF;AAEA,mBAAK,eAAe;AACpB,mBAAK,oBAAoB;AAEzB,qBAAO;AAAA,YACT;AAAA,UACF,SAAS,KAAK;AACZ,kBAAM;AAAA,UACR;AAAA,QACF;AAUA,kBAAU,UAAU,QAAQ,WAAY;AACtC,cAAI,KAAK,mBAAmB;AAC1B,mBAAO,KAAK,aAAa;AAAA,UAC3B;AACA,iBAAO,KAAK,WAAW,MAAM;AAAA,QAC/B;AAiBA,kBAAU,UAAU,OAAO,SAAU,SAAS;AAC5C,cAAI,SAAS,CAAC,GACZ,OAAO,KAAK,WAAW,MACvB,KACA,KACA,GACA;AAEF,oBAAU,WAAW,CAAC;AAGtB,cAAI,QAAQ,cAAc,CAAC,QAAQ,aAAa;AAC9C,oBAAQ,cAAc;AACtB,oBAAQ,mBAAmB,QAAQ,oBAAoB;AAAA,UACzD;AAIA,cAAI,CAAC,KAAK,WAAW,0BAA0B,KAAK,WAAW,eAAe;AAC5E,oBAAQ,cAAc;AACtB,oBAAQ,mBAAmB;AAAA,UAC7B;AAGA,cAAI,CAAC,KAAK,mBAAmB;AAC3B,gBAAI,KAAK,aAAa,WAAW,GAAG;AAElC,kBAAI,KAAK,WAAW,gBAAgB,QAAQ,aAAa;AACvD,sBAAM,KAAK;AACX,yBAAS,QAAQ,oBAAoB,KAAK,WAAW;AACrD,qBAAK,IAAI,GAAG,IAAI,KAAK,KAAK;AACxB,wBAAM,MAAM,KAAK,CAAC,GAAG,MAAM;AAC3B,sBAAI,QAAQ,YAAY;AACtB,2BAAO,IAAI;AACX,2BAAO,IAAI;AAAA,kBACb;AACA,yBAAO,KAAK,GAAG;AAAA,gBACjB;AACA,uBAAO;AAAA,cACT,OAEK;AACH,uBAAO,KAAK,MAAM;AAAA,cACpB;AAAA,YACF,OAAO;AAEL,mBAAK,oBAAoB;AAAA,YAC3B;AAAA,UACF;AAEA,cAAI,KAAK,KAAK;AACd,gBAAM,GAAG;AAET,cAAI,KAAK,WAAW,gBAAgB,QAAQ,aAAa;AACvD,qBAAS,QAAQ,oBAAoB,KAAK,WAAW;AACrD,iBAAK,IAAI,GAAG,IAAI,KAAK,KAAK;AACxB,oBAAM,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,MAAM;AAC/B,kBAAI,QAAQ,YAAY;AACtB,uBAAO,IAAI;AACX,uBAAO,IAAI;AAAA,cACb;AACA,qBAAO,KAAK,GAAG;AAAA,YACjB;AAAA,UACF,OAAO;AACL,iBAAK,IAAI,GAAG,IAAI,KAAK,KAAK;AACxB,qBAAO,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC;AAAA,YACzB;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAaA,kBAAU,UAAU,SAAS,SAAU,gBAAgB;AAErD,cAAI,OAAQ,mBAAoB,YAAY;AAC1C,kBAAM,IAAI,UAAU,4BAA4B;AAAA,UAClD;AAGA,cAAI,CAAC,KAAK,qBAAqB,KAAK,aAAa,WAAW,GAAG;AAC7D,iBAAK,eAAe,KAAK,WAAW,oBAAoB;AAAA,UAC1D;AAEA,cAAI,KAAK,MAAM,KAAK,aAAa,QAC/B,MAAM,KAAK,WAAW;AAGxB,mBAAS,MAAM,GAAG,MAAM,KAAK,OAAO;AAElC,gBAAI,CAAC,KAAK,iBAAiB,KAAK,WAAW,gBAAgB,CAAC,KAAK,WAAW,wBAAwB;AAClG,oBAAM,MAAM,IAAI,KAAK,aAAa,GAAG,CAAC,GAAG,KAAK,WAAW,WAAW;AACpE,6BAAe,GAAG;AAClB,mBAAK,WAAW,OAAO,GAAG;AAAA,YAC5B,OACK;AAEH,6BAAe,IAAI,KAAK,aAAa,GAAG,CAAC,CAAC;AAC1C,mBAAK,WAAW,OAAO,IAAI,KAAK,aAAa,GAAG,CAAC,CAAC;AAAA,YACpD;AAAA,UACF;AAEA,iBAAO;AAAA,QACT;AAWA,kBAAU,UAAU,SAAS,WAAY;AAGvC,cAAI,CAAC,KAAK,qBAAqB,KAAK,aAAa,WAAW,GAAG;AAC7D,iBAAK,eAAe,KAAK,WAAW,oBAAoB;AAAA,UAC1D;AAEA,eAAK,WAAW,uBAAuB,KAAK,YAAY;AAExD,eAAK,eAAe,CAAC;AAErB,iBAAO;AAAA,QACT;AAqBA,kBAAU,UAAU,MAAM,SAAU,QAAQ,aAAa;AACvD,cAAI,OAAO,KAAK,KAAK,WAAW,EAAE,IAAI,MAAM;AAE5C,eAAK,aAAa,IAAI,WAAW,YAAY;AAC7C,eAAK,WAAW,OAAO,IAAI;AAC3B,eAAK,eAAe,CAAC;AACrB,eAAK,oBAAoB;AAEzB,iBAAO;AAAA,QACT;AA4BA,iBAAS,WAAW,MAAM,SAAS;AAGjC,eAAK,OAAO;AAEZ,eAAK,OAAO,CAAC;AACb,eAAK,UAAU;AACf,eAAK,gBAAgB,CAAC;AACtB,eAAK,cAAc;AAAA,YACjB,QAAQ,CAAC;AAAA,YACT,OAAO,CAAC;AAAA,UACV;AAIA,eAAK,cAAc,CAAC;AAIpB,eAAK,aAAa,CAAC;AAGnB,eAAK,UAAU;AAKf,eAAK,QAAQ;AAGb,eAAK,cAAc;AACnB,eAAK,oBAAoB;AACzB,eAAK,aAAa;AAClB,cAAIA,QAAO;AAGX,oBAAU,WAAW,CAAC;AAGtB,cAAI,QAAQ,eAAe,QAAQ,GAAG;AACpC,gBAAI,CAAC,MAAM,QAAQ,QAAQ,MAAM,GAAG;AAClC,sBAAQ,SAAS,CAAC,QAAQ,MAAM;AAAA,YAClC;AAEA,oBAAQ,OAAO,QAAQ,SAAU,MAAM;AACrC,cAAAA,MAAK,YAAY,KAAK,IAAI;AAAA,YAC5B,CAAC;AAAA,UACH;AAQA,eAAK,wBAAwB,QAAQ,eAAe,uBAAuB,IAAI,QAAQ,wBAAwB;AAG/G,eAAK,gBAAgB,QAAQ,eAAe,eAAe,IAAI,QAAQ,gBAAgB;AAGvF,eAAK,eAAe,QAAQ,eAAe,OAAO,IAAI,QAAQ,QAAQ;AAGtE,eAAK,cAAc,QAAQ,eAAe,aAAa,IAAI,QAAQ,cAAc;AAGjF,eAAK,iBAAiB,QAAQ,eAAe,gBAAgB,IAAI,QAAQ,iBAAiB;AAG1F,eAAK,cAAc,QAAQ,eAAe,aAAa,IAAI,QAAQ,cAAc;AAGjF,eAAK,oBAAoB,QAAQ,eAAe,mBAAmB,IAAI,QAAQ,oBAAoB;AAGnG,eAAK,yBAAyB,QAAQ,eAAe,wBAAwB,IAAI,QAAQ,yBAAyB;AAClH,cAAI,KAAK,mBAAmB;AAAE,iBAAK,yBAAyB;AAAA,UAAM;AAGlE,eAAK,aAAa,QAAQ,eAAe,YAAY,IAAI,QAAQ,aAAa;AAK9E,eAAK,sBAAsB,QAAQ,eAAe,qBAAqB,IAAI,QAAQ,sBAAsB;AAGzG,eAAK,gBAAgB,QAAQ,eAAe,eAAe,IAAI,QAAQ,gBAAgB;AAOvF,eAAK,QAAQ;AAEb,eAAK,eAAe,CAAC;AAGrB,eAAK,SAAS;AAAA,YACZ,UAAU,CAAC;AAAA,YACX,UAAU,CAAC;AAAA,YACX,cAAc,CAAC;AAAA,YACf,cAAc,CAAC;AAAA,YACf,SAAS,CAAC;AAAA,YACV,eAAe,CAAC;AAAA,YAChB,SAAS,CAAC;AAAA,YACV,UAAU,CAAC;AAAA,YACX,WAAW,CAAC;AAAA,UACd;AAGA,eAAK,UAAU,CAAC;AAGhB,eAAK,WAAW,CAAC;AAGjB,cAAI,UAAU,CAAC;AACf,cAAI,WAAW,QAAQ,SAAS;AAC9B,gBAAI,OAAO,UAAU,SAAS,KAAK,QAAQ,OAAO,MAAM,kBAAkB;AACxE,wBAAU,QAAQ;AAAA,YACpB,WAAW,OAAO,QAAQ,YAAY,UAAU;AAC9C,wBAAU,CAAC,QAAQ,OAAO;AAAA,YAC5B,OAAO;AACL,oBAAM,IAAI,UAAU,qDAAqD;AAAA,YAC3E;AAAA,UACF;AAEA,mBAAS,MAAM,GAAG,MAAM,QAAQ,QAAQ,OAAO;AAC7C,iBAAK,YAAY,QAAQ,GAAG,CAAC;AAAA,UAC/B;AAMA,eAAK,GAAG,WAAW,SAAU,SAAS;AACpC,YAAAA,MAAK,mBAAmB,KAAK,OAAO;AAAA,UACtC,CAAC;AAAA,QAIH;AAEA,mBAAW,YAAY,IAAI,iBAAiB;AAC5C,mBAAW,UAAU,aAAa;AAIlC,mBAAW,UAAU,qBAAqB;AAAA,UACxC,KAAK,WAAY;AAAA,UAAE;AAAA,UACnB,MAAM,WAAY;AAAA,UAAE;AAAA,UACpB,OAAO,WAAY;AAAA,UAAE;AAAA,QACvB;AAEA,mBAAW,UAAU,wBAAwB,SAAU,QAAQ;AAAA,QAI/D;AAEA,mBAAW,UAAU,2BAA2B,SAAU,QAAQ;AAAA,QAIlE;AAYA,mBAAW,UAAU,sBAAsB,WAAY;AACrD,cAAI,MAAM,KAAK,KAAK;AACpB,cAAI,UAAU,IAAI,MAAM,GAAG;AAC3B,mBAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC/B,oBAAQ,CAAC,IAAI;AAAA,UACf;AACA,iBAAO;AAAA,QACT;AAOA,mBAAW,UAAU,mBAAmB,SAAU,SAAS;AACzD,oBAAU,WAAW,CAAC;AAEtB,cAAI,QAAQ,eAAe,uBAAuB,GAAG;AACnD,iBAAK,wBAAwB,QAAQ;AAGrC,gBAAI,KAAK,uBAAuB;AAC9B,mBAAK,iBAAiB;AAAA,YACxB;AAAA,UACF;AAAA,QACF;AAQA,mBAAW,UAAU,cAAc,SAAU,UAAU,OAAO;AAE5D,cAAI,OAAQ,UAAW,aAAa;AAClC,oBAAQ;AAAA,UACV;AAEA,cAAI,aAAa,QAAQ,aAAa,QAAW;AAC/C,kBAAM,IAAI,MAAM,wDAAwD;AAAA,UAC1E;AAEA,cAAI,KAAK,cAAc,QAAQ,KAAK,CAAC,OAAO;AAC1C,gBAAI,CAAC,KAAK,cAAc,QAAQ,EAAE,MAAO;AAAA,UAC3C;AAGA,cAAI,KAAK,0BAA0B,QAAQ,KAAK,cAAc,eAAe,QAAQ,KAAK,CAAC,OAAO;AAChG;AAAA,UACF;AAEA,cAAI,QAAQ;AAAA,YACV,QAAQ;AAAA,YACR,SAAS;AAAA,YACT,UAAU,KAAK,oBAAoB;AAAA,UACrC;AACA,eAAK,cAAc,QAAQ,IAAI;AAE/B,cAAI,mBACD,SAAU,MAAM,MAAM;AACrB,gBAAI,MAAM;AACV,gBAAI,WAAW,CAAC,KAAK,QAAQ,GAAG,IAAI,KAAK,MAAM,GAAG,IAAI;AACtD,mBAAO,SAAU,GAAG,GAAG;AACrB,kBAAI,UAAU;AACZ,uBAAO,MAAM,MAAM,KAAK,CAAC,GAAG,UAAU,IAAI;AAC1C,uBAAO,MAAM,MAAM,KAAK,CAAC,GAAG,UAAU,IAAI;AAAA,cAC5C,OAAO;AACL,uBAAO,KAAK,CAAC,EAAE,IAAI;AACnB,uBAAO,KAAK,CAAC,EAAE,IAAI;AAAA,cACrB;AAEA,kBAAI,SAAS,MAAM;AACjB,oBAAI,YAAY,GAAG,MAAM,MAAM,KAAK,EAAG,QAAO;AAC9C,oBAAI,YAAY,GAAG,MAAM,MAAM,KAAK,EAAG,QAAO;AAAA,cAChD;AACA,qBAAO;AAAA,YACT;AAAA,UACF,GAAG,UAAU,KAAK,IAAI;AAExB,gBAAM,OAAO,KAAK,eAAe;AACjC,gBAAM,QAAQ;AAEd,eAAK,QAAQ;AAAA,QACf;AAmBA,mBAAW,UAAU,kBAAkB,SAAU,SAAS;AACxD,cAAI,KAAK,WAAW,KAAK;AACzB,cAAI,UAAU,CAAC,GAAG;AAElB,eAAK,OAAO,UAAU;AACpB,gBAAI,eAAe,KAAK,UAAU,GAAG,GAAG;AACtC,uBAAS,KAAK,WAAW,KAAK,OAAO;AACrC,kBAAI,CAAC,QAAQ;AACX,wBAAQ,KAAK,GAAG;AAAA,cAClB;AAAA,YACF;AAAA,UACF;AAEA,iBAAO;AAAA,QACT;AAyBA,mBAAW,UAAU,aAAa,SAAU,UAAU,SAAS;AAC7D,oBAAU,WAAW,CAAC;AAEtB,cAAI,QAAQ,wBAAwB,QAAQ,mBAAmB,OAAO;AACpE,oBAAQ,iBAAiB;AAAA,UAC3B;AACA,kBAAQ,uBAAuB,QAAQ,wBAAwB;AAC/D,cAAI,QAAQ,uBAAuB,KAAK,QAAQ,uBAAuB,GAAG;AACxE,oBAAQ,uBAAuB;AAAA,UACjC;AAEA,cAAI,QAAQ,MAAM,KAAK,MAAM,KAAK,KAAK;AAGvC,cAAI,CAAC,KAAK,cAAc,eAAe,QAAQ,GAAG;AAChD,kBAAM,IAAI,MAAM,qDAAqD,QAAQ;AAAA,UAC/E;AAGA,cAAI,CAAC,KAAK,uBAAuB;AAC/B,iBAAK,YAAY,QAAQ;AAAA,UAC3B;AAEA,gBAAM,KAAK,cAAc,QAAQ,EAAE;AACnC,gBAAM,IAAI;AAGV,cAAI,QAAQ,KAAK,KAAK,QAAQ;AAC5B,gBAAI,QAAQ,QAAQ;AAClB,mBAAK,YAAY,UAAU,IAAI;AAAA,YACjC;AACA,mBAAO;AAAA,UACT;AAEA,cAAI,QAAQ,GAAG;AACb,mBAAO;AAAA,UACT;AAEA,cAAI,mBAAoB,SAAS,QAAQ,GAAG,MAAM;AAElD,cAAI,QAAQ,GAAG;AACb,oBAAS,IAAI,CAAC,MAAM;AAAA,UACtB,OACK;AACH,gBAAI,QAAQ,gBAAgB;AAE1B,kBAAI,CAAC,QAAQ;AAAA,gBAAK,MAAM,MAAM,KAAK,KAAK,IAAI,CAAC,CAAC,GAAG,UAAU,gBAAgB;AAAA,gBACzE,MAAM,MAAM,KAAK,KAAK,IAAI,CAAC,CAAC,GAAG,UAAU,gBAAgB;AAAA,cAAC,GAAG;AAC7D,wBAAQ;AAAA,cACV;AACA,kBAAI,CAAC,QAAQ;AAAA,gBAAK,MAAM,MAAM,KAAK,KAAK,IAAI,MAAM,CAAC,CAAC,GAAG,UAAU,gBAAgB;AAAA,gBAC/E,MAAM,MAAM,KAAK,KAAK,IAAI,MAAM,CAAC,CAAC,GAAG,UAAU,gBAAgB;AAAA,cAAC,GAAG;AACnE,wBAAQ;AAAA,cACV;AAIA,kBAAI,OAAO;AAET,uBAAO,KAAK,OAAO,MAAM,KAAK,QAAQ,oBAAoB;AAI1D,qBAAK,MAAM,GAAG,MAAM,OAAO,GAAG,OAAO;AAEnC,wBAAM,KAAK,MAAM,KAAK,OAAO,KAAK,MAAM,EAAE;AAC1C,sBAAI,CAAC,QAAQ;AAAA,oBAAK,MAAM,MAAM,KAAK,KAAK,IAAI,GAAG,CAAC,GAAG,UAAU,gBAAgB;AAAA,oBAC3E,MAAM,MAAM,KAAK,KAAK,IAAI,MAAM,CAAC,CAAC,GAAG,UAAU,gBAAgB;AAAA,kBAAC,GAAG;AACnE,4BAAQ;AACR;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,YACF,OACK;AAEH,mBAAK,MAAM,GAAG,MAAM,MAAM,GAAG,OAAO;AAClC,oBAAI,CAAC,QAAQ;AAAA,kBAAK,MAAM,MAAM,KAAK,KAAK,IAAI,GAAG,CAAC,GAAG,UAAU,gBAAgB;AAAA,kBAC3E,MAAM,MAAM,KAAK,KAAK,IAAI,MAAM,CAAC,CAAC,GAAG,UAAU,gBAAgB;AAAA,gBAAC,GAAG;AACnE,0BAAQ;AACR;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAGA,cAAI,CAAC,SAAS,QAAQ,QAAQ;AAC5B,iBAAK,YAAY,UAAU,IAAI;AAAA,UACjC;AAEA,iBAAO;AAAA,QACT;AAEA,mBAAW,UAAU,uBAAuB,SAAU,UAAU;AAC9D,cAAI,KAAK,UAAU,KAAK,cAAc,QAAQ,EAAE;AAChD,cAAI,SAAS,CAAC;AAEd,eAAK,MAAM,GAAG,MAAM,QAAQ,QAAQ,OAAO;AACzC,mBAAO,KAAK,MAAM,MAAM,KAAK,KAAK,QAAQ,GAAG,CAAC,GAAG,UAAU,IAAI,CAAC;AAAA,UAClE;AAEA,iBAAO;AAAA,QACT;AAOA,mBAAW,UAAU,iBAAiB,SAAU,OAAO,OAAO;AAC5D,cAAI,QAAQ,KAAK,YAAY,OAAO,KAAK;AACzC,cAAI,CAAC,SAAS,OAAO;AACnB,mBAAO,KAAK,kBAAkB,KAAK;AAAA,UACrC;AACA,iBAAO;AAAA,QACT;AAEA,mBAAW,UAAU,oBAAoB,SAAU,OAAO;AACxD,cAAI,QAAQ,KAAK,YAAY,OAAO,KAAK;AACzC,cAAI,CAAC,OAAO;AAEV,gBAAI,KAAK,YAAY,QAAQ,KAAK,KAAK,IAAI;AACzC,mBAAK,YAAY,KAAK,KAAK;AAAA,YAC7B;AAAA,UACF;AAGA,eAAK,YAAY,OAAO,KAAK,IAAI,QAAQ,IAAI,YAAY,KAAK;AAC9D,eAAK,KAAK,QAAQ,SAAU,KAAK;AAC/B,kBAAM,IAAI,GAAG;AAAA,UACf,CAAC;AACD,iBAAO;AAAA,QACT;AAOA,mBAAW,UAAU,mBAAmB,SAAU,OAAO;AACvD,cAAI,KAAK,WAAW,KAAK;AACzB,eAAK,OAAO,UAAU;AACpB,gBAAI,eAAe,KAAK,UAAU,GAAG,GAAG;AACtC,mBAAK,YAAY,KAAK,KAAK;AAAA,YAC7B;AAAA,UACF;AAAA,QACF;AAKA,mBAAW,UAAU,yBAAyB,WAAY;AACxD,cAAI,KAAK,WAAW,KAAK;AACzB,eAAK,OAAO,UAAU;AACpB,gBAAI,eAAe,KAAK,UAAU,GAAG,GAAG;AACtC,uBAAS,GAAG,EAAE,QAAQ;AAAA,YACxB;AAAA,UACF;AAAA,QACF;AAKA,mBAAW,UAAU,uBAAuB,SAAU,OAAO;AAC3D,cAAI,KAAK,cAAc,KAAK;AAC1B,iBAAK,cAAc,KAAK,EAAE,QAAQ;AAAA,QACtC;AAQA,mBAAW,UAAU,QAAQ,SAAU,OAAO;AAC5C,cAAI,CAAC,OAAO;AACV,mBAAO,KAAK,KAAK;AAAA,UACnB;AAEA,iBAAO,KAAK,MAAM,EAAE,KAAK,KAAK,EAAE,aAAa;AAAA,QAC/C;AAKA,mBAAW,UAAU,WAAW,WAAY;AAC1C,cAAI,KAAK,SAAS;AAChB;AAAA,UACF;AACA,cAAI,OAAO,KAAK,MACd,IAAI;AACN,cAAI,MAAM,KAAK;AACf,cAAI,QAAQ,IAAI,MAAM,GAAG;AACzB,eAAK,GAAG,IAAI,KAAK,KAAK;AACpB,kBAAM,CAAC,IAAI,KAAK,CAAC,EAAE;AAAA,UACrB;AACA,eAAK,UAAU;AAAA,QACjB;AAYA,mBAAW,UAAU,gBAAgB,SAAU,cAAc,gBAAgB;AAC3E,cAAI,OAAQ,iBAAkB,YAAY;AACxC,iBAAK,YAAY,cAAc,cAAc;AAAA,UAC/C,OACK;AACH,iBAAK,MAAM,EAAE,KAAK,YAAY,EAAE,OAAO,cAAc;AAAA,UACvD;AAAA,QACF;AAQA,mBAAW,UAAU,gBAAgB,SAAU,cAAc;AAC3D,eAAK,MAAM,EAAE,KAAK,YAAY,EAAE,OAAO;AAAA,QACzC;AAoBA,mBAAW,UAAU,SAAS,SAAU,KAAK,yBAAyB;AACpE,cAAI,CAAC,MAAM,QAAQ,GAAG,GAAG;AACvB,mBAAO,KAAK,UAAU,GAAG;AAAA,UAC3B;AAGA,cAAI;AACJ,cAAI,UAAU,CAAC;AAIf,cAAI,wBAAwB,2BAA2B,CAAC,KAAK,gBAC3D,KAAK,yBAAyB,OAAO,KAAK,KAAK,aAAa,EAAE,SAAS;AAEzE,cAAI,uBAAuB;AACzB,iBAAK,wBAAwB;AAAA,UAC/B;AAEA,cAAI;AACF,iBAAK,KAAK,cAAc,GAAG;AAC3B,qBAAS,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC9C,oBAAM,KAAK,UAAU,IAAI,CAAC,GAAG,IAAI;AACjC,kBAAI,CAAC,KAAK;AACR,uBAAO;AAAA,cACT;AACA,sBAAQ,KAAK,GAAG;AAAA,YAClB;AAAA,UACF,UAAE;AACA,gBAAI,uBAAuB;AACzB,mBAAK,iBAAiB;AACtB,mBAAK,wBAAwB;AAAA,YAC/B;AAAA,UACF;AAGA,eAAK,KAAK,UAAU,OAAO;AAG3B,oBAAU,KAAK,eAAe,MAAM,SAAS,KAAK,WAAW,IAAI;AAEjE,iBAAO,QAAQ,WAAW,IAAI,QAAQ,CAAC,IAAI;AAAA,QAC7C;AAQA,mBAAW,UAAU,YAAY,SAAU,KAAK,YAAY;AAC1D,cAAI,MAAM;AACV,cAAI;AAEJ,cAAI,OAAO,QAAQ,UAAU;AAC3B,kBAAM,IAAI,UAAU,gCAAgC;AAAA,UACtD,WAAW,QAAQ,MAAM;AACvB,kBAAM,IAAI,UAAU,uBAAuB;AAAA,UAC7C;AAEA,cAAI,QAAQ,MAAM;AAChB,iBAAK,KAAK,SAAS,GAAG;AACtB,kBAAM;AAAA,UACR;AAGA,cAAI,MAAM,KAAK,eAAe,MAAM,KAAK,KAAK,WAAW,IAAI;AAC7D,cAAI,CAAC,KAAK,eAAe;AACvB,kBAAM,SAAS,GAAG;AAAA,UACpB;AAEA,cAAI,CAAC,KAAK,aAAa;AACrB,gBAAI,OAAO,IAAI,SAAS,aAAa;AACnC,kBAAI,OAAO;AAAA,gBACT,UAAU;AAAA,gBACV,SAAS;AAAA,cACX;AAAA,YACF,WAAW,CAAC,KAAK,eAAe;AAC9B,kBAAI,OAAO,SAAS,IAAI,IAAI;AAAA,YAC9B;AAAA,UACF;AAIA,cAAI,CAAC,YAAY;AACf,iBAAK,KAAK,cAAc,GAAG;AAAA,UAC7B;AACA,cAAI,CAAC,KAAK,IAAI,GAAG,GAAG;AAClB,mBAAO;AAAA,UACT;AAQA,cAAI,CAAC,KAAK,eAAe;AACvB,uBAAW,GAAG;AAAA,UAChB;AAGA,sBAAY,KAAK,eAAe,MAAM,KAAK,KAAK,WAAW,IAAI;AAE/D,cAAI,CAAC,YAAY;AACf,iBAAK,KAAK,UAAU,SAAS;AAAA,UAC/B;AAEA,eAAK,sBAAsB,SAAS;AAEpC,iBAAO;AAAA,QACT;AAQA,mBAAW,UAAU,QAAQ,SAAU,SAAS;AAC9C,cAAIA,QAAO;AAEX,oBAAU,WAAW,CAAC;AAEtB,eAAK,OAAO,CAAC;AACb,eAAK,UAAU;AACf,eAAK,cAAc;AACnB,eAAK,oBAAoB;AACzB,eAAK,aAAa;AAClB,eAAK,QAAQ;AACb,eAAK,eAAe,CAAC;AACrB,eAAK,QAAQ;AACb,eAAK,cAAc;AAAA,YACjB,QAAQ,CAAC;AAAA,YACT,OAAO,CAAC;AAAA,UACV;AAGA,cAAI,QAAQ,kBAAkB,MAAM;AAClC,iBAAK,gBAAgB,CAAC;AACtB,iBAAK,cAAc,CAAC;AAAA,UACtB,OAEK;AAEH,gBAAI,OAAO,OAAO,KAAK,KAAK,aAAa;AACzC,iBAAK,QAAQ,SAAU,QAAQ;AAC7B,cAAAA,MAAK,cAAc,MAAM,EAAE,QAAQ;AACnC,cAAAA,MAAK,cAAc,MAAM,EAAE,SAAS,CAAC;AAAA,YACvC,CAAC;AAAA,UACH;AAAA,QACF;AAOA,mBAAW,UAAU,SAAS,SAAU,KAAK;AAC3C,cAAI,uBAAuB,GAAG;AAE9B,cAAI,MAAM,QAAQ,GAAG,GAAG;AACtB,kBAAM,IAAI;AAIV,oCAAwB,CAAC,KAAK,gBAC5B,KAAK,yBAAyB,OAAO,KAAK,KAAK,aAAa,EAAE,SAAS;AAEzE,gBAAI,uBAAuB;AACzB,mBAAK,wBAAwB;AAAA,YAC/B;AAEA,gBAAI;AACF,mBAAK,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC3B,qBAAK,OAAO,IAAI,CAAC,CAAC;AAAA,cACpB;AAAA,YACF,UACA;AACE,kBAAI,uBAAuB;AACzB,qBAAK,iBAAiB;AACtB,qBAAK,wBAAwB;AAAA,cAC/B;AAAA,YACF;AAEA;AAAA,UACF;AAGA,cAAI,CAAC,eAAe,KAAK,KAAK,OAAO,GAAG;AACtC,kBAAM,IAAI,MAAM,mGAAmG;AAAA,UACrH;AACA,cAAI;AACF,iBAAK,iBAAiB;AACtB,gBAAI,MAAM,KAAK,IAAI,IAAI,OAAO,IAAI,GAChC,aACA,aACA,UACAA,QAAO;AAET,gBAAI,CAAC,KAAK;AACR,oBAAM,IAAI,MAAM,gDAAgD;AAAA,YAClE;AAEA,0BAAc,IAAI,CAAC;AACnB,uBAAW,IAAI,CAAC;AAGhB,0BAAc,KAAK,gBAAiB,CAAC,KAAK,0BAA0B,KAAK,gBAAiB,MAAM,KAAK,KAAK,WAAW,IAAI;AAEzH,iBAAK,KAAK,cAAc,GAAG;AAE3B,iBAAK,YAAY,QAAQ,SAAUG,MAAK;AACtC,cAAAH,MAAK,eAAeG,MAAK,IAAI,EAAE,OAAO,aAAa,WAAW;AAAA,YAChE,CAAC;AAGD,iBAAK,KAAK,QAAQ,IAAI;AAEtB,gBAAI,gBAAgB,KAAK;AACvB,mBAAK,sBAAsB,GAAG;AAAA,YAChC;AAIA,qBAAS,MAAM,GAAG,MAAM,KAAK,aAAa,QAAQ,OAAO;AACvD,mBAAK,aAAa,GAAG,EAAE,iBAAiB,UAAU,KAAK;AAAA,YACzD;AAEA,gBAAI;AACJ,gBAAI,KAAK,uBAAuB;AAE9B,kBAAI,WAAW,KAAK;AACpB,mBAAK,OAAO,UAAU;AACpB,qBAAK,0BAA0B,UAAU,GAAG;AAAA,cAC9C;AAAA,YACF,OACK;AACH,mBAAK,uBAAuB;AAAA,YAC9B;AAEA,iBAAK,QAAQ,QAAQ,IAAI,YAAY;AAGrC,gBAAI,KAAK,eAAe;AACtB,mBAAK,SAAS,KAAK,YAAY,KAAK;AAAA,YACtC;AAEA,iBAAK,OAAO;AACZ,iBAAK,QAAQ;AAOb,gBAAI,CAAC,KAAK,eAAe;AACvB,yBAAW,WAAW;AAAA,YACxB;AAEA,gBAAI;AAGJ,gBAAI,KAAK,cAAc;AACrB,0BAAY,MAAM,aAAa,KAAK,WAAW;AAAA,YACjD,OACK;AACH,0BAAY;AAAA,YACd;AAEA,iBAAK,KAAK,UAAU,WAAW,WAAW;AAC1C,mBAAO;AAAA,UACT,SAAS,KAAK;AACZ,iBAAK,SAAS;AACd,iBAAK,mBAAmB,MAAM,IAAI,OAAO;AACzC,iBAAK,KAAK,SAAS,GAAG;AACtB,kBAAO;AAAA,UACT;AAAA,QACF;AAKA,mBAAW,UAAU,MAAM,SAAU,KAAK;AAExC,cAAI,aAAa,OAAO,KAAK;AAC3B,kBAAM,IAAI,UAAU,0CAA0C;AAAA,UAChE;AAIA,cAAI,OAAQ,IAAI,UAAW,aAAa;AACtC,kBAAM,IAAI,MAAM,wDAAwD;AAAA,UAC1E;AAKA,cAAI;AACF,iBAAK,iBAAiB;AACtB,iBAAK;AAEL,gBAAI,MAAM,KAAK,KAAK,GAAG;AACrB,mBAAK,QAAS,KAAK,KAAK,KAAK,KAAK,SAAS,CAAC,EAAE,QAAQ;AAAA,YACxD;AAEA,gBAAI,QAAQ,KAAK;AACjB,gBAAI,QAAQ;AAEZ,gBAAI,CAAC,KAAK,aAAa;AACrB,kBAAI,KAAK,UAAU;AAAA,YACrB;AAEA,qBAAS,IAAI,GAAG,MAAM,KAAK,YAAY,QAAQ,IAAI,KAAK,KAAM;AAC5D,mBAAK,eAAe,KAAK,YAAY,CAAC,GAAG,IAAI,EAAE,IAAI,GAAG;AAAA,YACxD;AAEA,gBAAI,KAAK,SAAS;AAChB,mBAAK,QAAQ,KAAK,KAAK;AAAA,YACzB;AAEA,gBAAI,KAAK,eAAe;AACtB,mBAAK,SAAS,KAAK,KAAK;AAAA,YAC1B;AAGA,iBAAK,KAAK,KAAK,GAAG;AAElB,gBAAI,WAAW,KAAK,KAAK,SAAS;AAIlC,gBAAI,QAAQ,KAAK,aAAa;AAC9B,iBAAK,IAAI,GAAG,IAAI,OAAO,KAAK;AAC1B,mBAAK,aAAa,CAAC,EAAE,iBAAiB,UAAU,IAAI;AAAA,YACtD;AAEA,gBAAI,KAAK,uBAAuB;AAE9B,kBAAI,WAAW,KAAK;AACpB,uBAAS,OAAO,UAAU;AACxB,qBAAK,0BAA0B,UAAU,GAAG;AAAA,cAC9C;AAAA,YACF,OACK;AACH,mBAAK,uBAAuB;AAAA,YAC9B;AAEA,iBAAK,OAAO;AACZ,iBAAK,QAAQ;AAEb,mBAAQ,KAAK,eAAiB,MAAM,KAAK,KAAK,WAAW,IAAM;AAAA,UACjE,SAAS,KAAK;AACZ,iBAAK,SAAS;AACd,iBAAK,mBAAmB,MAAM,IAAI,OAAO;AACzC,iBAAK,KAAK,SAAS,GAAG;AACtB,kBAAO;AAAA,UACT;AAAA,QACF;AASA,mBAAW,UAAU,cAAc,SAAU,gBAAgB,gBAAgB;AAC3E,cAAI,UAAU,KAAK,MAAM,cAAc,GACrC,IAAI,GACJ;AACF,cAAI;AACF,iBAAK,GAAG,IAAI,QAAQ,QAAQ,KAAK;AAC/B,oBAAM,eAAe,QAAQ,CAAC,CAAC;AAC/B,mBAAK,OAAO,GAAG;AAAA,YACjB;AAAA,UAEF,SAAS,KAAK;AACZ,iBAAK,SAAS;AACd,iBAAK,mBAAmB,MAAM,IAAI,OAAO;AAAA,UAC3C;AAAA,QACF;AAQA,mBAAW,UAAU,cAAc,SAAU,OAAO;AAClD,cAAI;AACJ,cAAI,OAAO,UAAU,YAAY;AAC/B,mBAAO,KAAK,KAAK,OAAO,KAAK;AAC7B,iBAAK,OAAO,IAAI;AAAA,UAClB,OAAO;AACL,iBAAK,MAAM,EAAE,KAAK,KAAK,EAAE,OAAO;AAAA,UAClC;AAAA,QACF;AAEA,mBAAW,UAAU,iBAAiB,WAAY;AAChD,eAAK,OAAO,KAAK,KAAK,MAAM,CAAC;AAAA,QAC/B;AAMA,mBAAW,UAAU,yBAAyB,SAAU,WAAW;AACjE,cAAI,MAAM,UAAU;AACpB,cAAI,KAAK,CAAC;AACV,cAAI,MAAM,MAAM;AAChB,cAAI,MAAM,OAAO,KAAK,KAAK,aAAa,EAAE;AAC1C,cAAI,MAAM,OAAO,KAAK,KAAK,YAAY,MAAM,EAAE;AAC/C,cAAI,mBAAmB,KAAK,yBAAyB,OAAO,KAAK,KAAK,aAAa,EAAE,SAAS;AAC9F,cAAI,KAAKH,QAAO;AAEhB,cAAI;AACF,iBAAK,iBAAiB;AAItB,iBAAK,SAAS;AACd,iBAAK,MAAM,GAAG,MAAM,KAAK,OAAO;AAC9B,iBAAG,KAAK,QAAQ,UAAU,GAAG,CAAC,CAAC,IAAI;AAAA,YACrC;AAGA,mBAAO,KAAK,aAAa;AACzB,gBAAK,OAAO,KAAO,MAAM,KAAO,MAAM,GAAI;AACxC,kBAAI,OAAO,GAAG;AAEZ,qBAAK,OAAO,GAAG,OAAO,MAAM,QAAQ;AAElC,uBAAK,aAAa,IAAI,EAAE,eAAe,SAAS;AAAA,gBAClD;AAAA,cACF;AAGA,kBAAI,KAAK,yBAAyB,CAAC,kBAAkB;AAEnD,oBAAI,KAAK,WAAW,KAAK;AAEzB,qBAAK,OAAO,UAAU;AACpB,uBAAK,0BAA0B,WAAW,GAAG;AAAA,gBAC/C;AAAA,cACF,OACK;AACH,qBAAK,uBAAuB;AAAA,cAC9B;AAEA,kBAAI,KAAK;AACP,qBAAK,YAAY,QAAQ,SAAUG,MAAK;AACtC,sBAAI,QAAQH,MAAK,eAAeG,IAAG;AACnC,sBAAI,OAAO;AACT,yBAAK,MAAM,GAAG,MAAM,KAAK,OAAO;AAC9B,4BAAMH,MAAK,KAAK,UAAU,GAAG,CAAC;AAC9B,0BAAI,IAAIG,IAAG,MAAM,QAAQ,IAAIA,IAAG,MAAM,QAAW;AAC/C,8BAAM,OAAO,IAAIA,IAAG,CAAC;AAAA,sBACvB;AAAA,oBACF;AAAA,kBACF;AAAA,gBACF,CAAC;AAAA,cACH;AAAA,YACF;AAKA,gBAAI,CAAC,KAAK,qBAAqB,KAAK,OAAO,OAAO,SAAS,GAAG;AAC5D,mBAAK,MAAM,GAAG,MAAM,KAAK,OAAO;AAC9B,qBAAK,KAAK,UAAU,KAAK,KAAK,UAAU,GAAG,CAAC,CAAC;AAAA,cAC/C;AAAA,YACF;AAIA,iBAAK,OAAO,KAAK,KAAK,OAAO,SAAU,KAAK;AAC1C,qBAAO,CAAC,GAAG,IAAI,KAAK;AAAA,YACtB,CAAC;AAED,gBAAI,KAAK,eAAe;AACtB,mBAAI,MAAI,GAAG,MAAM,KAAK,OAAO;AAC3B,qBAAK,SAAS,KAAK,KAAK,QAAQ,UAAU,GAAG,CAAC,CAAC;AAAA,cACjD;AAAA,YACF;AAIA,iBAAK,UAAU,KAAK,QAAQ,OAAO,SAAU,IAAI;AAC/C,qBAAO,CAAC,GAAG,EAAE;AAAA,YACf,CAAC;AAED,gBAAI,KAAK,yBAAyB,kBAAkB;AAClD,mBAAK,wBAAwB;AAC7B,mBAAK,iBAAiB,IAAI;AAC1B,mBAAK,wBAAwB;AAAA,YAC/B;AAEA,iBAAK,OAAO;AAGZ,iBAAK,QAAQ;AAAA,UACf,SACO,KAAK;AACV,iBAAK,SAAS;AACd,gBAAI,kBAAkB;AACpB,mBAAK,wBAAwB;AAAA,YAC/B;AACA,iBAAK,mBAAmB,MAAM,IAAI,OAAO;AACzC,iBAAK,KAAK,SAAS,GAAG;AACtB,mBAAO;AAAA,UACT;AAAA,QACF;AAMA,mBAAW,UAAU,cAAc,SAAU,OAAO;AAClD,cAAI,MAAM,MAAM,QACd,OAAO,KAAK,KAAK,QACjB;AACF,cAAI,MAAM,CAAC;AACX,cAAI,OAAO,CAAC;AAGZ,eAAK,MAAM,GAAG,MAAM,MAAM,OAAO;AAC/B,gBAAI,KAAK,KAAK,GAAG,EAAE,KAAK,IAAI;AAAA,UAC9B;AAGA,eAAK,MAAM,GAAG,MAAM,KAAK,OAAO;AAC9B,gBAAI,OAAQ,MAAM,GAAG,MAAO,UAAU;AACpC,mBAAK,KAAK,IAAI,MAAM,GAAG,EAAE,KAAK,CAAC;AAAA,YACjC,OACK;AACH,mBAAK,KAAK,IAAI,MAAM,GAAG,CAAC,CAAC;AAAA,YAC3B;AAAA,UACF;AAEA,eAAK,uBAAuB,IAAI;AAAA,QAClC;AAOA,mBAAW,UAAU,SAAS,SAAU,KAAK;AAC3C,cAAI;AAEJ,cAAI,OAAO,QAAQ,UAAU;AAC3B,kBAAM,KAAK,IAAI,GAAG;AAAA,UACpB;AAEA,cAAI,aAAa,OAAO,KAAK;AAC3B,kBAAM,IAAI,MAAM,4BAA4B;AAAA,UAC9C;AACA,cAAI,MAAM,QAAQ,GAAG,GAAG;AACtB,iBAAK,YAAY,GAAG;AACpB;AAAA,UACF;AAEA,cAAI,CAAC,eAAe,KAAK,KAAK,OAAO,GAAG;AACtC,kBAAM,IAAI,MAAM,mDAAmD;AAAA,UACrE;AAEA,cAAI;AACF,iBAAK,iBAAiB;AACtB,gBAAI,MAAM,KAAK,IAAI,IAAI,OAAO,IAAI,GAEhC,WAAW,IAAI,CAAC;AAClB,gBAAIH,QAAO;AACX,iBAAK,YAAY,QAAQ,SAAUG,MAAK;AACtC,kBAAI,IAAIA,IAAG,MAAM,QAAQ,OAAO,IAAIA,IAAG,MAAM,aAAa;AACxD,oBAAI,QAAQH,MAAK,eAAeG,IAAG;AACnC,oBAAI,OAAO;AACT,wBAAM,OAAO,IAAIA,IAAG,CAAC;AAAA,gBACvB;AAAA,cACF;AAAA,YACF,CAAC;AAGD,qBAAS,MAAM,GAAG,MAAM,KAAK,aAAa,QAAQ,OAAO;AACvD,mBAAK,aAAa,GAAG,EAAE,eAAe,QAAQ;AAAA,YAChD;AAEA,gBAAI,KAAK,uBAAuB;AAE9B,kBAAI,KAAK,WAAW,KAAK;AACzB,mBAAK,OAAO,UAAU;AACpB,qBAAK,0BAA0B,UAAU,GAAG;AAAA,cAC9C;AAAA,YACF,OACK;AACH,mBAAK,uBAAuB;AAAA,YAC9B;AAEA,iBAAK,KAAK,OAAO,UAAU,CAAC;AAC5B,iBAAK,yBAAyB,GAAG;AAGjC,iBAAK,QAAQ,OAAO,UAAU,CAAC;AAE/B,gBAAI,KAAK,eAAe;AACtB,mBAAK,SAAS,KAAK,IAAI,KAAK;AAAA,YAC9B;AAEA,iBAAK,OAAO;AACZ,iBAAK,QAAQ;AACb,iBAAK,KAAK,UAAU,IAAI,CAAC,CAAC;AAE1B,gBAAI,CAAC,KAAK,eAAe;AACvB,oBAAM,SAAS,GAAG;AAAA,YACpB;AACA,mBAAO,IAAI;AACX,mBAAO,IAAI;AACX,gBAAI,CAAC,KAAK,eAAe;AACvB,qBAAO,GAAG;AAAA,YACZ;AACA,mBAAO;AAAA,UAET,SAAS,KAAK;AACZ,iBAAK,SAAS;AACd,iBAAK,mBAAmB,MAAM,IAAI,OAAO;AACzC,iBAAK,KAAK,SAAS,GAAG;AACtB,mBAAO;AAAA,UACT;AAAA,QACF;AAcA,mBAAW,UAAU,MAAM,SAAU,IAAI,gBAAgB;AACvD,cAAI,CAAC,KAAK,SAAS;AACjB,iBAAK,SAAS;AAAA,UAChB;AAEA,cAAI,SAAS,kBAAkB,OAC7B,OAAO,KAAK,SACZ,MAAM,KAAK,SAAS,GACpB,MAAM,GACN,MAAO,MAAM,OAAQ;AAEvB,eAAK,OAAO,OAAO,WAAW,KAAK,SAAS,IAAI,EAAE;AAElD,cAAI,MAAM,EAAE,GAAG;AACb,kBAAM,IAAI,UAAU,6BAA6B;AAAA,UACnD;AAEA,iBAAO,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG;AAC5B,kBAAO,MAAM,OAAQ;AAErB,gBAAI,KAAK,GAAG,IAAI,IAAI;AAClB,oBAAM,MAAM;AAAA,YACd,OAAO;AACL,oBAAM;AAAA,YACR;AAAA,UACF;AAEA,cAAI,QAAQ,OAAO,KAAK,GAAG,MAAM,IAAI;AACnC,gBAAI,QAAQ;AACV,qBAAO,CAAC,KAAK,KAAK,GAAG,GAAG,GAAG;AAAA,YAC7B;AACA,mBAAO,KAAK,KAAK,GAAG;AAAA,UACtB;AACA,iBAAO;AAAA,QAET;AASA,mBAAW,UAAU,yBAAyB,SAAU,cAAc,iBAAiB;AACrF,cAAI,MAAM,MAAM,MAAM,KAAK,KAAK,YAAY,GAAG,iBAAiB,IAAI;AACpE,cAAI,QAAQ,KAAK,cAAc,eAAe,EAAE;AAIhD,cAAI,QAAQ,KAAK,eAAe,OAAO,iBAAiB,GAAG;AAE3D,cAAI,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,IAAI;AAErC,mBAAO;AAAA,UACT;AAEA,cAAI,MAAM,MAAM,CAAC;AACjB,cAAI,MAAM,MAAM,CAAC;AAKjB,mBAAS,MAAM,KAAK,OAAO,KAAK,OAAO;AACrC,gBAAI,MAAM,GAAG,MAAM,aAAc,QAAO;AAAA,UAC1C;AAGA,iBAAO;AAAA,QACT;AAOA,mBAAW,UAAU,4BAA4B,SAAU,cAAc,iBAAiB;AACxF,cAAI,mBAAoB,gBAAgB,QAAQ,GAAG,MAAM;AACzD,cAAI,QAAQ,KAAK,cAAc,eAAe,EAAE;AAChD,cAAI,MAAM,MAAM,MAAM,KAAK,KAAK,YAAY,GAAG,iBAAiB,gBAAgB;AAGhF,cAAI,KAAK,wBAAwB,QAAQ,eAAe,MAAM;AAC5D,iBAAK,KAAK,YAAY,EAAE,eAAe,IAAI,IAAI,QAAQ;AACvD,kBAAM,MAAM,MAAM,KAAK,KAAK,YAAY,GAAG,eAAe;AAAA,UAC5D;AAEA,cAAI,SAAU,MAAM,WAAW,IAAK,IAAI,KAAK,oBAAoB,iBAAiB,KAAK,MAAM,gBAAgB;AAI7G,eAAK,cAAc,eAAe,EAAE,OAAO,OAAO,QAAQ,GAAG,YAAY;AAAA,QAC3E;AAOA,mBAAW,UAAU,4BAA4B,SAAU,cAAc,iBAAiB;AAGxF,cAAI,QACF,QAAQ,KAAK,cAAc,eAAe,EAAE,QAC5C,MAAM,MAAM;AAEd,eAAK,SAAS,GAAG,SAAS,KAAK,UAAU;AACvC,gBAAI,MAAM,MAAM,MAAM,aAAc;AAAA,UACtC;AAGA,eAAK,cAAc,eAAe,EAAE,OAAO,OAAO,QAAQ,CAAC;AAG3D,eAAK,0BAA0B,cAAc,eAAe;AAAA,QAC9D;AAOA,mBAAW,UAAU,4BAA4B,SAAU,cAAc,iBAAiB,sBAAsB;AAC9G,cAAI,KAAK,KAAK,cAAc,eAAe;AAC3C,cAAI,KAAK,KAAK,OAAO,OAAO,MAAM,CAAC;AACnC,cAAI,MAAM,OAAO;AAEjB,cAAI,MAAM,QAAQ,YAAY,GAAG;AAG/B,oBAAQ,aAAa;AACrB,gBAAI,UAAU,GAAG;AACf,6BAAe,aAAa,CAAC;AAAA,YAC/B,OAEK;AACH,mBAAK,QAAQ,GAAG,QAAQ,OAAO,SAAS;AACtC,oBAAI,aAAa,KAAK,CAAC,IAAI;AAAA,cAC7B;AAGA,iBAAG,SAAS,GAAG,OAAO,OAAO,SAAU,IAAI;AAAE,uBAAO,CAAC,IAAI,EAAE;AAAA,cAAG,CAAC;AAI/D,kBAAI,yBAAyB,MAAM;AACjC;AAAA,cACF;AAEA,kBAAI,kBAAkB,aAAa,MAAM;AACzC,8BAAgB,KAAK,SAAU,GAAG,GAAG;AAAE,uBAAO,IAAI;AAAA,cAAG,CAAC;AAItD,oBAAM,GAAG,OAAO;AAChB,mBAAK,MAAM,GAAG,MAAM,KAAK,OAAO;AAC9B,uBAAO,GAAG,OAAO,GAAG;AACpB,wBAAQ;AACR,qBAAK,QAAQ,GAAG,QAAQ,SAAS,OAAO,gBAAgB,KAAK,GAAG,SAAS;AACvE;AAAA,gBACF;AACA,mBAAG,OAAO,GAAG,KAAK;AAAA,cACpB;AAGA;AAAA,YACF;AAAA,UAGF;AAEA,mBAAS,KAAK,uBAAuB,cAAc,eAAe;AAElE,cAAI,WAAW,MAAM;AAEnB,mBAAO;AAAA,UACT;AAGA,aAAG,OAAO,OAAO,QAAQ,CAAC;AAI1B,cAAI,yBAAyB,MAAM;AACjC;AAAA,UACF;AAIA,gBAAM,GAAG,OAAO;AAChB,eAAK,MAAM,GAAG,MAAM,KAAK,OAAO;AAC9B,gBAAI,GAAG,OAAO,GAAG,IAAI,cAAc;AACjC,iBAAG,OAAO,GAAG;AAAA,YACf;AAAA,UACF;AAAA,QACF;AAgBA,mBAAW,UAAU,sBAAsB,SAAU,MAAM,KAAK,UAAU,kBAAkB;AAC1F,cAAI,MAAM,KAAK;AACf,cAAI,QAAQ,KAAK,cAAc,IAAI,EAAE;AACrC,cAAI,MAAM;AACV,cAAI,MAAM,MAAM,SAAS;AACzB,cAAI,MAAM;AAEV,cAAI,MAAM,WAAW,GAAG;AACtB,mBAAO;AAAA,UACT;AAEA,cAAI,SAAS,MAAM,MAAM,IAAI,MAAM,GAAG,CAAC,GAAG,MAAM,gBAAgB;AAChE,cAAI,SAAS,MAAM,MAAM,IAAI,MAAM,GAAG,CAAC,GAAG,MAAM,gBAAgB;AAGhE,iBAAO,MAAM,KAAK;AAChB,kBAAO,MAAM,OAAQ;AAErB,gBAAI,YAAY,GAAG,MAAM,MAAM,IAAI,MAAM,GAAG,CAAC,GAAG,MAAM,gBAAgB,GAAG,KAAK,KAAK,GAAG;AACpF,oBAAM,MAAM;AAAA,YACd,OAAO;AACL,oBAAM;AAAA,YACR;AAAA,UACF;AAEA,cAAI,SAAS;AAGb,cAAI,YAAY,IAAI,KAAK,MAAM,MAAM,IAAI,MAAM,MAAM,CAAC,GAAG,MAAM,gBAAgB,CAAC,GAAG;AACjF,mBAAO;AAAA,UACT;AAGA,cAAI,YAAY,GAAG,KAAK,MAAM,MAAM,IAAI,MAAM,MAAM,CAAC,GAAG,MAAM,gBAAgB,GAAG,KAAK,GAAG;AACvF,mBAAO,WAAW,SAAS,SAAS;AAAA,UACtC;AAGA,iBAAO,WAAW,SAAS,IAAI;AAAA,QACjC;AAMA,mBAAW,UAAU,oBAAoB,SAAU,MAAM,KAAK,kBAAkB;AAC9E,cAAI,MAAM,KAAK;AACf,cAAI,QAAQ,KAAK,cAAc,IAAI,EAAE;AACrC,cAAI,MAAM;AACV,cAAI,MAAM,MAAM,SAAS;AACzB,cAAI,MAAM;AAEV,cAAI,MAAM,WAAW,GAAG;AACtB,mBAAO;AAAA,UACT;AAEA,cAAI,SAAS,MAAM,MAAM,IAAI,MAAM,GAAG,CAAC,GAAG,MAAM,gBAAgB;AAChE,cAAI,SAAS,MAAM,MAAM,IAAI,MAAM,GAAG,CAAC,GAAG,MAAM,gBAAgB;AAGhE,iBAAO,MAAM,KAAK;AAChB,kBAAO,MAAM,OAAQ;AAErB,gBAAI,YAAY,GAAG,KAAK,MAAM,MAAM,IAAI,MAAM,GAAG,CAAC,GAAG,MAAM,gBAAgB,GAAG,KAAK,GAAG;AACpF,oBAAM;AAAA,YACR,OAAO;AACL,oBAAM,MAAM;AAAA,YACd;AAAA,UACF;AAEA,cAAI,SAAS;AAGb,cAAI,YAAY,IAAI,KAAK,MAAM,MAAM,IAAI,MAAM,MAAM,CAAC,GAAG,MAAM,gBAAgB,CAAC,GAAG;AACjF,mBAAO;AAAA,UACT;AAGA,cAAI,YAAY,GAAG,KAAK,MAAM,MAAM,IAAI,MAAM,MAAM,CAAC,GAAG,MAAM,gBAAgB,GAAG,KAAK,GAAG;AACvF,mBAAO,SAAS;AAAA,UAClB;AAGA,cAAI,YAAY,IAAI,KAAK,MAAM,MAAM,IAAI,MAAM,SAAS,CAAC,CAAC,GAAG,MAAM,gBAAgB,CAAC,GAAG;AACrF,mBAAO,SAAS;AAAA,UAClB;AAGA,iBAAO;AAAA,QACT;AAYA,mBAAW,UAAU,iBAAiB,SAAU,IAAI,MAAM,KAAK;AAC7D,cAAI,MAAM,KAAK;AACf,cAAI,QAAQ,KAAK,cAAc,IAAI,EAAE;AACrC,cAAI,MAAM;AACV,cAAI,MAAM,MAAM,SAAS;AACzB,cAAI,MAAM;AACV,cAAI,QAAQ;AACZ,cAAI,QAAQ;AAGZ,cAAI,IAAI,WAAW,GAAG;AACpB,mBAAO,CAAC,GAAG,EAAE;AAAA,UACf;AAEA,cAAI,mBAAoB,KAAK,QAAQ,GAAG,MAAM;AAE9C,cAAI,SAAS,MAAM,MAAM,IAAI,MAAM,GAAG,CAAC,GAAG,MAAM,gBAAgB;AAChE,cAAI,SAAS,MAAM,MAAM,IAAI,MAAM,GAAG,CAAC,GAAG,MAAM,gBAAgB;AAGhE,kBAAQ,IAAI;AAAA,YACV,KAAK;AAAA,YACL,KAAK;AACH,kBAAI,YAAY,GAAG,KAAK,QAAQ,KAAK,KAAK,YAAY,GAAG,KAAK,QAAQ,KAAK,GAAG;AAC5E,uBAAO,CAAC,GAAG,EAAE;AAAA,cACf;AACA;AAAA,YACF,KAAK;AACH,kBAAI,YAAY,GAAG,KAAK,QAAQ,KAAK,KAAK,YAAY,GAAG,KAAK,QAAQ,KAAK,GAAG;AAC5E,uBAAO,CAAC,GAAG,EAAE;AAAA,cACf;AACA;AAAA,YACF,KAAK;AAEH,kBAAI,YAAY,GAAG,KAAK,QAAQ,IAAI,GAAG;AACrC,uBAAO,CAAC,GAAG,EAAE;AAAA,cACf;AAEA,kBAAI,YAAY,GAAG,QAAQ,KAAK,KAAK,GAAG;AACtC,uBAAO,CAAC,KAAK,GAAG;AAAA,cAClB;AACA;AAAA,YACF,KAAK;AAEH,kBAAI,YAAY,GAAG,KAAK,QAAQ,KAAK,GAAG;AACtC,uBAAO,CAAC,GAAG,EAAE;AAAA,cACf;AAEA,kBAAI,YAAY,GAAG,QAAQ,KAAK,IAAI,GAAG;AACrC,uBAAO,CAAC,KAAK,GAAG;AAAA,cAClB;AACA;AAAA,YACF,KAAK;AAEH,kBAAI,YAAY,GAAG,KAAK,QAAQ,IAAI,GAAG;AACrC,uBAAO,CAAC,GAAG,EAAE;AAAA,cACf;AAEA,kBAAI,YAAY,GAAG,QAAQ,KAAK,KAAK,GAAG;AACtC,uBAAO,CAAC,KAAK,GAAG;AAAA,cAClB;AACA;AAAA,YACF,KAAK;AAEH,kBAAI,YAAY,GAAG,KAAK,QAAQ,KAAK,GAAG;AACtC,uBAAO,CAAC,GAAG,EAAE;AAAA,cACf;AAEA,kBAAI,YAAY,GAAG,QAAQ,KAAK,IAAI,GAAG;AACrC,uBAAO,CAAC,KAAK,GAAG;AAAA,cAClB;AACA;AAAA,YACF,KAAK;AAEH,kBAAI,YAAY,GAAG,IAAI,CAAC,GAAG,QAAQ,KAAK,GAAG;AACzC,uBAAO,CAAC,GAAG,EAAE;AAAA,cACf;AAEA,kBAAI,YAAY,GAAG,IAAI,CAAC,GAAG,QAAQ,KAAK,GAAG;AACzC,uBAAO,CAAC,GAAG,EAAE;AAAA,cACf;AAEA,uBAAS,KAAK,oBAAoB,MAAM,IAAI,CAAC,GAAG,OAAO,gBAAgB;AACvE,uBAAS,KAAK,kBAAkB,MAAM,IAAI,CAAC,GAAG,gBAAgB;AAE9D,kBAAI,SAAS,EAAG;AAChB,kBAAI,SAAS,IAAK;AAElB,kBAAI,CAAC,YAAY,GAAG,MAAM,MAAM,IAAI,MAAM,MAAM,CAAC,GAAG,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,IAAI,EAAG;AAC5F,kBAAI,CAAC,YAAY,GAAG,MAAM,MAAM,IAAI,MAAM,MAAM,CAAC,GAAG,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,IAAI,EAAG;AAE5F,kBAAI,SAAS,OAAQ,QAAO,CAAC,GAAG,EAAE;AAElC,qBAAQ,CAAC,QAAQ,MAAM;AAAA,YACzB,KAAK;AACH,kBAAI,SAAS,CAAC,GACZ,YAAY,CAAC;AAEf,uBAAS,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC9C,oBAAI,MAAM,KAAK,eAAe,OAAO,MAAM,IAAI,CAAC,CAAC;AAEjD,yBAAS,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,KAAK;AACrC,sBAAI,OAAO,CAAC,MAAM,QAAW;AAC3B,2BAAO,CAAC,IAAI;AACZ,8BAAU,KAAK,CAAC;AAAA,kBAClB;AAAA,gBACF;AAAA,cACF;AACA,qBAAO;AAAA,UACX;AAGA,kBAAQ,IAAI;AAAA,YACV,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH,uBAAS,KAAK,oBAAoB,MAAM,KAAK,OAAO,gBAAgB;AACpE,qBAAO,MAAM,MAAM,IAAI,MAAM,MAAM,CAAC,GAAG,MAAM,gBAAgB;AAC7D;AAAA,YACF;AAAS;AAAA,UACX;AAGA,kBAAQ,IAAI;AAAA,YACV,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH,uBAAS,KAAK,kBAAkB,MAAM,KAAK,gBAAgB;AAC3D,qBAAO,MAAM,MAAM,IAAI,MAAM,MAAM,CAAC,GAAG,MAAM,gBAAgB;AAC7D;AAAA,YACF;AAAS;AAAA,UACX;AAGA,kBAAQ,IAAI;AAAA,YACV,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAEH,kBAAI,CAAC,YAAY,IAAI,MAAM,GAAG,GAAG;AAC/B,uBAAO,CAAC,GAAG,EAAE;AAAA,cACf;AAEA,qBAAO,CAAC,QAAQ,MAAM;AAAA,YAExB,KAAK;AAEH,kBAAI,CAAC,YAAY,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,CAAC,GAAG,MAAM,gBAAgB,GAAG,GAAG,GAAG;AAClF,uBAAO,CAAC,QAAQ,GAAG;AAAA,cACrB;AAEA,qBAAO,CAAC,SAAS,GAAG,GAAG;AAAA,YAEzB,KAAK;AAEH,kBAAI,CAAC,YAAY,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,CAAC,GAAG,MAAM,gBAAgB,GAAG,GAAG,GAAG;AAClF,uBAAO,CAAC,SAAS,GAAG,GAAG;AAAA,cACzB;AAEA,qBAAO,CAAC,QAAQ,GAAG;AAAA,YAErB,KAAK;AAEH,kBAAI,CAAC,YAAY,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,CAAC,GAAG,MAAM,gBAAgB,GAAG,GAAG,GAAG;AAClF,uBAAO,CAAC,KAAK,MAAM;AAAA,cACrB;AAEA,qBAAO,CAAC,KAAK,SAAS,CAAC;AAAA,YAEzB,KAAK;AAEH,kBAAI,CAAC,YAAY,IAAI,MAAM,MAAM,IAAI,MAAM,MAAM,CAAC,GAAG,MAAM,gBAAgB,GAAG,GAAG,GAAG;AAClF,uBAAO,CAAC,KAAK,SAAS,CAAC;AAAA,cACzB;AAEA,qBAAO,CAAC,KAAK,MAAM;AAAA,YAErB;AACE,qBAAO,CAAC,GAAG,IAAI,SAAS,CAAC;AAAA,UAC7B;AAAA,QACF;AASA,mBAAW,UAAU,KAAK,SAAU,OAAO,OAAO;AAChD,cAAIH;AACJ,cAAI,UAAU,QAAW;AACvB,YAAAA,QAAO;AACP,mBAAO,SAAUI,QAAO;AACtB,qBAAOJ,MAAK,GAAG,OAAOI,MAAK;AAAA,YAC7B;AAAA,UACF;AAEA,cAAI,SAAS,KAAK,eAAe,OAAO,IAAI,EAAE,IAAI,KAAK;AACvD,cAAI,CAAC,KAAK,cAAc;AACtB,mBAAO;AAAA,UACT,OAAO;AACL,mBAAO,MAAM,QAAQ,KAAK,WAAW;AAAA,UACvC;AAAA,QACF;AAQA,mBAAW,UAAU,UAAU,SAAU,OAAO;AAC9C,kBAAQ,SAAS,CAAC;AAGlB,cAAI,SAAS,KAAK,MAAM,EAAE,KAAK,OAAO,IAAI,EAAE,KAAK;AAEjD,cAAI,MAAM,QAAQ,MAAM,KAAK,OAAO,WAAW,GAAG;AAChD,mBAAO;AAAA,UACT,OAAO;AACL,gBAAI,CAAC,KAAK,cAAc;AACtB,qBAAO,OAAO,CAAC;AAAA,YACjB,OAAO;AACL,qBAAO,MAAM,OAAO,CAAC,GAAG,KAAK,WAAW;AAAA,YAC1C;AAAA,UACF;AAAA,QACF;AAWA,mBAAW,UAAU,QAAQ,SAAU,WAAW,YAAY;AAC5D,cAAI,KAAK,IAAI,UAAU,IAAI;AAE3B,cAAI,OAAO,cAAc,aAAa;AACpC,mBAAO;AAAA,UACT;AAEA,iBAAO,GAAG,UAAU,WAAW,UAAU;AAAA,QAC3C;AAUA,mBAAW,UAAU,OAAO,SAAU,OAAO;AAC3C,iBAAO,KAAK,MAAM,EAAE,KAAK,KAAK,EAAE,KAAK;AAAA,QACvC;AAMA,mBAAW,UAAU,mBAAmB,SAAU,MAAM,OAAO;AAC7D,cAAI,IAAI,KAAK,KAAK,QAChB;AACF,iBAAO,KAAK;AACV,gBAAI,MAAM,MAAM,KAAK,KAAK,CAAC,GAAG,MAAM,IAAI,MAAM,OAAO;AACnD,oBAAM,KAAK,KAAK,CAAC;AACjB,qBAAO;AAAA,YACT;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAOA,mBAAW,UAAU,mBAAmB,WAAY;AAAA,QAIpD;AAGA,mBAAW,UAAU,SAAS,WAAY;AAAA,QAI1C;AAGA,mBAAW,UAAU,WAAW,WAAY;AAAA,QAI5C;AAgBA,mBAAW,UAAU,QAAQ,SAAU,KAAK;AAC1C,iBAAO,KAAK,MAAM,EAAE,MAAM,GAAG,EAAE,KAAK;AAAA,QACtC;AAUA,iBAAS,YAAY,aAAa;AAChC,eAAK,QAAQ;AACb,eAAK,SAAS,uBAAO,OAAO,IAAI;AAChC,eAAK,UAAU,uBAAO,OAAO,IAAI;AAAA,QACnC;AACA,oBAAY,UAAU,SAAS,CAAC;AAChC,oBAAY,UAAU,UAAU,CAAC;AACjC,oBAAY,UAAU,MAAM,SAAU,KAAK;AACzC,cAAI,aAAa,IAAI,KAAK,KAAK;AAC/B,cAAI,eAAe,QAAQ,OAAQ,eAAgB,aAAa;AAC9D,gBAAI,KAAK,OAAO,UAAU,GAAG;AAC3B,oBAAM,IAAI,MAAM,gCAAgC,KAAK,QAAQ,OAAO,UAAU;AAAA,YAChF,OAAO;AACL,mBAAK,OAAO,UAAU,IAAI;AAC1B,mBAAK,QAAQ,IAAI,KAAK,IAAI;AAAA,YAC5B;AAAA,UACF;AAAA,QACF;AACA,oBAAY,UAAU,MAAM,SAAU,KAAK;AACzC,iBAAO,KAAK,OAAO,GAAG;AAAA,QACxB;AAEA,oBAAY,UAAU,OAAO,SAAU,IAAI;AACzC,iBAAO,KAAK,OAAO,KAAK,QAAQ,EAAE,CAAC;AAAA,QACrC;AAMA,oBAAY,UAAU,SAAS,SAAU,KAAK,KAAK;AACjD,cAAI,KAAK,QAAQ,IAAI,KAAK,MAAM,IAAI,KAAK,KAAK,GAAG;AAC/C,gBAAI,MAAM,KAAK,QAAQ,IAAI,KAAK;AAChC,iBAAK,IAAI,GAAG;AAEZ,iBAAK,OAAO,GAAG,IAAI;AAAA,UACrB,OAAO;AACL,iBAAK,OAAO,IAAI,KAAK,KAAK,CAAC,IAAI;AAAA,UACjC;AAAA,QACF;AACA,oBAAY,UAAU,SAAS,SAAU,KAAK;AAC5C,cAAI,MAAM,KAAK,OAAO,GAAG;AACzB,cAAI,QAAQ,QAAQ,OAAO,QAAQ,aAAa;AAE9C,iBAAK,OAAO,GAAG,IAAI;AACnB,iBAAK,QAAQ,IAAI,KAAK,IAAI;AAAA,UAC5B,OAAO;AACL,kBAAM,IAAI,MAAM,iCAAiC,KAAK,KAAK;AAAA,UAC7D;AAAA,QACF;AACA,oBAAY,UAAU,QAAQ,WAAY;AACxC,eAAK,SAAS,uBAAO,OAAO,IAAI;AAChC,eAAK,UAAU,uBAAO,OAAO,IAAI;AAAA,QACnC;AAIA,aAAK,aAAa;AAClB,aAAK,SAAS;AACd,aAAK,WAAW;AAChB,aAAK,UAAU;AACf,aAAK,aAAa;AAIlB,aAAK,YAAY;AAIjB,aAAK,oBAAoB;AAIzB,aAAK,MAAM;AACX,aAAK,KAAK;AACV,aAAK,KAAK;AACV,aAAK,cAAc;AACnB,eAAO;AAAA,MACT,GAAE;AAAA,IAEJ,CAAC;AAAA;AAAA;;;ACjtJD;AAAA;AAAA;AAEA,QAAI,yBAAyB;AAC7B,YAAQ,aAAa;AACrB,YAAQ,iBAAiB;AACzB,YAAQ,iBAAiB;AACzB,YAAQ,UAAU;AAClB,QAAI,YAAY,uBAAuB,iBAAyC;AAChF,QAAI,UAAU,uBAAuB,gBAAuC;AAG5E,QAAI,iBAAiB,SAAU,sBAAsB;AACnD,aAAO,IAAI,QAAQ,SAAU,SAAS;AAEpC,YAAI,gBAAgB,OAAO,WAAW;AACpC,kBAAQ,KAAK;AAAA,QACf;AAIA,YAAI,eAAe,UAAU,KAAK,sBAAsB;AACxD,qBAAa,YAAY,SAAU,GAAG;AACpC,cAAI,KAAK,EAAE,OAAO;AAClB,aAAG,MAAM;AACT,kBAAQ,IAAI;AAAA,QACd;AACA,qBAAa,UAAU,SAAU,OAAO;AACtC,cAAI;AACJ,cAAI,QAAQ,SAAS,SAAS,WAAW,QAAQ,SAAS,UAAU,gBAAgB,MAAM,WAAW,WAAW,gBAAgB,SAAS,cAAc;AAIvJ,kBAAQ,QAAQ,MAAM,iKAAiK,OAAO,KAAK;AACnM,cAAI,SAAS,yBAAyB,MAAM,MAAM;AAChD,oBAAQ,QAAQ,IAAI,+CAA+C,KAAK;AACxE,oCAAwB,qBAAqB,KAAK;AAAA,UACpD;AACA,kBAAQ,KAAK;AAAA,QACf;AACA,qBAAa,YAAY,WAAY;AACnC,kBAAQ,QAAQ,MAAM,mCAAmC;AAAA,QAC3D;AAAA,MACF,CAAC;AAAA,IACH;AACA,aAAS,eAAe,SAAS;AAC/B,aAAO,IAAI,QAAQ,SAAU,SAAS,QAAQ;AAC5C,YAAI,yBAAyB,SAAS,sBAAsB,QAAQ,4BAA4B,uBAAuB,oBAAoB;AAC3I,SAAC;AAAA,UACC;AAAA,UACA,kBAAkB;AAAA,UAClB;AAAA,UACA;AAAA,UACA,6BAA6B,CAAC;AAAA,QAChC,IAAI;AACJ,YAAI,SAAS;AACX,iBAAO,QAAQ,OAAO;AAAA,QACxB,OAAO;AACL,iBAAO,QAAQ,QAAQ,eAAe,oBAAoB,CAAC,EAAE,MAAK,SAAU,UAAU;AACpF,gBAAI;AACF,kBAAI,UAAU;AACZ,oBAAI,yBAAyB;AAC3B,0CAAwB,QAAQ,YAAY,0CAAsD;AAElG,yBAAO,QAAQ,IAAI,sBAAsB,0BAA0B,CAAC;AAAA,gBACtE;AACA,qCAAqB;AACrB,uBAAO,QAAQ,IAAI,mBAAmB,MAAM,CAAC;AAAA,cAC/C;AACA,qBAAO,MAAM,KAAK,IAAI;AAAA,YACxB,SAAS,UAAU;AACjB,qBAAO,OAAO,QAAQ;AAAA,YACxB;AAAA,UACF,GAAE,KAAK,IAAI,GAAG,MAAM;AAAA,QACtB;AAIA,iBAAS,QAAQ;AACf,WAAC;AAAA,YACC;AAAA,UACF,IAAI,QAAQ,YAAY,0BAAoB;AAC5C,iBAAO,QAAQ,IAAI,kBAAkB,CAAC;AAAA,QACxC;AACA,eAAO,MAAM,KAAK,IAAI;AAAA,MACxB,CAAC;AAAA,IACH;AACA,aAAS,QAAQ,SAAS;AACxB,aAAO,IAAI,QAAQ,SAAU,SAAS,QAAQ;AAC5C,YAAI,kBAAkB,QAAQ;AAC9B,SAAC;AAAA,UACC,mBAAmB,CAAC;AAAA,QACtB,IAAI;AACJ,iBAAS,QAAQ,YAAY,0BAAoB;AACjD,eAAO,QAAQ,QAAQ,eAAe,OAAO,CAAC,EAAE,KAAK,SAAU,UAAU;AACvE,cAAI;AACF,mBAAO,IAAI,OAAO,QAAQ,SAAS,GAAG,UAAU,SAAS;AAAA,cACvD,SAAS;AAAA,cACT,UAAU;AAAA,cACV,kBAAkB;AAAA,cAClB,SAAS;AAAA,YACX,GAAG,gBAAgB,CAAC;AACpB,mBAAO,QAAQ,QAAQ,IAAI,QAAQ,SAAU,SAAS,QAAQ;AAC5D,mBAAK,aAAa,CAAC,GAAG,SAAU,OAAO;AACrC,wBAAQ,OAAO,KAAK,IAAI,QAAQ;AAAA,cAClC,CAAC;AAAA,YACH,CAAC,CAAC,EAAE,KAAK,SAAU,UAAU;AAC3B,kBAAI;AACF,uBAAO,QAAQ,IAAI;AAAA,cACrB,SAAS,UAAU;AACjB,uBAAO,OAAO,QAAQ;AAAA,cACxB;AAAA,YACF,GAAG,MAAM;AAAA,UACX,SAAS,UAAU;AACjB,mBAAO,OAAO,QAAQ;AAAA,UACxB;AAAA,QACF,GAAG,MAAM;AAAA,MACX,CAAC;AAAA,IACH;AACA,aAAS,eAAe,MAAM;AAC5B,aAAO,IAAI,QAAQ,SAAU,SAAS,QAAQ;AAC5C,eAAO,QAAQ,QAAQ,IAAI,QAAQ,SAAU,SAAS,QAAQ;AAG5D,eAAK,MAAM,WAAY;AACrB,iBAAK,eAAe,CAAC,GAAG,SAAU,UAAU;AAG1C,kBAAI,YAAY,SAAS,WAAW,aAAa,QAAW;AAC1D,wBAAQ;AAAA,cACV,OAAO;AACL,uBAAO,QAAQ;AAAA,cACjB;AAAA,YACF,CAAC;AAAA,UACH,CAAC;AAAA,QACH,CAAC,CAAC,EAAE,KAAK,SAAU,UAAU;AAC3B,cAAI;AACF,mBAAO,QAAQ;AAAA,UACjB,SAAS,UAAU;AACjB,mBAAO,OAAO,QAAQ;AAAA,UACxB;AAAA,QACF,GAAG,MAAM;AAAA,MACX,CAAC;AAAA,IACH;AAMA,aAAS,eAAe,MAAM;AAC5B,UAAI;AAEF,YAAI,eAAe,SAASC,gBAAe;AACzC,gBAAM,IAAI,MAAM,2DAA2D;AAAA,QAC7E;AACA,aAAK,OAAO;AACZ,aAAK,eAAe;AACpB,aAAK,uBAAuB;AAE5B,aAAK,WAAW;AAChB,aAAK,gBAAgB;AAErB,aAAK,MAAM;AAAA,MACb,SAAS,OAAO;AACd,gBAAQ,QAAQ,MAAM,oCAAoC;AAC1D,gBAAQ,QAAQ,MAAM,KAAK;AAAA,MAC7B;AAAA,IACF;AAAA;AAAA;;;ACtKA;AAAA;AAAA;AAEA,QAAI,yBAAyB;AAC7B,YAAQ,aAAa;AACrB,YAAQ,UAAU;AAClB,QAAI,aAAa,uBAAuB,mBAA6C;AACrF,QAAI,gBAAgB,uBAAuB,sBAA4C;AAGvF,QAAI,cAAc;AAAA,MAChB,MAAM;AAAA,QACJ,MAAM;AAAA,MACR;AAAA,IACF;AACA,QAAI,mBAAmB,SAAU,YAAY,OAAO;AAMlD,UAAI;AAAA,QACF;AAAA,MACF,IAAI;AACJ,UAAI,WAAW,MAAM,QAAQ;AAE3B,gBAAQ,UAAU;AAAA,UAChB,KAAK;AACH,mBAAO;AAAA,cACL,OAAO;AAAA,YACT;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,MAAM;AAAA,gBACJ,OAAO;AAAA,cACT;AAAA,YACF;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,MAAM;AAAA,YACR;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,OAAO;AAAA,YACT;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,MAAM;AAAA,YACR;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,MAAM,CAAC;AAAA,gBACL,MAAM;AAAA,cACR,GAAG,WAAW;AAAA,YAChB;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,MAAM,CAAC;AAAA,gBACL,OAAO;AAAA,cACT,GAAG,WAAW;AAAA,YAChB;AAAA,UACF;AACE,kBAAM,IAAI,MAAM,oBAAoB,OAAO,UAAU,yBAAyB,CAAC;AAAA,QACnF;AAAA,MACF,OAAO;AACL,gBAAQ,UAAU;AAAA,UAChB,KAAK;AACH,mBAAO;AAAA,cACL,MAAM;AAAA,YACR;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,MAAM;AAAA,gBACJ,MAAM;AAAA,cACR;AAAA,YACF;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,KAAK;AAAA,YACP;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,MAAM;AAAA,YACR;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,KAAK;AAAA,YACP;AAAA;AAAA,UAEF,KAAK;AACH,mBAAO;AAAA,cACL,MAAM,CAAC;AAAA,gBACL,KAAK;AAAA,cACP,GAAG,WAAW;AAAA,YAChB;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,MAAM,CAAC;AAAA,gBACL,MAAM;AAAA,cACR,GAAG,WAAW;AAAA,YAChB;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,KAAK;AAAA,YACP;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,MAAM,CAAC;AAAA,gBACL,MAAM;AAAA,cACR,GAAG,WAAW;AAAA,YAChB;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,UAAU;AAAA,YACZ;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,SAAS,GAAG,cAAc,SAAS,KAAK;AAAA,YAC1C;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,MAAM,CAAC;AAAA,gBACL,MAAM;AAAA,kBACJ,KAAK;AAAA,gBACP;AAAA,cACF,GAAG;AAAA,gBACD,MAAM;AAAA,kBACJ,SAAS,GAAG,cAAc,SAAS,KAAK;AAAA,gBAC1C;AAAA,cACF,CAAC;AAAA,YACH;AAAA,UACF,KAAK;AACH,mBAAO;AAAA,cACL,iBAAiB;AAAA,YACnB;AAAA,UACF;AACE,kBAAM,IAAI,MAAM,oBAAoB,OAAO,QAAQ,CAAC;AAAA,QACxD;AAAA,MACF;AAAA,IACF;AACA,QAAI,kCAAkC;AAAA,MACpC,IAAI;AAAA,MACJ,KAAK;AAAA,MACL,IAAI;AAAA,MACJ,KAAK;AAAA,IACP;AACA,QAAI,yBAAyB,SAAU;AAAA,MACrC;AAAA,MACA;AAAA,IACF,GAAG;AACD,UAAI;AACJ,UAAI;AAAA,QACF;AAAA,QACA;AAAA,MACF,IAAI;AACJ,UAAI,MAAM;AAEV,UAAI,kBAAkB,MAAM,UAAU,MAAM,UAAU,MAAM;AAC5D,UAAI,aAAa,OAAO,MAAM,OAAO;AAEnC,YAAI,SAAS,UAAU;AACrB,cAAI;AACJ,iBAAO,OAAO,CAAC,GAAG,KAAK,GAAG,IAAI;AAAA,YAC5B,KAAK;AAAA,UACP,GAAG;AAAA,QACL,WAAW,YAAY,UAAU;AAC/B,cAAI;AACJ,iBAAO,QAAQ,CAAC,GAAG,MAAM,GAAG,IAAI;AAAA,YAC9B,KAAK;AAAA,UACP,GAAG;AAAA,QACL;AAAA,MACF;AACA,UAAI,UAAU,MAAM;AACpB,UAAI,oBAAoB,iBAAiB,YAAY,eAAe;AACpE,UAAI,WAAW,gCAAgC,QAAQ,GAAG;AACxD,YAAI,OAAO;AACX,eAAO;AAAA,UACL,MAAM,EAAE,QAAQ,CAAC,GAAG,MAAM,GAAG,IAAI,mBAAmB,SAAS,QAAQ,CAAC,GAAG,MAAM,OAAO,IAAI,aAAa,MAAM;AAAA,QAC/G;AAAA,MACF;AACA,aAAO,QAAQ,CAAC,GAAG,MAAM,GAAG,IAAI,mBAAmB;AAAA,IACrD;AACA,QAAI,kBAAkB,SAAU,cAAc;AAC5C,aAAO,SAAU,QAAQ;AACvB,gBAAQ,OAAO,MAAM;AAAA,UACnB,KAAK;AACH,mBAAO,UAAU,cAAc,MAAM;AAAA,UACvC,KAAK;AACH,mBAAO,SAAS,cAAc,MAAM;AAAA,UACtC,KAAK;AACH,mBAAO,uBAAuB,MAAM;AAAA,UACtC,KAAK;AACH,mBAAO,WAAW,cAAc,MAAM;AAAA,UACxC,KAAK;AACH,mBAAO,OAAO;AAAA,UAChB;AACE,kBAAM,IAAI,MAAM,kBAAkB,OAAO,OAAO,IAAI,CAAC;AAAA,QACzD;AAAA,MACF;AAAA,IACF;AACA,QAAI,mBAAmB,SAAU,cAAc,YAAY;AACzD,aAAO,WAAW,IAAI,gBAAgB,YAAY,CAAC;AAAA,IACrD;AACA,QAAI,cAAc,SAAU,IAAI;AAC9B,aAAO,SAAU,cAAc,QAAQ;AACrC,YAAI;AACJ,YAAI,aAAa,iBAAiB,cAAc,OAAO,UAAU;AAEjE,eAAO,MAAM,WAAW,SAAS,WAAW,CAAC,KAAK,QAAQ,CAAC,GAAG,MAAM,EAAE,IAAI,YAAY;AAAA,MACxF;AAAA,IACF;AACA,QAAI,YAAY,YAAY,MAAM;AAClC,QAAI,WAAW,YAAY,KAAK;AAIhC,QAAI,mBAAmB,SAAU,SAAS;AACxC,cAAQ,QAAQ,QAAQ;AAAA,QACtB,KAAK;AACH,iBAAO;AAAA,QACT,KAAK;AACH,iBAAO,QAAQ,CAAC;AAAA,QAClB;AACE,iBAAO;AAAA,YACL,MAAM;AAAA,UACR;AAAA,MACJ;AAAA,IACF;AACA,QAAI,uBAAuB,SAAU,cAAc,YAAY;AAC7D,aAAO,iBAAiB,iBAAiB,cAAc,UAAU,CAAC;AAAA,IACpE;AACA,QAAI,aAAa,SAAU,cAAc,IAAI;AAC3C,UAAI;AAAA,QACF;AAAA,QACA;AAAA,MACF,IAAI;AACJ,UAAI,cAAc,aAAa,KAAK,SAAU;AAAA,QAC5C;AAAA,MACF,GAAG;AACD,eAAO,UAAU;AAAA,MACnB,CAAC;AACD,OAAC,GAAG,WAAW,SAAS,aAAa,mHAAmH;AACxJ,UAAI;AAAA,QACF;AAAA,MACF,IAAI;AACJ,aAAO;AAAA,QACL,OAAO;AAAA,UACL;AAAA,UACA,OAAO,qBAAqB,cAAc,UAAU;AAAA,UACpD,QAAQ,iBAAiB,KAAK,OAAO,OAAO,KAAK;AAAA,UACjD,SAAS,iBAAiB,KAAK,OAAO,KAAK,MAAM;AAAA,QACnD;AAAA,MACF;AAAA,IACF;AACA,aAAS,YAAY,OAAO;AAC1B,UAAI;AAAA,QACF;AAAA,QACA,aAAa;AAAA,UACX;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,QACA;AAAA,MACF,IAAI;AACJ,OAAC,GAAG,WAAW,SAAS,CAAC,KAAK,8DAA8D;AAC5F,aAAO;AAAA,QACL;AAAA,QACA,OAAO,qBAAqB,cAAc,KAAK;AAAA,QAC/C,UAAU,CAAC,CAAC,WAAW;AAAA,MACzB;AAAA,IACF;AAAA;AAAA;;;AC7QA;AAAA;AAAA;AAEA,YAAQ,aAAa;AACrB,YAAQ,UAAU;AAClB,aAAS,iBAAiB,OAAO,WAAW;AAC1C,UAAI,CAAC,OAAO;AACV,eAAO;AAAA,MACT,WAAW,MAAM,OAAO;AACtB,YAAI;AACJ,YAAI,QAAQ,MAAM;AAClB,YAAI,YAAY,iBAAiB,MAAM,OAAO,SAAS;AACvD,cAAM,QAAQ;AACd,YAAI,UAAU,UAAU,KAAK;AAM7B,YAAI,cAAc,QAAQ,IAAI,SAAU,QAAQ;AAC9C,iBAAO,OAAO,MAAM,MAAM;AAAA,QAC5B,CAAC;AACD,eAAO,OAAO,CAAC,GAAG,KAAK,MAAM,OAAO,IAAI;AAAA,UACtC,KAAK;AAAA,QACP,GAAG;AAAA,MACL,WAAW,MAAM,MAAM;AACrB,eAAO;AAAA,UACL,MAAM,MAAM,KAAK,IAAI,SAAU,QAAQ;AACrC,mBAAO,iBAAiB,QAAQ,SAAS;AAAA,UAC3C,CAAC;AAAA,QACH;AAAA,MACF,WAAW,MAAM,KAAK;AACpB,eAAO;AAAA,UACL,KAAK,MAAM,IAAI,IAAI,SAAU,QAAQ;AACnC,mBAAO,iBAAiB,QAAQ,SAAS;AAAA,UAC3C,CAAC;AAAA,QACH;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,aAAS,aAAa,WAAW,WAAW;AAC1C,UAAI;AAAA,QACF;AAAA,QACA;AAAA,MACF,IAAI;AACJ,UAAI,CAAC,UAAU;AACb,eAAO;AAAA,MACT;AACA,aAAO,iBAAiB,OAAO,SAAS;AAAA,IAC1C;AAAA;AAAA;;;AChDA;AAAA;AAAA;AAEA,QAAI,yBAAyB;AAC7B,YAAQ,aAAa;AACrB,YAAQ,eAAe;AACvB,YAAQ,eAAe;AACvB,QAAI,eAAe,uBAAuB,qBAAwB;AAClE,QAAI,gBAAgB,uBAAuB,sBAAyB;AAEpE,aAAS,YAAY,MAAM,MAAM;AAC/B,UAAI;AAAA,QACF;AAAA,QACA;AAAA,MACF,IAAI;AACJ,UAAI,aAAa,KAAK,cAAc,KAAK,EAAE,MAAM;AACjD,UAAI,UAAU,WAAW,KAAK,KAAK,EAAE,KAAK;AAC1C,aAAO;AAAA,IACT;AACA,aAAS,aAAa,OAAO,MAAM;AAEjC,UAAI,aAAa,GAAG,aAAa,SAAS,KAAK;AAC/C,UAAI,aAAa,GAAG,cAAc,SAAS,WAAW,SAAU,MAAM;AACpE,eAAO,YAAY,MAAM,IAAI;AAAA,MAC/B,CAAC;AAGD,UAAI,aAAa,KAAK,cAAc,MAAM,KAAK,EAAE,MAAM;AACvD,UAAI,YAAY,WAAW,KAAK,SAAS;AAGzC,UAAI;AAAA,QACF;AAAA,QACA;AAAA,QACA;AAAA,MACF,IAAI,MAAM;AACV,UAAI,OAAO,QAAQ;AACjB,oBAAY,UAAU,aAAa,OAAO,IAAI,SAAU;AAAA,UACtD;AAAA,UACA;AAAA,QACF,GAAG;AACD,iBAAO,CAAC,YAAY,WAAW,SAAS;AAAA,QAC1C,CAAC,CAAC;AAAA,MACJ;AACA,UAAI,MAAM;AACR,oBAAY,UAAU,OAAO,IAAI;AAAA,MACnC;AACA,UAAI,MAAM;AACR,oBAAY,UAAU,MAAM,IAAI;AAAA,MAClC;AACA,aAAO;AAAA,IACT;AACA,aAAS,aAAa,OAAO,MAAM;AACjC,UAAI;AAAA,QACF;AAAA,MACF,IAAI,MAAM;AACV,UAAI,UAAU,aAAa,OAAO,IAAI,EAAE,KAAK;AAC7C,UAAI,eAAe;AACjB,eAAO,cAAc,SAAS,IAAI;AAAA,MACpC;AACA,aAAO;AAAA,IACT;AACA,aAAS,aAAa,OAAO,MAAM;AACjC,UAAI;AAAA,QACF;AAAA,MACF,IAAI,MAAM;AACV,UAAI,YAAY,aAAa,OAAO,IAAI;AACxC,UAAI,eAAe;AACjB,YAAI,UAAU,cAAc,UAAU,KAAK,GAAG,IAAI;AAClD,eAAO,QAAQ;AAAA,MACjB;AACA,aAAO,UAAU,MAAM;AAAA,IACzB;AAAA;AAAA;;;ACvEA;AAAA;AAAA;AAEA,QAAI,yBAAyB;AAC7B,YAAQ,aAAa;AACrB,YAAQ,UAAU;AAClB,YAAQ,kCAAkC;AAC1C,QAAI,sBAAsB,uBAAuB,2BAAmD;AACpG,QAAI,gBAAgB,uBAAuB,qBAA6C;AACxF,QAAI,UAAU,uBAAuB,gBAAuC;AAC5E,QAAI,aAAa,uBAAuB,mBAA0C;AAClF,QAAI,aAAa;AACjB,QAAI,kBAAkB;AACtB,QAAI,gBAAgB;AAEpB,QAAI,qBAAqB;AACzB,QAAI,+BAA+B;AACnC,aAAS,kCAAkC;AACzC,qCAA+B;AAAA,IACjC;AACA,QAAI,iBAAiB,QAAQ,WAAuB,WAAY;AAG9D,eAASC,gBAAe,SAAS;AAC/B,aAAK,gBAAgB,oBAAI,IAAI;AAC7B,aAAK,YAAY;AACjB,YAAI;AAAA,UACF;AAAA,UACA;AAAA,QACF,IAAI;AACJ,aAAK,UAAU;AACf,aAAK,SAAS;AACd,aAAK,aAAa;AAAA,MACpB;AACA,UAAI,SAASA,gBAAe;AAC5B,aAAO,QAAQ,WAAY;AACzB,eAAO,IAAI,SAAQ,SAAU,SAAS,QAAQ;AAC5C,iBAAO,QAAQ,QAAQ,KAAK,cAAc,CAAC,EAAE,MAAK,WAAY;AAC5D,gBAAI;AACF,qBAAO,QAAQ,QAAQ,KAAK,iBAAiB,CAAC,EAAE,KAAK,WAAY;AAC/D,oBAAI;AACF,yBAAO,QAAQ;AAAA,gBACjB,SAAS,UAAU;AACjB,yBAAO,OAAO,QAAQ;AAAA,gBACxB;AAAA,cACF,GAAG,MAAM;AAAA,YACX,SAAS,UAAU;AACjB,qBAAO,OAAO,QAAQ;AAAA,YACxB;AAAA,UACF,GAAE,KAAK,IAAI,GAAG,MAAM;AAAA,QACtB,GAAE,KAAK,IAAI,CAAC;AAAA,MACd;AACA,aAAO,WAAW,SAAU,OAAO,IAAI;AACrC,YAAI,YAAY,KAAK,cAAc,IAAI,KAAK;AAC5C,eAAO,YAAY,UAAU,IAAI,EAAE,IAAI;AAAA,MACzC;AACA,aAAO,eAAe,SAAU,OAAO,IAAI;AACzC,YAAI,YAAY,KAAK,cAAc,IAAI,KAAK;AAC5C,YAAI,WAAW;AACb,oBAAU,IAAI,EAAE;AAAA,QAClB,OAAO;AACL,eAAK,cAAc,IAAI,OAAO,oBAAI,IAAI,CAAC,EAAE,CAAC,CAAC;AAAA,QAC7C;AAAA,MACF;AACA,aAAO,kBAAkB,SAAU,OAAO,IAAI;AAC5C,YAAI,YAAY,KAAK,cAAc,IAAI,KAAK;AAC5C,YAAI,WAAW;AACb,oBAAU,OAAO,EAAE;AAAA,QACrB;AAAA,MACF;AACA,aAAO,qBAAqB,WAAY;AACtC,aAAK,gBAAgB,oBAAI,IAAI;AAAA,MAC/B;AACA,aAAO,WAAW,SAAU,OAAO;AACjC,YAAI,QAAQ,KAAK,cAAc,IAAI,KAAK;AACxC,YAAI,OAAO;AACT,iBAAO;AAAA,QACT;AACA,YAAI,WAAW,oBAAI,IAAI,CAAC,CAAC;AACzB,aAAK,cAAc,IAAI,OAAO,QAAQ;AACtC,eAAO;AAAA,MACT;AACA,aAAO,OAAO,SAAU,OAAO,IAAI;AACjC,YAAI,KAAK,SAAS,OAAO,EAAE,GAAG;AAC5B,iBAAO;AAAA,QACT;AACA,YAAI,MAAM,KAAK,KAAK,cAAc,KAAK,EAAE,GAAG,MAAM,EAAE;AACpD,YAAI,CAAC,KAAK;AACR,iBAAO;AAAA,QACT;AACA,aAAK,aAAa,OAAO,EAAE;AAC3B,gBAAQ,GAAG,WAAW,cAAc,KAAK,KAAK,OAAO,OAAO,KAAK,CAAC;AAAA,MACpE;AACA,aAAO,QAAQ,SAAU,QAAQ;AAC/B,YAAI,WAAW,GAAG,cAAc,cAAc,QAAQ,KAAK,IAAI;AAC/D,eAAO,KAAK,qBAAqB,SAAS,OAAO,KAAK;AAAA,MACxD;AACA,aAAO,WAAW,SAAU,OAAO;AACjC,gBAAQ,GAAG,cAAc,cAAc,OAAO,KAAK,IAAI,EAAE,IAAI,SAAU,QAAQ;AAC7E,iBAAO,OAAO;AAAA,QAChB,CAAC;AAAA,MACH;AACA,aAAO,iBAAiB,SAAU,OAAO;AACvC,gBAAQ,GAAG,cAAc,cAAc,OAAO,KAAK,IAAI;AAAA,MACzD;AACA,aAAO,QAAQ,SAAU,OAAO;AAC9B,gBAAQ,GAAG,cAAc,cAAc,OAAO,KAAK,IAAI;AAAA,MACzD;AACA,aAAO,QAAQ,SAAU,YAAY;AACnC,YAAI,QAAQ;AAYZ,aAAK,iBAAiB;AACtB,YAAI;AACF,cAAI,kBAAkB,CAAC;AACvB,qBAAW,QAAQ,SAAU,WAAW;AACtC,gBAAI,CAAC,MAAM,OAAO,GAAG,IAAI;AACzB,oBAAQ,MAAM;AAAA,cACZ,KAAK;AACH,oBAAI,CAAC,gBAAgB,KAAK,GAAG;AAC3B,kCAAgB,KAAK,IAAI,CAAC;AAAA,gBAC5B;AACA,gCAAgB,KAAK,EAAE,KAAK,GAAG;AAC/B;AAAA,cACF;AACE;AAAA,YACJ;AAAA,UACF,CAAC;AAGD,iBAAO,QAAQ,eAAe,EAAE,QAAQ,SAAU,MAAM;AACtD,gBAAI,CAAC,OAAO,IAAI,IAAI;AACpB,gBAAI,gCAAgC,OAAQ,KAAK;AACjD,kBAAM,KAAK,cAAc,KAAK,EAAE,OAAO,MAAM,6BAA6B;AAC1E,gBAAI,QAAQ,MAAM,SAAS,KAAK;AAChC,iBAAK,QAAQ,SAAU,KAAK;AAC1B,oBAAM,IAAI,IAAI,EAAE;AAAA,YAClB,CAAC;AAAA,UACH,CAAC;AACD,qBAAW,QAAQ,SAAU,WAAW;AACtC,gBAAI,CAAC,MAAM,OAAO,OAAO,IAAI;AAC7B,gBAAI,aAAa,MAAM,KAAK,cAAc,KAAK;AAC/C,oBAAQ,MAAM;AAAA,cACZ,KAAK;AAEH,oBAAI,SAAS,WAAW,GAAG,MAAM,QAAQ,EAAE,EAAE;AAC7C,oBAAI,MAAM;AACV,oBAAI,QAAQ;AACZ,2BAAW,OAAO,GAAG;AACrB;AAAA,cACF,KAAK;AACH,oBAAI,KAAK;AACT,oBAAI,SAAS,WAAW,GAAG,MAAM,EAAE;AACnC,oBAAI,QAAQ;AACV,yBAAO,UAAU;AACjB,6BAAW,OAAO,MAAM;AACxB,wBAAM,gBAAgB,OAAO,EAAE;AAAA,gBACjC;AACA;AAAA,cACF,KAAK;AACH,oBAAI,MAAM;AACV,oBAAI,UAAU,WAAW,GAAG,MAAM,GAAG;AACrC,2BAAW,WAAW,OAAO,OAAO;AACpC,sBAAM,gBAAgB,OAAO,GAAG;AAChC;AAAA,cACF;AACE;AAAA,YACJ;AAAA,UACF,CAAC;AAAA,QACH,SAAS,OAAO;AACd,eAAK,YAAY,KAAK;AAAA,QACxB;AAAA,MACF;AACA,aAAO,oBAAoB,SAAU,OAAO;AAC1C,eAAO,KAAK,KAAK,cAAc,KAAK,EAAE,KAAK;AAAA,UACzC,SAAS;AAAA,YACP,KAAK;AAAA,UACP;AAAA,QACF,CAAC,EAAE,IAAI,SAAU,QAAQ;AACvB,iBAAO,OAAO;AAAA,QAChB,CAAC;AAAA,MACH;AACA,aAAO,gBAAgB,SAAU,YAAY;AAC3C,YAAI,MAAuC;AACzC,WAAC,GAAG,WAAW,SAAS,cAAc,aAAa,OAAO,cAAc,MAAM,OAAO,KAAK,UAAU,EAAE,UAAU,eAAe,OAAO,WAAW,MAAM,2DAA2D;AAAA,QACpN;AACA,YAAI,YAAY,WAAW;AAC3B,kBAAU,KAAK,IAAI;AAAA,MACrB;AACA,aAAO,sBAAsB,WAAY;AACvC,eAAO,IAAI,SAAQ,SAAU,SAAS,QAAQ;AAC5C,iBAAO,QAAQ,SAAS,GAAG,gBAAgB,gBAAgB,KAAK,IAAI,CAAC,EAAE,MAAK,WAAY;AACtF,gBAAI;AACF,mBAAK,cAAc,MAAM;AACzB,sBAAQ,QAAQ,IAAI,8BAA8B;AAClD,qBAAO,QAAQ,QAAQ,KAAK,cAAc,CAAC,EAAE,MAAK,WAAY;AAC5D,oBAAI;AACF,uBAAK,aAAa;AAClB,yBAAO,QAAQ;AAAA,gBACjB,SAAS,UAAU;AACjB,yBAAO,OAAO,QAAQ;AAAA,gBACxB;AAAA,cACF,GAAE,KAAK,IAAI,GAAG,MAAM;AAAA,YACtB,SAAS,UAAU;AACjB,qBAAO,OAAO,QAAQ;AAAA,YACxB;AAAA,UACF,GAAE,KAAK,IAAI,GAAG,MAAM;AAAA,QACtB,GAAE,KAAK,IAAI,CAAC;AAAA,MACd;AAIA,aAAO,WAAW,SAAU,KAAK;AAC/B,YAAI,SAAS,KAAK,WAAW,GAAG;AAChC,eAAO,SAAS,OAAO,QAAQ;AAAA,MACjC;AACA,aAAO,WAAW,SAAU,KAAK,OAAO;AACtC,aAAK,iBAAiB;AACtB,YAAI;AACF,cAAI,SAAS,KAAK,WAAW,GAAG;AAChC,cAAI,QAAQ;AACV,mBAAO,QAAQ;AACf,iBAAK,cAAc,OAAO,MAAM;AAAA,UAClC,OAAO;AACL,iBAAK,cAAc,OAAO;AAAA,cACxB;AAAA,cACA;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF,SAAS,OAAO;AACd,eAAK,YAAY,KAAK;AAAA,QACxB;AAAA,MACF;AACA,aAAO,cAAc,SAAU,KAAK;AAClC,aAAK,iBAAiB;AACtB,YAAI;AACF,cAAI,SAAS,KAAK,WAAW,GAAG;AAChC,cAAI,QAAQ;AACV,iBAAK,cAAc,OAAO,MAAM;AAAA,UAClC;AAAA,QACF,SAAS,OAAO;AACd,eAAK,YAAY,KAAK;AAAA,QACxB;AAAA,MACF;AAIA,aAAO,gBAAgB,WAAY;AACjC,eAAO,IAAI,SAAQ,SAAU,SAAS,QAAQ;AAC5C,kBAAQ,QAAQ,IAAI,+BAA+B;AACnD,iBAAO,QAAQ,SAAS,GAAG,gBAAgB,SAAS,KAAK,OAAO,CAAC,EAAE,MAAK,SAAU,WAAW;AAC3F,gBAAI;AACF,mBAAK,OAAO;AACZ,sBAAQ,QAAQ,IAAI,wBAAwB;AAC5C,qBAAO,QAAQ;AAAA,YACjB,SAAS,UAAU;AACjB,qBAAO,OAAO,QAAQ;AAAA,YACxB;AAAA,UACF,GAAE,KAAK,IAAI,GAAG,MAAM;AAAA,QACtB,GAAE,KAAK,IAAI,CAAC;AAAA,MACd;AACA,aAAO,eAAe,WAAY;AAChC,YAAI,SAAS;AACb,gBAAQ,QAAQ,IAAI,0BAA0B;AAG9C,YAAI,SAAS,OAAO,OAAO,KAAK,OAAO,MAAM;AAC7C,eAAO,QAAQ,SAAU,aAAa;AACpC,iBAAO,eAAe,WAAW;AAAA,QACnC,CAAC;AACD,aAAK,KAAK,cAAc,iBAAiB;AAAA,UACvC,QAAQ,CAAC,KAAK;AAAA,UACd,SAAS,CAAC;AAAA,UACV,aAAa;AAAA,QACf,CAAC;AAGD,aAAK,mBAAmB,KAAK,OAAO;AACpC,gBAAQ,QAAQ,IAAI,oCAAoC;AAAA,MAC1D;AACA,aAAO,iBAAiB,SAAU,aAAa;AAC7C,YAAI;AAAA,UACF;AAAA,UACA;AAAA,QACF,IAAI;AACJ,YAAI,iBAAiB,YAAY,OAAO,SAAU,SAAS,QAAQ;AACjE,iBAAO,OAAO,YAAY,QAAQ,OAAO,CAAC,OAAO,IAAI,CAAC,IAAI;AAAA,QAC5D,GAAG,CAAC,CAAC;AACL,aAAK,KAAK,cAAc,MAAM;AAAA,UAC5B,QAAQ,CAAC,IAAI;AAAA,UACb,SAAS,CAAC,SAAS,EAAE,QAAQ,GAAG,oBAAoB,SAAS,cAAc,CAAC;AAAA,UAC5E,aAAa;AAAA,QACf,CAAC;AAAA,MACH;AACA,aAAO,mBAAmB,WAAY;AACpC,eAAO,IAAI,SAAQ,SAAU,SAAS,QAAQ;AAC5C,cAAI,WAAW,eAAe;AAC9B,sBAAY,KAAK;AACjB,0BAAgB,KAAK,OAAO;AAC5B,cAAI,cAAc,eAAe;AAC/B,mBAAO,MAAM,KAAK,IAAI;AAAA,UACxB,OACK;AAqEH,gBAAS,QAAT,WAAiB;AACf,qBAAO,MAAM,KAAK,IAAI;AAAA,YACxB;AAtEA,gBAAI,MAAM,WAAW;AACnB,sBAAQ,QAAQ,IAAI,mCAAmC;AACvD,qBAAO,QAAQ,QAAQ,KAAK,oBAAoB,CAAC,EAAE,MAAK,WAAY;AAClE,oBAAI;AACF,yBAAO,MAAM,KAAK,IAAI;AAAA,gBACxB,SAAS,UAAU;AACjB,yBAAO,OAAO,QAAQ;AAAA,gBACxB;AAAA,cACF,GAAE,KAAK,IAAI,GAAG,MAAM;AAAA,YACtB,OAAO;AAuDL,kBAAS,QAAT,WAAiB;AACf,uBAAO,MAAM,KAAK,IAAI;AAAA,cACxB;AAxDA,kBAAI,IAAI,aAAa,YAAY,eAAe;AAyC9C,oBAAS,QAAT,WAAiB;AACf,yBAAO,MAAM,KAAK,IAAI;AAAA,gBACxB;AA1CA,wBAAQ,QAAQ,IAAI,gEAAgE;AACpF,iCAAiB,KAAK,mBAAmB,SAAS;AAClD,oBAAI,gBAAgB;AAClB,0BAAQ,QAAQ,IAAI,iCAAiC,OAAO,WAAW,MAAM,EAAE,OAAO,KAAK,OAAO,SAAS,KAAK,CAAC;AACjH,sBAAI,eAAc,WAAY;AAC5B,wBAAI;AACF,6BAAO,MAAM,KAAK,IAAI;AAAA,oBACxB,SAAS,UAAU;AACjB,6BAAO,OAAO,QAAQ;AAAA,oBACxB;AAAA,kBACF,GAAE,KAAK,IAAI;AACX,sBAAI,eAAe,SAASC,cAAa,OAAO;AAC9C,wBAAI;AACF,8BAAQ,QAAQ,MAAM,2BAA2B,KAAK;AACtD,4BAAM;AAAA,oBACR,SAAS,UAAU;AACjB,6BAAO,OAAO,QAAQ;AAAA,oBACxB;AAAA,kBACF;AACA,sBAAI;AACF,2BAAO,QAAQ,QAAQ,KAAK,SAAS,cAAc,CAAC,EAAE,KAAK,WAAY;AACrE,0BAAI;AACF,+BAAO,YAAY;AAAA,sBACrB,SAAS,UAAU;AACjB,+BAAO,aAAa,QAAQ;AAAA,sBAC9B;AAAA,oBACF,GAAG,YAAY;AAAA,kBACjB,SAAS,OAAO;AACd,iCAAa,KAAK;AAAA,kBACpB;AAAA,gBACF,OAAO;AACL,0BAAQ,QAAQ,KAAK,oFAAoF;AACzG,yBAAO,QAAQ,QAAQ,KAAK,oBAAoB,CAAC,EAAE,MAAK,WAAY;AAClE,wBAAI;AACF,6BAAO,MAAM,KAAK,IAAI;AAAA,oBACxB,SAAS,UAAU;AACjB,6BAAO,OAAO,QAAQ;AAAA,oBACxB;AAAA,kBACF,GAAE,KAAK,IAAI,GAAG,MAAM;AAAA,gBACtB;AAAA,cAIF,OAAO;AACL,wBAAQ,QAAQ,KAAK,qCAAqC,OAAO,WAAW,mBAAmB,EAAE,OAAO,eAAe,uBAAuB,CAAC;AAC/I,uBAAO,QAAQ,QAAQ,KAAK,oBAAoB,CAAC,EAAE,MAAK,WAAY;AAClE,sBAAI;AACF,2BAAO,MAAM,KAAK,IAAI;AAAA,kBACxB,SAAS,UAAU;AACjB,2BAAO,OAAO,QAAQ;AAAA,kBACxB;AAAA,gBACF,GAAE,KAAK,IAAI,GAAG,MAAM;AAAA,cACtB;AAAA,YAIF;AAAA,UAIF;AACA,mBAAS,QAAQ;AACf,mBAAO,QAAQ;AAAA,UACjB;AAAA,QACF,GAAE,KAAK,IAAI,CAAC;AAAA,MACd;AACA,aAAO,qBAAqB,SAAU,aAAa;AAEjD,YAAI;AAAA,UACF;AAAA,QACF,IAAI;AACJ,YAAI,CAAC,YAAY;AACf,iBAAO;AAAA,QACT;AACA,YAAI;AAAA,UACF;AAAA,QACF,IAAI;AACJ,eAAO,kBAAkB;AAAA,UACvB;AAAA,UACA;AAAA,UACA,WAAW,KAAK,OAAO;AAAA,QACzB,CAAC;AAAA,MACH;AACA,aAAO,WAAW,SAAU,OAAO;AACjC,eAAO,IAAI,SAAQ,SAAU,SAAS;AACpC,cAAI,SAAS;AACb,gBAAM,QAAQ,SAAU,MAAM;AAC5B,gBAAI,mBAAmB,KAAK,MAAM;AAChC,qBAAO,6BAA6B,IAAI;AAAA,YAC1C,WAAW,kBAAkB,KAAK,MAAM;AACtC,qBAAO,4BAA4B,IAAI;AAAA,YACzC,WAAW,EAAE,UAAU,KAAK,OAAO;AACjC,oBAAM,IAAI,MAAM,8BAA8B,OAAO,KAAK,IAAI,CAAC;AAAA,YACjE;AAAA,UACF,CAAC;AAGD,eAAK,mBAAmB,KAAK,OAAO;AACpC,kBAAQ,QAAQ,IAAI,6BAA6B;AACjD,iBAAO,QAAQ;AAAA,QACjB,GAAE,KAAK,IAAI,CAAC;AAAA,MACd;AACA,aAAO,+BAA+B,SAAU;AAAA,QAC9C;AAAA,MACF,GAAG;AACD,aAAK,eAAe,MAAM;AAAA,MAC5B;AACA,aAAO,8BAA8B,SAAU;AAAA,QAC7C;AAAA,QACA;AAAA,MACF,GAAG;AACD,YAAI,aAAa,KAAK,KAAK,cAAc,KAAK;AAG9C,mBAAW,cAAc,CAAC,GAAG,SAAU,QAAQ;AAC7C,kBAAQ,QAAQ,SAAU,QAAQ;AAChC,aAAC,GAAG,WAAW,iBAAiB,QAAQ,OAAO,MAAM,MAAM,MAAM;AAAA,UACnE,CAAC;AAAA,QACH,CAAC;AAGD,gBAAQ,QAAQ,SAAU,QAAQ;AAChC,cAAI,OAAO,WAAW;AACpB,uBAAW,YAAY,OAAO,IAAI;AAAA,UACpC;AAAA,QACF,CAAC;AAAA,MACH;AAIA,aAAO,uBAAuB,SAAU,SAAS,OAAO;AACtD,YAAI,SAAS;AACb,YAAI,QAAQ,KAAK,SAAS,KAAK;AAC/B,eAAO,QAAQ,IAAI,SAAU,KAAK;AAChC,cAAI;AAAA,YACF;AAAA,UACF,IAAI;AACJ,cAAI,MAAM,IAAI,EAAE,GAAG;AACjB,mBAAO;AAAA,UACT;AACA,gBAAM,IAAI,EAAE;AACZ,kBAAQ,GAAG,WAAW,cAAc,KAAK,OAAO,OAAO,OAAO,KAAK,CAAC;AAAA,QACtE,CAAC;AAAA,MACH;AACA,aAAO,aAAa,SAAU,KAAK;AACjC,YAAI,eAAe,KAAK;AACxB,eAAO,gBAAgB,aAAa,GAAG,OAAO,GAAG;AAAA,MACnD;AACA,aAAO,mBAAmB,WAAY;AACpC,YAAI,KAAK,WAAW;AAClB,gBAAM,IAAI,MAAM,iDAAiD;AAAA,QACnE;AAAA,MACF;AAKA,aAAO,cAAc,SAAU,OAAO;AACpC,YAAI,CAAC,8BAA8B;AACjC,kBAAQ,QAAQ,KAAK,4GAA4G;AACjI,gBAAM;AAAA,QACR;AAEA,aAAK,YAAY;AAGjB,SAAC,GAAG,gBAAgB,gBAAgB,KAAK,IAAI;AAG7C,gBAAQ,QAAQ,MAAM,mEAAmE;AACzF,YAAI,UAAU,KAAK,QAAQ;AAC3B,mBAAW,QAAQ,KAAK;AAGxB,cAAM;AAAA,MACR;AACA,cAAQ,GAAG,cAAc,SAASD,iBAAgB,CAAC;AAAA,QACjD,KAAK;AAAA,QACL,KAAK,SAAS,MAAM;AAClB,cAAI,qBAAqB,KAAK,SAAS,kBAAkB,KAAK;AAC9D,iBAAO,SAAS,oBAAoB,EAAE,KAAK;AAAA,QAC7C;AAAA,QACA,KAAK,SAAS,IAAI,SAAS;AACzB,eAAK,SAAS,oBAAoB,GAAG,OAAO,OAAO,CAAC;AAAA,QACtD;AAAA,MACF,GAAG;AAAA,QACD,KAAK;AAAA,QACL,KAAK,SAAS,MAAM;AAClB,iBAAO,KAAK,KAAK,cAAc,eAAe;AAAA,QAChD;AAAA,MACF,CAAC,CAAC;AAAA,IACJ,GAAE;AAAA;AAAA;;;ACjgBF;AAAA;AAAA;AAEA,QAAI,yBAAyB;AAC7B,YAAQ,aAAa;AACrB,YAAQ,UAAU;AAClB,QAAI,sBAAsB,uBAAuB,2BAAmD;AACpG,QAAI,YAAY,uBAAuB,kBAAyC;AAChF,QAAI,aAAa,uBAAuB,mBAA0C;AAClF,QAAI,kBAAkB,uBAAuB,wBAA2B;AAExE,QAAI,iBAAiB,QAAQ,WAAuB,WAAY;AAC9D,eAASE,gBAAe,eAAe;AACrC,YAAI,QAAQ;AACZ,aAAK,QAAQ,CAAC;AACd,aAAK,oBAAoB;AACzB,aAAK,gBAAgB;AACrB,aAAK,cAAc,YAAY,SAAU,GAAG;AAC1C,cAAI,SAAS,EAAE;AAEf,gBAAM,MAAM,KAAK,MAAM;AACvB,cAAI,MAAM,MAAM,MAAM,QAAQ;AAC5B,kBAAM,YAAY;AAAA,UACpB;AAAA,QACF;AAAA,MACF;AACA,UAAI,SAASA,gBAAe;AAC5B,aAAO,cAAc,WAAY;AAC/B,YAAI,SAAS,KAAK,MAAM,CAAC;AACzB,YAAI;AACF,WAAC,GAAG,WAAW,SAAS,MAAM,KAAK,mBAAmB,wCAAwC;AAC9F,eAAK,qBAAqB;AAC1B,cAAI;AAAA,YACF;AAAA,YACA;AAAA,UACF,IAAI;AACJ,cAAI,YAAY,QAAQ,0BAA0B,MAAM;AACtD,iBAAK,mBAAmB,MAAM;AAAA,UAChC,OAAO;AACL,gBAAI,WAAW,KAAK,cAAc,IAAI,EAAE,MAAM,SAAS,GAAG,oBAAoB,SAAS,OAAO,CAAC;AAC/F,iBAAK,aAAa,QAAQ;AAAA,cACxB,OAAO;AAAA,YACT,CAAC;AAAA,UACH;AAAA,QACF,SAAS,OAAO;AACd,eAAK,SAAS,QAAQ,KAAK;AAAA,QAC7B;AAAA,MACF;AACA,aAAO,qBAAqB,SAAU,QAAQ;AAC5C,eAAO,IAAI,SAAQ,SAAU,SAAS,QAAQ;AAC5C,cAAI,MAAM,SAAS,SAAS,QAAQ;AACpC,cAAI,cAAc,SAASC,eAAc;AACvC,gBAAI;AACF,qBAAO,QAAQ;AAAA,YACjB,SAAS,UAAU;AACjB,qBAAO,OAAO,QAAQ;AAAA,YACxB;AAAA,UACF;AACA,cAAI,gBAAe,SAAU,OAAO;AAClC,gBAAI;AACF,mBAAK,SAAS,QAAQ,KAAK;AAC3B,qBAAO,YAAY;AAAA,YACrB,SAAS,UAAU;AACjB,qBAAO,OAAO,QAAQ;AAAA,YACxB;AAAA,UACF,GAAE,KAAK,IAAI;AACX,cAAI;AAkCF,gBAAS,QAAT,WAAiB;AACf,qBAAO,YAAY;AAAA,YACrB;AAnCA,aAAC;AAAA,cACC;AAAA,cACA;AAAA,YACF,IAAI;AACJ,gBAAI,YAAY,MAAM;AAEpB,eAAC,GAAG,WAAW,SAAS,CAAC,KAAK,QAAQ,kDAAkD;AACxF,eAAC,OAAO,IAAI;AACZ,uBAAS,IAAI,gBAAgB,QAAQ,OAAO;AAC5C,qBAAO,QAAQ,QAAQ,OAAO,MAAM,CAAC,EAAE,MAAK,WAAY;AACtD,oBAAI;AACF,uBAAK,SAAS;AACd,uBAAK,aAAa,QAAQ;AAAA,oBACxB,OAAO;AAAA,kBACT,CAAC;AACD,yBAAO,MAAM,KAAK,IAAI;AAAA,gBACxB,SAAS,UAAU;AACjB,yBAAO,aAAa,QAAQ;AAAA,gBAC9B;AAAA,cACF,GAAE,KAAK,IAAI,GAAG,YAAY;AAAA,YAC5B,OAAO;AACL,qBAAO,QAAQ,QAAQ,KAAK,cAAc,IAAI,EAAE,MAAM,SAAS,GAAG,oBAAoB,SAAS,OAAO,CAAC,CAAC,EAAE,MAAK,SAAU,UAAU;AACjI,oBAAI;AACF,6BAAW;AACX,uBAAK,aAAa,QAAQ;AAAA,oBACxB,OAAO;AAAA,kBACT,CAAC;AACD,yBAAO,MAAM,KAAK,IAAI;AAAA,gBACxB,SAAS,UAAU;AACjB,yBAAO,aAAa,QAAQ;AAAA,gBAC9B;AAAA,cACF,GAAE,KAAK,IAAI,GAAG,YAAY;AAAA,YAC5B;AAAA,UAIF,SAAS,OAAO;AACd,yBAAa,KAAK;AAAA,UACpB;AAAA,QACF,GAAE,KAAK,IAAI,CAAC;AAAA,MACd;AACA,aAAO,eAAe,SAAU,QAAQ,QAAQ;AAC9C,SAAC,GAAG,WAAW,SAAS,MAAM,KAAK,mBAAmB,qCAAqC;AAC3F,aAAK,oBAAoB;AACzB,aAAK,MAAM,MAAM;AACjB,YAAI;AACF,cAAI,WAAW;AAAA,YACb,IAAI,OAAO;AAAA,YACX;AAAA,YACA,aAAa,OAAO;AAAA,UACtB;AACA,eAAK,cAAc,YAAY,QAAQ;AAAA,QACzC,SAAS,OAAO;AACd,WAAC,GAAG,UAAU,SAAS,KAAK;AAAA,QAC9B;AACA,YAAI,KAAK,MAAM,QAAQ;AACrB,eAAK,YAAY;AAAA,QACnB;AAAA,MACF;AACA,aAAO,gBAAgB,SAAU,MAAM;AACrC,SAAC,GAAG,WAAW,SAAS,KAAK,QAAQ,iDAAiD;AACtF,YAAI,SAAS,KAAK,OAAO,IAAI,EAAE,KAAK,KAAK,MAAM;AAC/C,SAAC,GAAG,WAAW,SAAS,QAAQ,yBAAyB,OAAO,IAAI,CAAC;AACrE,eAAO;AAAA,MACT;AACA,aAAO,WAAW,SAAU,QAAQ,OAAO;AAEzC,SAAC,GAAG,UAAU,SAAS,KAAK;AAC5B,aAAK,aAAa,QAAQ;AAAA,UACxB;AAAA,QACF,CAAC;AAAA,MACH;AACA,aAAOD;AAAA,IACT,GAAE;AAAA;AAAA;;;AC3IF;AAAA;AAAA;AAEA,QAAI,yBAAyB;AAC7B,YAAQ,aAAa;AACrB,YAAQ,UAAU;AAClB,QAAI,kBAAkB,uBAAuB,wBAA2B;AAExE,QAAI,mBAAmB,WAAY;AACjC,WAAK,cAAc,IAAI,gBAAgB,QAAQ,IAAI;AACnD,aAAO;AAAA,IACT;AACA,QAAI,WAAW,QAAQ,UAAU,iBAAiB;AAAA;AAAA;;;ACXlD;AAAA;AAAA;AAEA,YAAQ,aAAa;AACrB,YAAQ,UAAU;AAClB,YAAQ,0BAA0B;AAElC,aAAS,wBAAwB,OAAO;AACtC,UAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,YAAI,WAAW,IAAI,MAAM,MAAM,MAAM;AACrC,iBAAS,IAAI,GAAG,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK,GAAG;AACnD,mBAAS,CAAC,IAAI,wBAAwB,MAAM,CAAC,CAAC;AAAA,QAChD;AACA,eAAO;AAAA,MACT,WAAW,SAAS,aAAa,OAAO,OAAO;AAC7C,eAAO,OAAO,OAAO,CAAC,GAAG,KAAK;AAAA,MAChC;AACA,aAAO;AAAA,IACT;AACA,aAAS,aAAa,MAAM;AAE1B,UAAI,SAAS,KAAK;AAClB,UAAI,8BAA8B,QAAQ;AACxC,YAAI,aAAa;AACjB,mBAAW,UAAU,wBAAwB,WAAW,OAAO;AAC/D,eAAO;AAAA,MACT,WAAW,gBAAgB,QAAQ;AAEjC,eAAO;AAAA,MACT;AACA,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AAAA;AAAA;;;AC9BA;AAAA;AAAA;AAEA,QAAI,yBAAyB;AAC7B,YAAQ,aAAa;AACrB,YAAQ,UAAU;AAClB,QAAI,kBAAkB,uBAAuB,wBAA2B;AACxE,QAAI,gBAAgB,uBAAuB,sBAAyB;AAEpE,QAAI,oBAAoB,QAAQ,WAAuB,WAAY;AACjE,eAASE,qBAAoB;AAC3B,YAAI,QAAQ;AACZ,aAAK,YAAY,WAAY;AAAA,QAAC;AAE9B,aAAK,iBAAiB;AAAA,UACpB,aAAa,SAAS,YAAY,MAAM;AACtC,kBAAM,UAAU;AAAA,cACd,OAAO,GAAG,cAAc,SAAS,IAAI;AAAA,YACvC,CAAC;AAAA,UACH;AAAA,UACA,WAAW,SAAS,YAAY;AAAA,UAAC;AAAA,QACnC;AAEA,aAAK,UAAU,IAAI,gBAAgB,QAAQ,KAAK,cAAc;AAAA,MAChE;AACA,UAAI,SAASA,mBAAkB;AAC/B,aAAO,cAAc,SAAU,MAAM;AACnC,aAAK,eAAe,UAAU;AAAA,UAC5B,OAAO,GAAG,cAAc,SAAS,IAAI;AAAA,QACvC,CAAC;AAAA,MACH;AACA,aAAOA;AAAA,IACT,GAAE;AAAA;AAAA;;;AC/BF;AAAA;AAAA;AAEA,YAAQ,aAAa;AACrB,YAAQ,UAAU;AAClB,aAAS,aAAa,cAAc;AAClC,UAAI,cAAc;AAChB,YAAI,gBAAgB;AACpB,eAAO,IAAI,cAAc;AAAA,MAC3B;AACA,UAAI,wBAAwB,4BAAsC;AAClE,aAAO,IAAI,sBAAsB;AAAA,IACnC;AACA,QAAI,YAAY;AAChB,aAAS,eAAe;AACtB,mBAAa;AACb,aAAO;AAAA,IACT;AACA,QAAI,iBAAiB,QAAQ,WAAuB,WAAY;AAC9D,eAASC,gBAAe,cAAc;AACpC,YAAI,QAAQ;AACZ,aAAK,gBAAgB,CAAC;AACtB,aAAK,UAAU,aAAa,YAAY;AACxC,aAAK,QAAQ,YAAY,SAAU;AAAA,UACjC;AAAA,QACF,GAAG;AACD,cAAI;AAAA,YACF;AAAA,YACA,IAAI;AAAA,UACN,IAAI;AACJ,cAAI;AAAA,YACF;AAAA,YACA;AAAA,UACF,IAAI,MAAM,cAAc,MAAM;AAG9B,cAAI,OAAO,YAAY;AACrB,qBAAS;AAAA,cACP,OAAO,IAAI,MAAM,wCAAwC;AAAA,YAC3D,CAAC;AACD;AAAA,UACF;AACA,mBAAS,MAAM;AAAA,QACjB;AAAA,MACF;AAGA,UAAI,SAASA,gBAAe;AAC5B,aAAO,OAAO,SAAU,MAAM,UAAU,CAAC,GAAG,WAAW,WAAY;AAAA,MAAC,GAEpE,cAAc,aAAa,oBAAoB,aAAa;AAC1D,YAAI,KAAK,aAAa;AACtB,aAAK,cAAc,KAAK;AAAA,UACtB;AAAA,UACA;AAAA,QACF,CAAC;AACD,aAAK,QAAQ,YAAY;AAAA,UACvB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH;AACA,aAAOA;AAAA,IACT,GAAE;AAAA;AAAA;;;AChEF;AAAA;AAEA,QAAI,yBAAyB;AAC7B,YAAQ,aAAa;AACrB,YAAQ,UAAU;AAClB,QAAI,YAAY,uBAAuB,iBAAyC;AAChF,QAAI,gBAAgB,uBAAuB,qBAA6C;AACxF,QAAI,aAAa,uBAAuB,mBAAuC;AAC/E,QAAI,UAAU,uBAAuB,gBAAoC;AACzE,QAAI,UAAU;AACd,QAAI,cAAc,uBAAuB,oBAAuB;AAEhE,QAAI,gBAAgB,QAAQ,WAAuB,WAAY;AAC7D,eAASC,eAAc,SAAS;AAC9B,YAAI;AACJ,aAAK,WAAW;AAChB,aAAK,SAAS,QAAQ,UAAU;AAChC,YAAI;AAAA,UACF;AAAA,UACA;AAAA,QACF,IAAI;AACJ,YAAI,eAAe,UAAU,wBAAwB,QAAQ,iBAAiB,WAAW,wBAAwB,wBAAwB;AACzI,aAAK,cAAc,IAAI,YAAY,QAAQ,YAAY;AACvD,aAAK,SAAS;AACd,aAAK,aAAa;AAClB,YAAI,MAAuC;AACzC,WAAC,GAAG,WAAW,SAAS,kBAAkB,SAAS,gLAAgL;AACnO,cAAI,SAAS,QAAQ,cAAc;AACjC,oBAAQ,QAAQ,KAAK,gHAAgH;AAAA,UACvI;AACA,WAAC,GAAG,WAAW,SAAS,6BAA6B,SAAS,iNAAiN;AAC/Q,cAAI,UAAU,QAAQ,yBAAyB;AAC7C,oBAAQ,QAAQ,KAAK,4HAA4H;AAAA,UACnJ;AACA,WAAC,GAAG,QAAQ,iBAAiB,IAAI;AAAA,QACnC;AACA,aAAK,YAAY,KAAK,SAAS,CAAC,OAAO,GAAG,SAAU,QAAQ;AAC1D,kBAAQ,GAAG,QAAQ,kBAAkB,QAAQ,QAAQ,YAAY;AAAA,QACnE,CAAC;AAAA,MACH;AAGA,UAAI,SAASA,eAAc;AAC3B,aAAO,YAAY,SAAU,UAAU,CAAC,GAAG;AACzC,eAAO,IAAI,SAAQ,SAAU,SAAS;AAGpC,cAAI,SAAS,KAAK;AAClB,iBAAO,KAAK,MAAM;AAGlB,iBAAO,QAAQ,IAAIA,gBAAe,GAAG,UAAU,SAAS,CAAC,GAAG,KAAK,UAAU;AAAA,YACzE,kBAAkB,OAAO,KAAK;AAAA,UAChC,GAAG,OAAO,CAAC,CAAC;AAAA,QACd,GAAE,KAAK,IAAI,CAAC;AAAA,MACd;AACA,aAAO,OAAO,SAAU,OAAO,IAAI,UAAU;AAC3C,SAAC,GAAG,QAAQ,eAAe,OAAO,KAAK,MAAM;AAC7C,aAAK,YAAY,KAAK,QAAQ,CAAC,OAAO,EAAE,GAAG,QAAQ;AAAA,MACrD;AACA,aAAO,QAAQ,SAAU,QAAQ,UAAU;AACzC,SAAC,GAAG,QAAQ,eAAe,OAAO,OAAO,KAAK,MAAM;AACpD,aAAK,YAAY,KAAK,SAAS,CAAC,MAAM,GAAG,QAAQ;AAAA,MACnD;AACA,aAAO,WAAW,SAAU,OAAO,UAAU;AAC3C,SAAC,GAAG,QAAQ,eAAe,MAAM,OAAO,KAAK,MAAM;AACnD,aAAK,YAAY,KAAK,YAAY,CAAC,KAAK,GAAG,QAAQ;AAAA,MACrD;AACA,aAAO,iBAAiB,SAAU,OAAO,UAAU;AACjD,SAAC,GAAG,QAAQ,eAAe,MAAM,OAAO,KAAK,MAAM;AACnD,aAAK,YAAY,KAAK,kBAAkB,CAAC,KAAK,GAAG,QAAQ;AAAA,MAC3D;AACA,aAAO,QAAQ,SAAU,OAAO,UAAU;AACxC,SAAC,GAAG,QAAQ,eAAe,MAAM,OAAO,KAAK,MAAM;AACnD,aAAK,YAAY,KAAK,SAAS,CAAC,KAAK,GAAG,QAAQ;AAAA,MAClD;AACA,aAAO,QAAQ,SAAU,YAAY,UAAU;AAC7C,YAAI,QAAQ;AACZ,mBAAW,QAAQ,SAAU,CAAC,EAAE,KAAK,GAAG;AACtC,kBAAQ,GAAG,QAAQ,eAAe,OAAO,MAAM,MAAM;AAAA,QACvD,CAAC;AAED,aAAK,YAAY,KAAK,SAAS,CAAC,UAAU,GAAG,UAAU,yBAAyB;AAAA,MAClF;AACA,aAAO,oBAAoB,SAAU,OAAO,UAAU;AACpD,SAAC,GAAG,QAAQ,eAAe,OAAO,KAAK,MAAM;AAC7C,aAAK,YAAY,KAAK,qBAAqB,CAAC,KAAK,GAAG,QAAQ;AAAA,MAC9D;AACA,aAAO,wBAAwB,SAAU,OAAO,WAAW,UAAU;AACnE,SAAC,GAAG,QAAQ,eAAe,OAAO,KAAK,MAAM;AAC7C,aAAK,YAAY,KAAK,SAAS,CAAC,UAAU,IAAI,SAAU,IAAI;AAC1D,iBAAO,CAAC,sBAAsB,OAAO,EAAE;AAAA,QACzC,CAAC,CAAC,GAAG,UAAU,aAAa,WAAW;AAAA,MACzC;AACA,aAAO,qBAAqB,SAAU,QAAQ,UAAU;AACtD,iBAAS;AAAA,UACP,OAAO,IAAI,MAAM,0CAA0C;AAAA,QAC7D,CAAC;AAAA,MACH;AACA,aAAO,kBAAkB,SAAU,IAAI,oBAAoB,UAAU;AACnE,iBAAS;AAAA,UACP,OAAO,IAAI,MAAM,uCAAuC;AAAA,QAC1D,CAAC;AAAA,MACH;AACA,aAAO,sBAAsB,SAAU,UAAU;AAC/C,aAAK,YAAY,KAAK,uBAAuB,CAAC,GAAG,QAAQ;AAAA,MAC3D;AACA,aAAO,gBAAgB,SAAU,YAAY,UAAU;AACrD,aAAK,YAAY,KAAK,iBAAiB,CAAC,UAAU,GAAG,QAAQ;AAAA,MAC/D;AACA,aAAO,WAAW,SAAU,KAAK,UAAU;AACzC,aAAK,YAAY,KAAK,YAAY,CAAC,GAAG,GAAG,QAAQ;AAAA,MACnD;AACA,aAAO,WAAW,SAAU,KAAK,OAAO,UAAU;AAChD,SAAC,GAAG,WAAW,SAAS,aAAa,OAAO,OAAO,2CAA2C;AAC9F,aAAK,YAAY,KAAK,YAAY,CAAC,KAAK,KAAK,GAAG,QAAQ;AAAA,MAC1D;AACA,aAAO,cAAc,SAAU,KAAK,UAAU;AAC5C,aAAK,YAAY,KAAK,eAAe,CAAC,GAAG,GAAG,QAAQ;AAAA,MACtD;AAKA,aAAO,cAAc,SAAU,OAAO;AACpC,aAAK,YAAY,KAAK,eAAe,CAAC,KAAK,GAAG,WAAY;AAAA,QAAC,CAAC;AAAA,MAC9D;AAIA,aAAO,sBAAsB,WAAY;AACvC,aAAK,YAAY,KAAK,sBAAsB,CAAC,GAAG,WAAY;AAAA,QAAC,CAAC;AAAA,MAChE;AACA,aAAO,6BAA6B,SAAU,OAAO,IAAI;AACvD,YAAI,SAAS,KAAK;AAClB,YAAI,QAAQ;AACV,cAAI,iBAAiB,OAAO,KAAK,cAAc,KAAK;AAEpD,cAAI,cAAc,CAAC,CAAC,eAAe,GAAG,MAAM,EAAE;AAC9C,kBAAQ,QAAQ,IAAI,YAAY,OAAO,OAAO,GAAG,EAAE,OAAO,IAAI,6BAA6B,EAAE,OAAO,WAAW,CAAC;AAGhH,cAAI,kBAAkB,CAAC,CAAC,eAAe,KAAK,OAAO,SAAU,KAAK;AAChE,mBAAO,IAAI,OAAO;AAAA,UACpB,CAAC;AACD,kBAAQ,QAAQ,IAAI,YAAY,OAAO,OAAO,GAAG,EAAE,OAAO,IAAI,mDAAmD,EAAE,OAAO,eAAe,CAAC;AAAA,QAC5I;AAAA,MACF;AACA,cAAQ,GAAG,cAAc,SAASA,gBAAe,CAAC;AAAA,QAChD,KAAK;AAAA,QACL,KAAK,SAAS,MAAM;AAElB,iBAAO,KAAK,YAAY,QAAQ,QAAQ;AAAA,QAC1C;AAAA,MACF,CAAC,CAAC;AAAA,IACJ,GAAE;AACF,kBAAc,cAAc;AAAA;AAAA;",
  "names": ["i", "self", "obj", "data", "e", "callback", "cursor", "self", "coll", "collObj", "key", "value", "fatalHandler", "DatabaseDriver", "$Try_4_Catch", "DatabaseBridge", "$Try_2_Post", "SynchronousWorker", "LokiDispatcher", "LokiJSAdapter"]
}
