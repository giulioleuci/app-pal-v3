#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander = require("commander");
const generate_1 = require("./generate");
const util_1 = require("./util");
const watch_1 = require("./watch");
const withOptions = (command) => {
    return command
        .option("-i, --in [inFolder]", "Path to a folder with your translation files")
        .option("-o, --out [outFile]", "Path to the output file")
        .option("--default-namespace [defaultNamespace]", "Default Namespace in your i18next configuration", "translation")
        .option("--indent [indent]", "Indentation level of output file", "2")
        .option("--type-name [typeName]", "Exported type name in the generated file", "TranslationKeys")
        .option("--quote-char [quoteChar]", "Character to use to quote strings", "'")
        .option("-c, --config [configFile]", "Path to config file", "i18next-typescript.config.json");
};
const parseOptions = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    const config = opts.config
        ? yield util_1.readFile(opts.config).then((f) => JSON.parse(f.toString()))
        : {};
    return Object.assign({ inFolder: opts.in, outFile: opts.out, defaultNs: opts["default-namespace"], indent: parseInt(opts.indent, 10), typeName: opts["type-name"], quoteChar: opts["quote-char"] }, config);
});
withOptions(commander
    .command("generate")
    .alias("g")
    .description("Generate type definitions for all your translation keys.")).action((c) => __awaiter(void 0, void 0, void 0, function* () {
    const options = yield parseOptions(c.opts());
    yield generate_1.generate(options);
}));
withOptions(commander
    .command("watch")
    .alias("w")
    .description("Watch your translation files and generate type definitions for all your translations keys when they change.")).action((c) => __awaiter(void 0, void 0, void 0, function* () {
    const options = yield parseOptions(c.opts());
    watch_1.watch({ inFolder: options.inFolder }, () => generate_1.generate(options));
}));
commander.parse(process.argv);
//# sourceMappingURL=cli.js.map