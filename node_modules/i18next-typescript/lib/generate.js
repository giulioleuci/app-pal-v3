"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
const path = require("path");
const util_1 = require("./util");
const flatten = (lists) => lists.reduce((m, l) => m.concat(l), []);
const extractKeys = (o, keys, path = "", namespace = "") => {
    Object.entries(o).map(([k, v]) => {
        const nextPath = [path, k].filter((t) => t).join(".");
        if (typeof v === "string") {
            keys.push(`${namespace}${nextPath}`);
        }
        if (typeof v === "object") {
            extractKeys(v, keys, nextPath, namespace);
        }
    });
    return keys;
};
const keysToTs = ({ keys, indent, quoteChar, typeName, }) => {
    const whitespace = Array(indent)
        .fill(null)
        .map(() => " ")
        .join("");
    return [
        `export type ${typeName} =`,
        ...keys.map((k) => `${whitespace}| ${quoteChar}${k}${quoteChar}`),
    ].join("\n");
};
exports.generate = ({ inFolder, outFile, defaultNs = "translation", indent = 2, typeName = "TranslationKeys", quoteChar = `'`, }) => __awaiter(void 0, void 0, void 0, function* () {
    const files = yield util_1.readdir(inFolder);
    const jsonFiles = files.filter((f) => f.endsWith(".json"));
    // make sure default keys appear first
    const i = jsonFiles.map((f) => path.parse(f).name).indexOf(defaultNs);
    if (i !== -1) {
        const defaultNamespaceFile = jsonFiles[i];
        jsonFiles.splice(i, 1);
        jsonFiles.unshift(defaultNamespaceFile);
    }
    const keys = yield Promise.all(jsonFiles.map((f) => __awaiter(void 0, void 0, void 0, function* () {
        const content = yield util_1.readFile(path.join(inFolder, f));
        const translations = JSON.parse(content.toString());
        const namespace = path.parse(f).name;
        return extractKeys(translations, [], "", namespace === defaultNs ? "" : `${namespace}:`).sort();
    }))).then(flatten);
    const tsFileContent = keysToTs({
        keys,
        indent,
        quoteChar,
        typeName,
    });
    yield util_1.writeFile(outFile, tsFileContent);
});
//# sourceMappingURL=generate.js.map